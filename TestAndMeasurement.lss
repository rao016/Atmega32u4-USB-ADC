
TestAndMeasurement.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000024e  00800100  00003106  0000319a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003106  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000223  0080034e  0080034e  000033e8  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000033e8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000008a0  00000000  00000000  00003400  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000bbd8  00000000  00000000  00003ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00003225  00000000  00000000  0000f878  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000e2a4  00000000  00000000  00012a9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000012f8  00000000  00000000  00020d44  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00019c09  00000000  00000000  0002203c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000072b4  00000000  00000000  0003bc45  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000848  00000000  00000000  00042ef9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000a811  00000000  00000000  00043741  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
       0:	3f c1       	rjmp	.+638    	; 0x280 <__ctors_end>
       2:	00 00       	nop
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
       4:	59 c1       	rjmp	.+690    	; 0x2b8 <__bad_interrupt>
       6:	00 00       	nop
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
       8:	57 c1       	rjmp	.+686    	; 0x2b8 <__bad_interrupt>
       a:	00 00       	nop
       c:	55 c1       	rjmp	.+682    	; 0x2b8 <__bad_interrupt>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
       e:	00 00       	nop
      10:	53 c1       	rjmp	.+678    	; 0x2b8 <__bad_interrupt>
      12:	00 00       	nop
      14:	51 c1       	rjmp	.+674    	; 0x2b8 <__bad_interrupt>
      16:	00 00       	nop
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
      18:	4f c1       	rjmp	.+670    	; 0x2b8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	4d c1       	rjmp	.+666    	; 0x2b8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	4b c1       	rjmp	.+662    	; 0x2b8 <__bad_interrupt>
	while (UDCON & (1 << RMWKUP));
      22:	00 00       	nop
      24:	0c 94 43 0d 	jmp	0x1a86	; 0x1a86 <__vector_9>
      28:	0c 94 7b 0e 	jmp	0x1cf6	; 0x1cf6 <__vector_10>
	while (*BytesRem)
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
      2c:	0c 94 46 0f 	jmp	0x1e8c	; 0x1e8c <__vector_11>
      30:	43 c1       	rjmp	.+646    	; 0x2b8 <__bad_interrupt>

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
      32:	00 00       	nop
      34:	41 c1       	rjmp	.+642    	; 0x2b8 <__bad_interrupt>
      36:	00 00       	nop
      38:	3f c1       	rjmp	.+638    	; 0x2b8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	3d c1       	rjmp	.+634    	; 0x2b8 <__bad_interrupt>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
      3e:	00 00       	nop
      40:	3b c1       	rjmp	.+630    	; 0x2b8 <__bad_interrupt>
			{
				*CurrConfigLoc = PrevDescLoc;
      42:	00 00       	nop
      44:	0c 94 32 0d 	jmp	0x1a64	; 0x1a64 <__vector_17>
				*BytesRem      = PrevBytesRem;
      48:	37 c1       	rjmp	.+622    	; 0x2b8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	35 c1       	rjmp	.+618    	; 0x2b8 <__bad_interrupt>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
      4e:	00 00       	nop
}
      50:	33 c1       	rjmp	.+614    	; 0x2b8 <__bad_interrupt>
      52:	00 00       	nop
      54:	31 c1       	rjmp	.+610    	; 0x2b8 <__bad_interrupt>
      56:	00 00       	nop
      58:	2f c1       	rjmp	.+606    	; 0x2b8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	2d c1       	rjmp	.+602    	; 0x2b8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	2b c1       	rjmp	.+598    	; 0x2b8 <__bad_interrupt>
      62:	00 00       	nop
      64:	29 c1       	rjmp	.+594    	; 0x2b8 <__bad_interrupt>
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      66:	00 00       	nop
      68:	27 c1       	rjmp	.+590    	; 0x2b8 <__bad_interrupt>
      6a:	00 00       	nop

	ParserData->TotalDeviceReports = 1;
      6c:	25 c1       	rjmp	.+586    	; 0x2b8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	23 c1       	rjmp	.+582    	; 0x2b8 <__bad_interrupt>
      72:	00 00       	nop
      74:	21 c1       	rjmp	.+578    	; 0x2b8 <__bad_interrupt>
      76:	00 00       	nop
      78:	1f c1       	rjmp	.+574    	; 0x2b8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	1d c1       	rjmp	.+570    	; 0x2b8 <__bad_interrupt>
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};
      7e:	00 00       	nop
      80:	1b c1       	rjmp	.+566    	; 0x2b8 <__bad_interrupt>
      82:	00 00       	nop
      84:	19 c1       	rjmp	.+562    	; 0x2b8 <__bad_interrupt>
      86:	00 00       	nop
      88:	17 c1       	rjmp	.+558    	; 0x2b8 <__bad_interrupt>
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
      8a:	00 00       	nop
      8c:	15 c1       	rjmp	.+554    	; 0x2b8 <__bad_interrupt>
      8e:	00 00       	nop
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
      90:	13 c1       	rjmp	.+550    	; 0x2b8 <__bad_interrupt>
      92:	00 00       	nop
      94:	11 c1       	rjmp	.+546    	; 0x2b8 <__bad_interrupt>
      96:	00 00       	nop
uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
      98:	0f c1       	rjmp	.+542    	; 0x2b8 <__bad_interrupt>

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      9a:	00 00       	nop
      9c:	0d c1       	rjmp	.+538    	; 0x2b8 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	0b c1       	rjmp	.+534    	; 0x2b8 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	09 c1       	rjmp	.+530    	; 0x2b8 <__bad_interrupt>

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      a6:	00 00       	nop
      a8:	07 c1       	rjmp	.+526    	; 0x2b8 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	0f 05       	cpc	r16, r15
      ae:	2f 05       	cpc	r18, r15
      b0:	39 05       	cpc	r19, r9
      b2:	5f 05       	cpc	r21, r15
      b4:	8d 05       	cpc	r24, r13
				CurrStateTable->ReportCount                 = ReportItemData;
				break;
			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
      b6:	a9 05       	cpc	r26, r9
      b8:	ce 05       	cpc	r28, r14
      ba:	2e 06       	cpc	r2, r30
      bc:	4b 06       	cpc	r4, r27
      be:	df 06       	cpc	r13, r31
      c0:	e5 06       	cpc	r14, r21
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
      c2:	eb 06       	cpc	r14, r27
      c4:	fe 06       	cpc	r15, r30
      c6:	61 07       	cpc	r22, r17
      c8:	f1 10       	cpse	r15, r1
      ca:	13 11       	cpse	r17, r3
      cc:	fa 11       	cpse	r31, r10
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
      ce:	13 11       	cpse	r17, r3
      d0:	fa 11       	cpse	r31, r10
      d2:	55 11       	cpse	r21, r5
      d4:	78 11       	cpse	r23, r8
	{
		uint8_t  HIDReportItem  = *ReportData;
      d6:	fa 11       	cpse	r31, r10
      d8:	cb 11       	cpse	r28, r11
      da:	dd 11       	cpse	r29, r13

000000dc <__trampolines_end>:
      dc:	6e 61       	ori	r22, 0x1E	; 30
      de:	6e 00       	.word	0x006e	; ????

000000e0 <__c.2128>:
		uint32_t ReportItemData = 0;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      e0:	69 6e 66 00                                         inf.

000000e4 <ProductString>:
      e4:	16 03 44 00 61 00 74 00 61 00 6c 00 6f 00 67 00     ..D.a.t.a.l.o.g.
	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData = 0;

		ReportData++;
      f4:	67 00 65 00 72 00 00 00                             g.e.r...

000000fc <ManufacturerString>:
	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData = 0;
      fc:	10 03 52 00 2e 00 20 00 4f 00 61 00 72 00 65 00     ..R... .O.a.r.e.
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     10c:	00 00                                               ..

0000010e <LanguageString>:
     10e:	04 03 09 04                                         ....

00000112 <ConfigurationDescriptor>:
     112:	09 02 27 00 01 01 00 c0 32 09 04 00 00 03 fe 03     ..'.....2.......
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     122:	01 00 07 05 04 02 40 00 05 07 05 83 02 40 00 05     ......@......@..
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     132:	07 05 82 03 08 00 ff                                .......

00000139 <DeviceDescriptor>:
     139:	12 01 10 01 00 00 00 08 eb 03 65 20 00 00 01 02     ..........e ....
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
				ReportData     += 4;
				break;
			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     149:	dc 01 00 40 7a 10 f3 5a 00 a0 72 4e 18 09 00 10     ...@z..Z..rN....
     159:	a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54 02 00     ......vH.....T..
				ReportSize     -= 2;
				ReportData     += 2;
				break;
			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     169:	00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96 98 00     ...;............
				ReportSize     -= 1;
				ReportData     += 1;
     179:	00 00 40 42 0f 00 00 00 a0 86 01 00 00 00 10 27     ..@B...........'
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     189:	00 00 00 00 e8 03 00 00 00 00 64 00 00 00 00 00     ..........d.....
     199:	0a 00 00 00 00 00 01 00 00 00 00 00 2c 76 d8 88     ............,v..
				break;
			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     1a9:	dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96 e5 e3     .gO.#....Y......
				ReportSize     -= 1;
				ReportData     += 1;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1b9:	e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26 eb 89     .S.:.Q.v.....&..
     1c9:	8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2 ba a5     ..b.@|o.....@...
     1d9:	6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67 6d c1     o....Z*.\.kl.gm.
     1e9:	1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed 90 2e     .....G.. .......
     1f9:	03 00 94 35 77 05 00 80 84 1e 08 00 00 20 4e 0a     ...5w........ N.
     209:	00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83 11 41     .....3333..n...A
     219:	ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18 d1 84     ..!..;.U........
     229:	4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32 84 72     K8..|......$ 2.r
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     239:	5e 22 81 00 c9 f1 24 ec a1 e5 3d 27                 ^"....$...='

00000245 <pstr_nan>:
     245:	4e 41 4e                                            NAN

00000248 <pstr_inity>:
     248:	49 4e 49 54 59                                      INITY

0000024d <pstr_inf>:
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     24d:	49 4e 46                                            INF

00000250 <pwr_m10>:
     250:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     260:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000268 <pwr_p10>:
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
     268:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     278:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

00000280 <__ctors_end>:
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;
			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     280:	11 24       	eor	r1, r1
     282:	1f be       	out	0x3f, r1	; 63
     284:	cf ef       	ldi	r28, 0xFF	; 255
     286:	da e0       	ldi	r29, 0x0A	; 10
				break;
     288:	de bf       	out	0x3e, r29	; 62
			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     28a:	cd bf       	out	0x3d, r28	; 61

0000028c <__do_copy_data>:
     28c:	13 e0       	ldi	r17, 0x03	; 3
     28e:	a0 e0       	ldi	r26, 0x00	; 0
     290:	b1 e0       	ldi	r27, 0x01	; 1
     292:	e6 e0       	ldi	r30, 0x06	; 6
     294:	f1 e3       	ldi	r31, 0x31	; 49
     296:	02 c0       	rjmp	.+4      	; 0x29c <__do_copy_data+0x10>
				break;
     298:	05 90       	lpm	r0, Z+
			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     29a:	0d 92       	st	X+, r0
     29c:	ae 34       	cpi	r26, 0x4E	; 78
     29e:	b1 07       	cpc	r27, r17
     2a0:	d9 f7       	brne	.-10     	; 0x298 <__do_copy_data+0xc>

000002a2 <__do_clear_bss>:
     2a2:	25 e0       	ldi	r18, 0x05	; 5
				break;
     2a4:	ae e4       	ldi	r26, 0x4E	; 78
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     2a6:	b3 e0       	ldi	r27, 0x03	; 3
     2a8:	01 c0       	rjmp	.+2      	; 0x2ac <.do_clear_bss_start>

000002aa <.do_clear_bss_loop>:
     2aa:	1d 92       	st	X+, r1

000002ac <.do_clear_bss_start>:
     2ac:	a1 37       	cpi	r26, 0x71	; 113
     2ae:	b2 07       	cpc	r27, r18
     2b0:	e1 f7       	brne	.-8      	; 0x2aa <.do_clear_bss_loop>
     2b2:	62 d7       	rcall	.+3780   	; 0x1178 <main>
				break;
     2b4:	0c 94 81 18 	jmp	0x3102	; 0x3102 <_exit>

000002b8 <__bad_interrupt>:
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     2b8:	a3 ce       	rjmp	.-698    	; 0x0 <__vectors>

000002ba <vfprintf>:
     2ba:	a3 e1       	ldi	r26, 0x13	; 19
     2bc:	b0 e0       	ldi	r27, 0x00	; 0
     2be:	e3 e6       	ldi	r30, 0x63	; 99
     2c0:	f1 e0       	ldi	r31, 0x01	; 1
     2c2:	0c 94 36 12 	jmp	0x246c	; 0x246c <__prologue_saves__>
				break;
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;
			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     2c6:	7c 01       	movw	r14, r24
     2c8:	1b 01       	movw	r2, r22
     2ca:	6a 01       	movw	r12, r20
				break;
     2cc:	fc 01       	movw	r30, r24
			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     2ce:	17 82       	std	Z+7, r1	; 0x07
     2d0:	16 82       	std	Z+6, r1	; 0x06
     2d2:	83 81       	ldd	r24, Z+3	; 0x03

				if (ParserData->UsingReportIDs)
     2d4:	81 ff       	sbrs	r24, 1
     2d6:	66 c3       	rjmp	.+1740   	; 0x9a4 <vfprintf+0x6ea>
     2d8:	be 01       	movw	r22, r28
     2da:	6f 5f       	subi	r22, 0xFF	; 255
     2dc:	7f 4f       	sbci	r23, 0xFF	; 255
     2de:	4b 01       	movw	r8, r22
     2e0:	f7 01       	movw	r30, r14
     2e2:	93 81       	ldd	r25, Z+3	; 0x03
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2e4:	f1 01       	movw	r30, r2
     2e6:	93 fd       	sbrc	r25, 3
     2e8:	85 91       	lpm	r24, Z+
     2ea:	93 ff       	sbrs	r25, 3
     2ec:	81 91       	ld	r24, Z+
     2ee:	1f 01       	movw	r2, r30
     2f0:	88 23       	and	r24, r24
     2f2:	09 f4       	brne	.+2      	; 0x2f6 <vfprintf+0x3c>
     2f4:	53 c3       	rjmp	.+1702   	; 0x99c <vfprintf+0x6e2>
     2f6:	85 32       	cpi	r24, 0x25	; 37
     2f8:	39 f4       	brne	.+14     	; 0x308 <vfprintf+0x4e>
     2fa:	93 fd       	sbrc	r25, 3
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     2fc:	85 91       	lpm	r24, Z+
     2fe:	93 ff       	sbrs	r25, 3
     300:	81 91       	ld	r24, Z+
     302:	1f 01       	movw	r2, r30
     304:	85 32       	cpi	r24, 0x25	; 37
     306:	39 f4       	brne	.+14     	; 0x316 <vfprintf+0x5c>
     308:	b7 01       	movw	r22, r14
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <fputc>
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     310:	56 01       	movw	r10, r12
     312:	65 01       	movw	r12, r10
     314:	e5 cf       	rjmp	.-54     	; 0x2e0 <vfprintf+0x26>
     316:	10 e0       	ldi	r17, 0x00	; 0
     318:	51 2c       	mov	r5, r1
     31a:	20 e0       	ldi	r18, 0x00	; 0
     31c:	20 32       	cpi	r18, 0x20	; 32
     31e:	a0 f4       	brcc	.+40     	; 0x348 <vfprintf+0x8e>
     320:	8b 32       	cpi	r24, 0x2B	; 43
     322:	69 f0       	breq	.+26     	; 0x33e <vfprintf+0x84>
     324:	30 f4       	brcc	.+12     	; 0x332 <vfprintf+0x78>
     326:	80 32       	cpi	r24, 0x20	; 32
     328:	59 f0       	breq	.+22     	; 0x340 <vfprintf+0x86>
     32a:	83 32       	cpi	r24, 0x23	; 35
     32c:	69 f4       	brne	.+26     	; 0x348 <vfprintf+0x8e>
     32e:	20 61       	ori	r18, 0x10	; 16
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     330:	2c c0       	rjmp	.+88     	; 0x38a <vfprintf+0xd0>
     332:	8d 32       	cpi	r24, 0x2D	; 45
     334:	39 f0       	breq	.+14     	; 0x344 <vfprintf+0x8a>
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     336:	80 33       	cpi	r24, 0x30	; 48
     338:	39 f4       	brne	.+14     	; 0x348 <vfprintf+0x8e>
     33a:	21 60       	ori	r18, 0x01	; 1
     33c:	26 c0       	rjmp	.+76     	; 0x38a <vfprintf+0xd0>
     33e:	22 60       	ori	r18, 0x02	; 2
     340:	24 60       	ori	r18, 0x04	; 4
     342:	23 c0       	rjmp	.+70     	; 0x38a <vfprintf+0xd0>
     344:	28 60       	ori	r18, 0x08	; 8
     346:	21 c0       	rjmp	.+66     	; 0x38a <vfprintf+0xd0>
     348:	27 fd       	sbrc	r18, 7
     34a:	27 c0       	rjmp	.+78     	; 0x39a <vfprintf+0xe0>
     34c:	30 ed       	ldi	r19, 0xD0	; 208
     34e:	38 0f       	add	r19, r24
     350:	3a 30       	cpi	r19, 0x0A	; 10
     352:	78 f4       	brcc	.+30     	; 0x372 <vfprintf+0xb8>
     354:	26 ff       	sbrs	r18, 6
     356:	06 c0       	rjmp	.+12     	; 0x364 <vfprintf+0xaa>
     358:	fa e0       	ldi	r31, 0x0A	; 10
     35a:	1f 9f       	mul	r17, r31
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     35c:	30 0d       	add	r19, r0
     35e:	11 24       	eor	r1, r1
     360:	13 2f       	mov	r17, r19
     362:	13 c0       	rjmp	.+38     	; 0x38a <vfprintf+0xd0>
					}
				}

				ParserData->UsingReportIDs = true;
     364:	6a e0       	ldi	r22, 0x0A	; 10
     366:	56 9e       	mul	r5, r22
     368:	30 0d       	add	r19, r0
     36a:	11 24       	eor	r1, r1
     36c:	53 2e       	mov	r5, r19
     36e:	20 62       	ori	r18, 0x20	; 32

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     370:	0c c0       	rjmp	.+24     	; 0x38a <vfprintf+0xd0>
     372:	8e 32       	cpi	r24, 0x2E	; 46
     374:	21 f4       	brne	.+8      	; 0x37e <vfprintf+0xc4>
     376:	26 fd       	sbrc	r18, 6
     378:	11 c3       	rjmp	.+1570   	; 0x99c <vfprintf+0x6e2>
     37a:	20 64       	ori	r18, 0x40	; 64
     37c:	06 c0       	rjmp	.+12     	; 0x38a <vfprintf+0xd0>
     37e:	8c 36       	cpi	r24, 0x6C	; 108
				break;
     380:	11 f4       	brne	.+4      	; 0x386 <vfprintf+0xcc>
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     382:	20 68       	ori	r18, 0x80	; 128
     384:	02 c0       	rjmp	.+4      	; 0x38a <vfprintf+0xd0>
     386:	88 36       	cpi	r24, 0x68	; 104
     388:	41 f4       	brne	.+16     	; 0x39a <vfprintf+0xe0>
     38a:	f1 01       	movw	r30, r2
     38c:	93 fd       	sbrc	r25, 3
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     38e:	85 91       	lpm	r24, Z+
     390:	93 ff       	sbrs	r25, 3
     392:	81 91       	ld	r24, Z+
     394:	1f 01       	movw	r2, r30
     396:	81 11       	cpse	r24, r1
     398:	c1 cf       	rjmp	.-126    	; 0x31c <vfprintf+0x62>
     39a:	9b eb       	ldi	r25, 0xBB	; 187
     39c:	98 0f       	add	r25, r24
     39e:	93 30       	cpi	r25, 0x03	; 3
     3a0:	18 f4       	brcc	.+6      	; 0x3a8 <vfprintf+0xee>
     3a2:	20 61       	ori	r18, 0x10	; 16
     3a4:	80 5e       	subi	r24, 0xE0	; 224
     3a6:	06 c0       	rjmp	.+12     	; 0x3b4 <vfprintf+0xfa>
				break;
     3a8:	9b e9       	ldi	r25, 0x9B	; 155
				break;
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     3aa:	98 0f       	add	r25, r24
     3ac:	93 30       	cpi	r25, 0x03	; 3
     3ae:	08 f0       	brcs	.+2      	; 0x3b2 <vfprintf+0xf8>
     3b0:	aa c1       	rjmp	.+852    	; 0x706 <vfprintf+0x44c>
     3b2:	2f 7e       	andi	r18, 0xEF	; 239
     3b4:	26 ff       	sbrs	r18, 6
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     3b6:	16 e0       	ldi	r17, 0x06	; 6
     3b8:	2f 73       	andi	r18, 0x3F	; 63
     3ba:	72 2e       	mov	r7, r18
     3bc:	85 36       	cpi	r24, 0x65	; 101
     3be:	21 f4       	brne	.+8      	; 0x3c8 <vfprintf+0x10e>
     3c0:	f2 2f       	mov	r31, r18
     3c2:	f0 64       	ori	r31, 0x40	; 64
     3c4:	7f 2e       	mov	r7, r31
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     3c6:	08 c0       	rjmp	.+16     	; 0x3d8 <vfprintf+0x11e>
     3c8:	86 36       	cpi	r24, 0x66	; 102
     3ca:	21 f4       	brne	.+8      	; 0x3d4 <vfprintf+0x11a>

					while (CurrCollectionPath->Parent != NULL)
     3cc:	62 2f       	mov	r22, r18
     3ce:	60 68       	ori	r22, 0x80	; 128
     3d0:	76 2e       	mov	r7, r22
     3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <vfprintf+0x11e>
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     3d4:	11 11       	cpse	r17, r1
     3d6:	11 50       	subi	r17, 0x01	; 1
     3d8:	77 fe       	sbrs	r7, 7
     3da:	07 c0       	rjmp	.+14     	; 0x3ea <vfprintf+0x130>
     3dc:	1c 33       	cpi	r17, 0x3C	; 60
     3de:	48 f4       	brcc	.+18     	; 0x3f2 <vfprintf+0x138>
     3e0:	44 24       	eor	r4, r4
     3e2:	43 94       	inc	r4
     3e4:	41 0e       	add	r4, r17
     3e6:	27 e0       	ldi	r18, 0x07	; 7
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     3e8:	0b c0       	rjmp	.+22     	; 0x400 <vfprintf+0x146>
     3ea:	18 30       	cpi	r17, 0x08	; 8
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     3ec:	30 f4       	brcc	.+12     	; 0x3fa <vfprintf+0x140>
     3ee:	21 2f       	mov	r18, r17
     3f0:	06 c0       	rjmp	.+12     	; 0x3fe <vfprintf+0x144>
     3f2:	27 e0       	ldi	r18, 0x07	; 7
     3f4:	4c e3       	ldi	r20, 0x3C	; 60
     3f6:	44 2e       	mov	r4, r20
     3f8:	03 c0       	rjmp	.+6      	; 0x400 <vfprintf+0x146>
     3fa:	27 e0       	ldi	r18, 0x07	; 7
     3fc:	17 e0       	ldi	r17, 0x07	; 7
     3fe:	41 2c       	mov	r4, r1
				}

				CurrCollectionPath->Type       = ReportItemData;
     400:	56 01       	movw	r10, r12
     402:	74 e0       	ldi	r23, 0x04	; 4
     404:	a7 0e       	add	r10, r23
     406:	b1 1c       	adc	r11, r1
     408:	f6 01       	movw	r30, r12
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     40a:	60 81       	ld	r22, Z
     40c:	71 81       	ldd	r23, Z+1	; 0x01
     40e:	82 81       	ldd	r24, Z+2	; 0x02
     410:	93 81       	ldd	r25, Z+3	; 0x03
     412:	04 2d       	mov	r16, r4
     414:	a4 01       	movw	r20, r8
     416:	0e 94 48 15 	call	0x2a90	; 0x2a90 <__ftoa_engine>

				if (UsageListSize)
     41a:	6c 01       	movw	r12, r24
     41c:	09 81       	ldd	r16, Y+1	; 0x01
     41e:	00 ff       	sbrs	r16, 0
     420:	02 c0       	rjmp	.+4      	; 0x426 <vfprintf+0x16c>
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     422:	03 ff       	sbrs	r16, 3
     424:	06 c0       	rjmp	.+12     	; 0x432 <vfprintf+0x178>
     426:	71 fc       	sbrc	r7, 1
     428:	07 c0       	rjmp	.+14     	; 0x438 <vfprintf+0x17e>
     42a:	72 fc       	sbrc	r7, 2
     42c:	08 c0       	rjmp	.+16     	; 0x43e <vfprintf+0x184>
     42e:	61 2c       	mov	r6, r1
     430:	08 c0       	rjmp	.+16     	; 0x442 <vfprintf+0x188>
     432:	3d e2       	ldi	r19, 0x2D	; 45
     434:	63 2e       	mov	r6, r19
     436:	05 c0       	rjmp	.+10     	; 0x442 <vfprintf+0x188>

					for (uint8_t i = 0; i < UsageListSize; i++)
     438:	2b e2       	ldi	r18, 0x2B	; 43
					  UsageList[i] = UsageList[i + 1];
     43a:	62 2e       	mov	r6, r18
     43c:	02 c0       	rjmp	.+4      	; 0x442 <vfprintf+0x188>
     43e:	90 e2       	ldi	r25, 0x20	; 32
     440:	69 2e       	mov	r6, r25

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 0; i < UsageListSize; i++)
     442:	80 2f       	mov	r24, r16
     444:	8c 70       	andi	r24, 0x0C	; 12
     446:	99 f1       	breq	.+102    	; 0x4ae <vfprintf+0x1f4>
     448:	66 20       	and	r6, r6
     44a:	11 f0       	breq	.+4      	; 0x450 <vfprintf+0x196>
     44c:	84 e0       	ldi	r24, 0x04	; 4
					  UsageList[i] = UsageList[i + 1];

					UsageListSize--;
     44e:	01 c0       	rjmp	.+2      	; 0x452 <vfprintf+0x198>
     450:	83 e0       	ldi	r24, 0x03	; 3
     452:	85 15       	cp	r24, r5
     454:	10 f0       	brcs	.+4      	; 0x45a <vfprintf+0x1a0>
     456:	51 2c       	mov	r5, r1
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     458:	0b c0       	rjmp	.+22     	; 0x470 <vfprintf+0x1b6>
     45a:	58 1a       	sub	r5, r24
     45c:	73 fc       	sbrc	r7, 3
     45e:	08 c0       	rjmp	.+16     	; 0x470 <vfprintf+0x1b6>
     460:	b7 01       	movw	r22, r14
     462:	80 e2       	ldi	r24, 0x20	; 32
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <fputc>
     46a:	5a 94       	dec	r5
     46c:	c9 f7       	brne	.-14     	; 0x460 <vfprintf+0x1a6>
     46e:	f3 cf       	rjmp	.-26     	; 0x456 <vfprintf+0x19c>
     470:	66 20       	and	r6, r6
     472:	29 f0       	breq	.+10     	; 0x47e <vfprintf+0x1c4>
     474:	b7 01       	movw	r22, r14
     476:	86 2d       	mov	r24, r6
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <fputc>
     47e:	03 fd       	sbrc	r16, 3
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     480:	03 c0       	rjmp	.+6      	; 0x488 <vfprintf+0x1ce>
     482:	00 ee       	ldi	r16, 0xE0	; 224
     484:	10 e0       	ldi	r17, 0x00	; 0
     486:	02 c0       	rjmp	.+4      	; 0x48c <vfprintf+0x1d2>
     488:	0c ed       	ldi	r16, 0xDC	; 220
     48a:	10 e0       	ldi	r17, 0x00	; 0
     48c:	f7 2d       	mov	r31, r7
     48e:	f0 71       	andi	r31, 0x10	; 16
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     490:	7f 2e       	mov	r7, r31
     492:	f8 01       	movw	r30, r16
     494:	84 91       	lpm	r24, Z
     496:	88 23       	and	r24, r24
     498:	09 f4       	brne	.+2      	; 0x49c <vfprintf+0x1e2>
     49a:	76 c2       	rjmp	.+1260   	; 0x988 <vfprintf+0x6ce>
     49c:	71 10       	cpse	r7, r1
     49e:	80 52       	subi	r24, 0x20	; 32
     4a0:	b7 01       	movw	r22, r14
				break;
     4a2:	90 e0       	ldi	r25, 0x00	; 0
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     4a4:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <fputc>
     4a8:	0f 5f       	subi	r16, 0xFF	; 255
     4aa:	1f 4f       	sbci	r17, 0xFF	; 255
     4ac:	f2 cf       	rjmp	.-28     	; 0x492 <vfprintf+0x1d8>
     4ae:	77 fe       	sbrs	r7, 7
     4b0:	0f c0       	rjmp	.+30     	; 0x4d0 <vfprintf+0x216>
     4b2:	4c 0c       	add	r4, r12
     4b4:	04 ff       	sbrs	r16, 4
     4b6:	04 c0       	rjmp	.+8      	; 0x4c0 <vfprintf+0x206>
     4b8:	8a 81       	ldd	r24, Y+2	; 0x02
     4ba:	81 33       	cpi	r24, 0x31	; 49
     4bc:	09 f4       	brne	.+2      	; 0x4c0 <vfprintf+0x206>
     4be:	4a 94       	dec	r4
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     4c0:	14 14       	cp	r1, r4
     4c2:	74 f5       	brge	.+92     	; 0x520 <vfprintf+0x266>
     4c4:	f8 e0       	ldi	r31, 0x08	; 8
     4c6:	f4 15       	cp	r31, r4
     4c8:	78 f5       	brcc	.+94     	; 0x528 <vfprintf+0x26e>
     4ca:	88 e0       	ldi	r24, 0x08	; 8
     4cc:	48 2e       	mov	r4, r24
     4ce:	2c c0       	rjmp	.+88     	; 0x528 <vfprintf+0x26e>
     4d0:	76 fc       	sbrc	r7, 6
     4d2:	2a c0       	rjmp	.+84     	; 0x528 <vfprintf+0x26e>
     4d4:	81 2f       	mov	r24, r17
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	8c 15       	cp	r24, r12
				CurrCollectionPath = CurrCollectionPath->Parent;
				break;
			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     4da:	9d 05       	cpc	r25, r13
     4dc:	9c f0       	brlt	.+38     	; 0x504 <vfprintf+0x24a>
     4de:	6c ef       	ldi	r22, 0xFC	; 252
     4e0:	c6 16       	cp	r12, r22
     4e2:	6f ef       	ldi	r22, 0xFF	; 255
     4e4:	d6 06       	cpc	r13, r22
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4e6:	74 f0       	brlt	.+28     	; 0x504 <vfprintf+0x24a>
     4e8:	77 2d       	mov	r23, r7
     4ea:	70 68       	ori	r23, 0x80	; 128
     4ec:	77 2e       	mov	r7, r23
     4ee:	0a c0       	rjmp	.+20     	; 0x504 <vfprintf+0x24a>
     4f0:	e2 e0       	ldi	r30, 0x02	; 2
     4f2:	f0 e0       	ldi	r31, 0x00	; 0
     4f4:	ec 0f       	add	r30, r28
     4f6:	fd 1f       	adc	r31, r29
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     4f8:	e1 0f       	add	r30, r17
     4fa:	f1 1d       	adc	r31, r1
					NewReportItem.CollectionPath = CurrCollectionPath;
     4fc:	80 81       	ld	r24, Z
     4fe:	80 33       	cpi	r24, 0x30	; 48
     500:	19 f4       	brne	.+6      	; 0x508 <vfprintf+0x24e>
     502:	11 50       	subi	r17, 0x01	; 1
     504:	11 11       	cpse	r17, r1
     506:	f4 cf       	rjmp	.-24     	; 0x4f0 <vfprintf+0x236>
     508:	77 fe       	sbrs	r7, 7
     50a:	0e c0       	rjmp	.+28     	; 0x528 <vfprintf+0x26e>
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     50c:	44 24       	eor	r4, r4
     50e:	43 94       	inc	r4
     510:	41 0e       	add	r4, r17
     512:	81 2f       	mov	r24, r17

					if (UsageListSize)
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	c8 16       	cp	r12, r24
     518:	d9 06       	cpc	r13, r25
     51a:	2c f4       	brge	.+10     	; 0x526 <vfprintf+0x26c>
     51c:	1c 19       	sub	r17, r12
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     51e:	04 c0       	rjmp	.+8      	; 0x528 <vfprintf+0x26e>
     520:	44 24       	eor	r4, r4
     522:	43 94       	inc	r4
     524:	01 c0       	rjmp	.+2      	; 0x528 <vfprintf+0x26e>
     526:	10 e0       	ldi	r17, 0x00	; 0
     528:	77 fe       	sbrs	r7, 7
     52a:	07 c0       	rjmp	.+14     	; 0x53a <vfprintf+0x280>
     52c:	1c 14       	cp	r1, r12
     52e:	1d 04       	cpc	r1, r13
     530:	3c f4       	brge	.+14     	; 0x540 <vfprintf+0x286>
     532:	96 01       	movw	r18, r12

						for (uint8_t i = 0; i < UsageListSize; i++)
     534:	2f 5f       	subi	r18, 0xFF	; 255
						  UsageList[i] = UsageList[i + 1];
     536:	3f 4f       	sbci	r19, 0xFF	; 255
     538:	05 c0       	rjmp	.+10     	; 0x544 <vfprintf+0x28a>
     53a:	25 e0       	ldi	r18, 0x05	; 5
     53c:	30 e0       	ldi	r19, 0x00	; 0

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 0; i < UsageListSize; i++)
     53e:	02 c0       	rjmp	.+4      	; 0x544 <vfprintf+0x28a>
     540:	21 e0       	ldi	r18, 0x01	; 1
     542:	30 e0       	ldi	r19, 0x00	; 0
     544:	66 20       	and	r6, r6
     546:	11 f0       	breq	.+4      	; 0x54c <vfprintf+0x292>
     548:	2f 5f       	subi	r18, 0xFF	; 255
						  UsageList[i] = UsageList[i + 1];

						UsageListSize--;
     54a:	3f 4f       	sbci	r19, 0xFF	; 255
     54c:	11 23       	and	r17, r17
     54e:	31 f0       	breq	.+12     	; 0x55c <vfprintf+0x2a2>
     550:	41 2f       	mov	r20, r17
     552:	50 e0       	ldi	r21, 0x00	; 0
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     554:	4f 5f       	subi	r20, 0xFF	; 255
     556:	5f 4f       	sbci	r21, 0xFF	; 255
     558:	24 0f       	add	r18, r20
     55a:	35 1f       	adc	r19, r21
     55c:	45 2d       	mov	r20, r5
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     55e:	50 e0       	ldi	r21, 0x00	; 0
     560:	24 17       	cp	r18, r20
     562:	35 07       	cpc	r19, r21
     564:	14 f4       	brge	.+4      	; 0x56a <vfprintf+0x2b0>
     566:	52 1a       	sub	r5, r18
     568:	01 c0       	rjmp	.+2      	; 0x56c <vfprintf+0x2b2>
     56a:	51 2c       	mov	r5, r1
     56c:	87 2d       	mov	r24, r7
     56e:	89 70       	andi	r24, 0x09	; 9
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     570:	49 f4       	brne	.+18     	; 0x584 <vfprintf+0x2ca>
     572:	55 20       	and	r5, r5
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     574:	39 f0       	breq	.+14     	; 0x584 <vfprintf+0x2ca>
     576:	b7 01       	movw	r22, r14
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     578:	80 e2       	ldi	r24, 0x20	; 32
     57a:	90 e0       	ldi	r25, 0x00	; 0
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     57c:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <fputc>
     580:	5a 94       	dec	r5
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     582:	f7 cf       	rjmp	.-18     	; 0x572 <vfprintf+0x2b8>
     584:	66 20       	and	r6, r6

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     586:	29 f0       	breq	.+10     	; 0x592 <vfprintf+0x2d8>
     588:	b7 01       	movw	r22, r14
     58a:	86 2d       	mov	r24, r6
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <fputc>
     592:	73 fc       	sbrc	r7, 3
     594:	09 c0       	rjmp	.+18     	; 0x5a8 <vfprintf+0x2ee>
     596:	55 20       	and	r5, r5
     598:	39 f0       	breq	.+14     	; 0x5a8 <vfprintf+0x2ee>
     59a:	b7 01       	movw	r22, r14
     59c:	80 e3       	ldi	r24, 0x30	; 48
     59e:	90 e0       	ldi	r25, 0x00	; 0

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5a0:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <fputc>
     5a4:	5a 94       	dec	r5
     5a6:	f7 cf       	rjmp	.-18     	; 0x596 <vfprintf+0x2dc>
     5a8:	77 fe       	sbrs	r7, 7
     5aa:	5f c0       	rjmp	.+190    	; 0x66a <vfprintf+0x3b0>
     5ac:	9c 2d       	mov	r25, r12
     5ae:	8d 2d       	mov	r24, r13

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5b0:	d7 fe       	sbrs	r13, 7
     5b2:	02 c0       	rjmp	.+4      	; 0x5b8 <vfprintf+0x2fe>
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	80 e0       	ldi	r24, 0x00	; 0
     5b8:	69 2e       	mov	r6, r25
     5ba:	78 2e       	mov	r7, r24
     5bc:	40 e0       	ldi	r20, 0x00	; 0
     5be:	50 e0       	ldi	r21, 0x00	; 0
     5c0:	c6 01       	movw	r24, r12
     5c2:	84 19       	sub	r24, r4
     5c4:	91 09       	sbc	r25, r1
     5c6:	9d 87       	std	Y+13, r25	; 0x0d
     5c8:	8c 87       	std	Y+12, r24	; 0x0c
     5ca:	96 01       	movw	r18, r12
     5cc:	26 19       	sub	r18, r6
     5ce:	37 09       	sbc	r19, r7
     5d0:	28 0d       	add	r18, r8
     5d2:	39 1d       	adc	r19, r9
     5d4:	81 2f       	mov	r24, r17
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	ee 27       	eor	r30, r30
     5da:	ff 27       	eor	r31, r31
     5dc:	e8 1b       	sub	r30, r24
     5de:	f9 0b       	sbc	r31, r25
     5e0:	ff 87       	std	Y+15, r31	; 0x0f
     5e2:	ee 87       	std	Y+14, r30	; 0x0e
     5e4:	ff ef       	ldi	r31, 0xFF	; 255
     5e6:	6f 16       	cp	r6, r31

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5e8:	7f 06       	cpc	r7, r31
     5ea:	69 f4       	brne	.+26     	; 0x606 <vfprintf+0x34c>
     5ec:	b7 01       	movw	r22, r14
     5ee:	8e e2       	ldi	r24, 0x2E	; 46
     5f0:	90 e0       	ldi	r25, 0x00	; 0
					  return HID_PARSE_InsufficientReportItems;
     5f2:	2b 8b       	std	Y+19, r18	; 0x13
     5f4:	3a 8b       	std	Y+18, r19	; 0x12

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     5f6:	48 8b       	std	Y+16, r20	; 0x10
     5f8:	59 8b       	std	Y+17, r21	; 0x11
     5fa:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <fputc>
     5fe:	59 89       	ldd	r21, Y+17	; 0x11
     600:	48 89       	ldd	r20, Y+16	; 0x10
     602:	3a 89       	ldd	r19, Y+18	; 0x12
     604:	2b 89       	ldd	r18, Y+19	; 0x13
     606:	c6 14       	cp	r12, r6
     608:	d7 04       	cpc	r13, r7
     60a:	54 f0       	brlt	.+20     	; 0x620 <vfprintf+0x366>
     60c:	6c 85       	ldd	r22, Y+12	; 0x0c
     60e:	7d 85       	ldd	r23, Y+13	; 0x0d
     610:	66 15       	cp	r22, r6
     612:	77 05       	cpc	r23, r7
     614:	2c f4       	brge	.+10     	; 0x620 <vfprintf+0x366>
     616:	f9 01       	movw	r30, r18
     618:	e4 0f       	add	r30, r20
     61a:	f5 1f       	adc	r31, r21
     61c:	81 81       	ldd	r24, Z+1	; 0x01
     61e:	01 c0       	rjmp	.+2      	; 0x622 <vfprintf+0x368>
     620:	80 e3       	ldi	r24, 0x30	; 48
     622:	71 e0       	ldi	r23, 0x01	; 1
     624:	67 1a       	sub	r6, r23
     626:	71 08       	sbc	r7, r1
     628:	4f 5f       	subi	r20, 0xFF	; 255
     62a:	5f 4f       	sbci	r21, 0xFF	; 255
     62c:	ee 85       	ldd	r30, Y+14	; 0x0e
     62e:	ff 85       	ldd	r31, Y+15	; 0x0f
     630:	6e 16       	cp	r6, r30
     632:	7f 06       	cpc	r7, r31
     634:	6c f0       	brlt	.+26     	; 0x650 <vfprintf+0x396>
     636:	b7 01       	movw	r22, r14
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	2b 8b       	std	Y+19, r18	; 0x13
     63c:	3a 8b       	std	Y+18, r19	; 0x12
     63e:	48 8b       	std	Y+16, r20	; 0x10
     640:	59 8b       	std	Y+17, r21	; 0x11
     642:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <fputc>
     646:	2b 89       	ldd	r18, Y+19	; 0x13
     648:	3a 89       	ldd	r19, Y+18	; 0x12
     64a:	48 89       	ldd	r20, Y+16	; 0x10
     64c:	59 89       	ldd	r21, Y+17	; 0x11
     64e:	ca cf       	rjmp	.-108    	; 0x5e4 <vfprintf+0x32a>
     650:	6c 14       	cp	r6, r12
     652:	7d 04       	cpc	r7, r13
     654:	39 f4       	brne	.+14     	; 0x664 <vfprintf+0x3aa>
     656:	9a 81       	ldd	r25, Y+2	; 0x02
     658:	96 33       	cpi	r25, 0x36	; 54
     65a:	18 f4       	brcc	.+6      	; 0x662 <vfprintf+0x3a8>
     65c:	95 33       	cpi	r25, 0x35	; 53
     65e:	11 f4       	brne	.+4      	; 0x664 <vfprintf+0x3aa>
     660:	04 ff       	sbrs	r16, 4
     662:	81 e3       	ldi	r24, 0x31	; 49
     664:	b7 01       	movw	r22, r14
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	4b c0       	rjmp	.+150    	; 0x700 <vfprintf+0x446>
     66a:	8a 81       	ldd	r24, Y+2	; 0x02
     66c:	81 33       	cpi	r24, 0x31	; 49
     66e:	09 f0       	breq	.+2      	; 0x672 <vfprintf+0x3b8>
     670:	0f 7e       	andi	r16, 0xEF	; 239
     672:	b7 01       	movw	r22, r14
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <fputc>
     67a:	11 11       	cpse	r17, r1
					  ParserData->TotalReportItems++;
     67c:	05 c0       	rjmp	.+10     	; 0x688 <vfprintf+0x3ce>
     67e:	74 fe       	sbrs	r7, 4
     680:	18 c0       	rjmp	.+48     	; 0x6b2 <vfprintf+0x3f8>
     682:	85 e4       	ldi	r24, 0x45	; 69
     684:	90 e0       	ldi	r25, 0x00	; 0
				}

				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     686:	17 c0       	rjmp	.+46     	; 0x6b6 <vfprintf+0x3fc>
     688:	b7 01       	movw	r22, r14
     68a:	8e e2       	ldi	r24, 0x2E	; 46
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <fputc>
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     692:	82 e0       	ldi	r24, 0x02	; 2
     694:	66 24       	eor	r6, r6
     696:	63 94       	inc	r6
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     698:	68 0e       	add	r6, r24
     69a:	f4 01       	movw	r30, r8
     69c:	e8 0f       	add	r30, r24
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     69e:	f1 1d       	adc	r31, r1
     6a0:	80 81       	ld	r24, Z
     6a2:	b7 01       	movw	r22, r14
     6a4:	90 e0       	ldi	r25, 0x00	; 0
		}
	}

	if (!(ParserData->TotalReportItems))
     6a6:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <fputc>
     6aa:	11 50       	subi	r17, 0x01	; 1
     6ac:	41 f3       	breq	.-48     	; 0x67e <vfprintf+0x3c4>
	  return HID_PARSE_NoUnfilteredReportItems;
     6ae:	86 2d       	mov	r24, r6
     6b0:	f1 cf       	rjmp	.-30     	; 0x694 <vfprintf+0x3da>

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6b2:	85 e6       	ldi	r24, 0x65	; 101
     6b4:	90 e0       	ldi	r25, 0x00	; 0

				CurrStateTable++;
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     6b6:	b7 01       	movw	r22, r14
     6b8:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <fputc>

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     6bc:	d7 fc       	sbrc	r13, 7
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     6be:	05 c0       	rjmp	.+10     	; 0x6ca <vfprintf+0x410>
     6c0:	c1 14       	cp	r12, r1
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     6c2:	d1 04       	cpc	r13, r1
     6c4:	39 f4       	brne	.+14     	; 0x6d4 <vfprintf+0x41a>
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     6c6:	04 ff       	sbrs	r16, 4
     6c8:	05 c0       	rjmp	.+10     	; 0x6d4 <vfprintf+0x41a>
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     6ca:	d1 94       	neg	r13

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     6cc:	c1 94       	neg	r12
     6ce:	d1 08       	sbc	r13, r1
     6d0:	8d e2       	ldi	r24, 0x2D	; 45
     6d2:	01 c0       	rjmp	.+2      	; 0x6d6 <vfprintf+0x41c>
     6d4:	8b e2       	ldi	r24, 0x2B	; 43
     6d6:	b7 01       	movw	r22, r14
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <fputc>
     6de:	80 e3       	ldi	r24, 0x30	; 48
     6e0:	6a e0       	ldi	r22, 0x0A	; 10
     6e2:	c6 16       	cp	r12, r22
     6e4:	d1 04       	cpc	r13, r1
     6e6:	2c f0       	brlt	.+10     	; 0x6f2 <vfprintf+0x438>
     6e8:	8f 5f       	subi	r24, 0xFF	; 255
     6ea:	fa e0       	ldi	r31, 0x0A	; 10
     6ec:	cf 1a       	sub	r12, r31
     6ee:	d1 08       	sbc	r13, r1
     6f0:	f7 cf       	rjmp	.-18     	; 0x6e0 <vfprintf+0x426>
     6f2:	b7 01       	movw	r22, r14
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <fputc>
     6fa:	b7 01       	movw	r22, r14
     6fc:	c6 01       	movw	r24, r12
     6fe:	c0 96       	adiw	r24, 0x30	; 48
     700:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <fputc>
     704:	41 c1       	rjmp	.+642    	; 0x988 <vfprintf+0x6ce>
     706:	83 36       	cpi	r24, 0x63	; 99
     708:	31 f0       	breq	.+12     	; 0x716 <vfprintf+0x45c>
     70a:	83 37       	cpi	r24, 0x73	; 115
     70c:	79 f0       	breq	.+30     	; 0x72c <vfprintf+0x472>
     70e:	83 35       	cpi	r24, 0x53	; 83
     710:	09 f0       	breq	.+2      	; 0x714 <vfprintf+0x45a>
     712:	58 c0       	rjmp	.+176    	; 0x7c4 <vfprintf+0x50a>
     714:	21 c0       	rjmp	.+66     	; 0x758 <vfprintf+0x49e>
     716:	56 01       	movw	r10, r12
     718:	72 e0       	ldi	r23, 0x02	; 2
     71a:	a7 0e       	add	r10, r23
     71c:	b1 1c       	adc	r11, r1
     71e:	f6 01       	movw	r30, r12
     720:	80 81       	ld	r24, Z
     722:	89 83       	std	Y+1, r24	; 0x01
     724:	01 e0       	ldi	r16, 0x01	; 1
     726:	10 e0       	ldi	r17, 0x00	; 0
     728:	64 01       	movw	r12, r8
     72a:	14 c0       	rjmp	.+40     	; 0x754 <vfprintf+0x49a>
     72c:	56 01       	movw	r10, r12
     72e:	f2 e0       	ldi	r31, 0x02	; 2
     730:	af 0e       	add	r10, r31
     732:	b1 1c       	adc	r11, r1
     734:	f6 01       	movw	r30, r12
     736:	c0 80       	ld	r12, Z
     738:	d1 80       	ldd	r13, Z+1	; 0x01
     73a:	26 ff       	sbrs	r18, 6
     73c:	03 c0       	rjmp	.+6      	; 0x744 <vfprintf+0x48a>
     73e:	61 2f       	mov	r22, r17
     740:	70 e0       	ldi	r23, 0x00	; 0
     742:	02 c0       	rjmp	.+4      	; 0x748 <vfprintf+0x48e>
     744:	6f ef       	ldi	r22, 0xFF	; 255
     746:	7f ef       	ldi	r23, 0xFF	; 255
     748:	c6 01       	movw	r24, r12
     74a:	2b 8b       	std	Y+19, r18	; 0x13
     74c:	0e 94 32 16 	call	0x2c64	; 0x2c64 <strnlen>
     750:	8c 01       	movw	r16, r24
     752:	2b 89       	ldd	r18, Y+19	; 0x13
     754:	2f 77       	andi	r18, 0x7F	; 127
     756:	15 c0       	rjmp	.+42     	; 0x782 <vfprintf+0x4c8>
     758:	56 01       	movw	r10, r12
     75a:	f2 e0       	ldi	r31, 0x02	; 2
     75c:	af 0e       	add	r10, r31
     75e:	b1 1c       	adc	r11, r1
     760:	f6 01       	movw	r30, r12
     762:	c0 80       	ld	r12, Z
     764:	d1 80       	ldd	r13, Z+1	; 0x01
     766:	26 ff       	sbrs	r18, 6
     768:	03 c0       	rjmp	.+6      	; 0x770 <vfprintf+0x4b6>
     76a:	61 2f       	mov	r22, r17
     76c:	70 e0       	ldi	r23, 0x00	; 0
     76e:	02 c0       	rjmp	.+4      	; 0x774 <vfprintf+0x4ba>
     770:	6f ef       	ldi	r22, 0xFF	; 255
     772:	7f ef       	ldi	r23, 0xFF	; 255
     774:	c6 01       	movw	r24, r12
     776:	2b 8b       	std	Y+19, r18	; 0x13
     778:	0e 94 20 16 	call	0x2c40	; 0x2c40 <strnlen_P>
     77c:	8c 01       	movw	r16, r24
     77e:	2b 89       	ldd	r18, Y+19	; 0x13
     780:	20 68       	ori	r18, 0x80	; 128
     782:	72 2e       	mov	r7, r18
     784:	23 fd       	sbrc	r18, 3
     786:	1a c0       	rjmp	.+52     	; 0x7bc <vfprintf+0x502>
     788:	85 2d       	mov	r24, r5
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	08 17       	cp	r16, r24
     78e:	19 07       	cpc	r17, r25
     790:	a8 f4       	brcc	.+42     	; 0x7bc <vfprintf+0x502>
     792:	b7 01       	movw	r22, r14
     794:	80 e2       	ldi	r24, 0x20	; 32
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <fputc>
     79c:	5a 94       	dec	r5
     79e:	f4 cf       	rjmp	.-24     	; 0x788 <vfprintf+0x4ce>
     7a0:	f6 01       	movw	r30, r12
     7a2:	77 fc       	sbrc	r7, 7
     7a4:	85 91       	lpm	r24, Z+
     7a6:	77 fe       	sbrs	r7, 7
     7a8:	81 91       	ld	r24, Z+
     7aa:	6f 01       	movw	r12, r30
     7ac:	b7 01       	movw	r22, r14
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <fputc>
     7b4:	51 10       	cpse	r5, r1
     7b6:	5a 94       	dec	r5
     7b8:	01 50       	subi	r16, 0x01	; 1
     7ba:	11 09       	sbc	r17, r1
     7bc:	01 15       	cp	r16, r1
     7be:	11 05       	cpc	r17, r1
     7c0:	79 f7       	brne	.-34     	; 0x7a0 <vfprintf+0x4e6>
     7c2:	e2 c0       	rjmp	.+452    	; 0x988 <vfprintf+0x6ce>
     7c4:	84 36       	cpi	r24, 0x64	; 100
     7c6:	11 f0       	breq	.+4      	; 0x7cc <vfprintf+0x512>
     7c8:	89 36       	cpi	r24, 0x69	; 105
     7ca:	51 f5       	brne	.+84     	; 0x820 <vfprintf+0x566>
     7cc:	56 01       	movw	r10, r12
     7ce:	27 ff       	sbrs	r18, 7
     7d0:	09 c0       	rjmp	.+18     	; 0x7e4 <vfprintf+0x52a>
     7d2:	f4 e0       	ldi	r31, 0x04	; 4
     7d4:	af 0e       	add	r10, r31
     7d6:	b1 1c       	adc	r11, r1
     7d8:	f6 01       	movw	r30, r12
     7da:	60 81       	ld	r22, Z
     7dc:	71 81       	ldd	r23, Z+1	; 0x01
     7de:	82 81       	ldd	r24, Z+2	; 0x02
     7e0:	93 81       	ldd	r25, Z+3	; 0x03
     7e2:	0a c0       	rjmp	.+20     	; 0x7f8 <vfprintf+0x53e>
     7e4:	f2 e0       	ldi	r31, 0x02	; 2
     7e6:	af 0e       	add	r10, r31
     7e8:	b1 1c       	adc	r11, r1
     7ea:	f6 01       	movw	r30, r12
     7ec:	60 81       	ld	r22, Z
     7ee:	71 81       	ldd	r23, Z+1	; 0x01
     7f0:	88 27       	eor	r24, r24
     7f2:	77 fd       	sbrc	r23, 7
     7f4:	80 95       	com	r24
     7f6:	98 2f       	mov	r25, r24
     7f8:	02 2f       	mov	r16, r18
     7fa:	0f 76       	andi	r16, 0x6F	; 111
     7fc:	97 ff       	sbrs	r25, 7
     7fe:	08 c0       	rjmp	.+16     	; 0x810 <vfprintf+0x556>
     800:	90 95       	com	r25
     802:	80 95       	com	r24
     804:	70 95       	com	r23
     806:	61 95       	neg	r22
     808:	7f 4f       	sbci	r23, 0xFF	; 255
     80a:	8f 4f       	sbci	r24, 0xFF	; 255
     80c:	9f 4f       	sbci	r25, 0xFF	; 255
     80e:	00 68       	ori	r16, 0x80	; 128
     810:	2a e0       	ldi	r18, 0x0A	; 10
     812:	30 e0       	ldi	r19, 0x00	; 0
     814:	a4 01       	movw	r20, r8
     816:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <__ultoa_invert>
     81a:	c8 2e       	mov	r12, r24
     81c:	c8 18       	sub	r12, r8
     81e:	3e c0       	rjmp	.+124    	; 0x89c <vfprintf+0x5e2>
     820:	02 2f       	mov	r16, r18
     822:	85 37       	cpi	r24, 0x75	; 117
     824:	21 f4       	brne	.+8      	; 0x82e <vfprintf+0x574>
     826:	0f 7e       	andi	r16, 0xEF	; 239
     828:	2a e0       	ldi	r18, 0x0A	; 10
     82a:	30 e0       	ldi	r19, 0x00	; 0
     82c:	1d c0       	rjmp	.+58     	; 0x868 <vfprintf+0x5ae>
     82e:	09 7f       	andi	r16, 0xF9	; 249
     830:	8f 36       	cpi	r24, 0x6F	; 111
     832:	91 f0       	breq	.+36     	; 0x858 <vfprintf+0x59e>
     834:	18 f4       	brcc	.+6      	; 0x83c <vfprintf+0x582>
     836:	88 35       	cpi	r24, 0x58	; 88
     838:	59 f0       	breq	.+22     	; 0x850 <vfprintf+0x596>
     83a:	b0 c0       	rjmp	.+352    	; 0x99c <vfprintf+0x6e2>
     83c:	80 37       	cpi	r24, 0x70	; 112
     83e:	19 f0       	breq	.+6      	; 0x846 <vfprintf+0x58c>
     840:	88 37       	cpi	r24, 0x78	; 120
     842:	11 f0       	breq	.+4      	; 0x848 <vfprintf+0x58e>
     844:	ab c0       	rjmp	.+342    	; 0x99c <vfprintf+0x6e2>
     846:	00 61       	ori	r16, 0x10	; 16
     848:	04 ff       	sbrs	r16, 4
     84a:	09 c0       	rjmp	.+18     	; 0x85e <vfprintf+0x5a4>
     84c:	04 60       	ori	r16, 0x04	; 4
     84e:	07 c0       	rjmp	.+14     	; 0x85e <vfprintf+0x5a4>
     850:	24 ff       	sbrs	r18, 4
     852:	08 c0       	rjmp	.+16     	; 0x864 <vfprintf+0x5aa>
     854:	06 60       	ori	r16, 0x06	; 6
     856:	06 c0       	rjmp	.+12     	; 0x864 <vfprintf+0x5aa>
     858:	28 e0       	ldi	r18, 0x08	; 8
     85a:	30 e0       	ldi	r19, 0x00	; 0
     85c:	05 c0       	rjmp	.+10     	; 0x868 <vfprintf+0x5ae>
     85e:	20 e1       	ldi	r18, 0x10	; 16
     860:	30 e0       	ldi	r19, 0x00	; 0
     862:	02 c0       	rjmp	.+4      	; 0x868 <vfprintf+0x5ae>
     864:	20 e1       	ldi	r18, 0x10	; 16
     866:	32 e0       	ldi	r19, 0x02	; 2
     868:	56 01       	movw	r10, r12
     86a:	07 ff       	sbrs	r16, 7
     86c:	09 c0       	rjmp	.+18     	; 0x880 <vfprintf+0x5c6>
     86e:	f4 e0       	ldi	r31, 0x04	; 4
     870:	af 0e       	add	r10, r31
     872:	b1 1c       	adc	r11, r1
     874:	f6 01       	movw	r30, r12
     876:	60 81       	ld	r22, Z
     878:	71 81       	ldd	r23, Z+1	; 0x01
     87a:	82 81       	ldd	r24, Z+2	; 0x02
     87c:	93 81       	ldd	r25, Z+3	; 0x03
     87e:	08 c0       	rjmp	.+16     	; 0x890 <vfprintf+0x5d6>
     880:	f2 e0       	ldi	r31, 0x02	; 2
     882:	af 0e       	add	r10, r31
     884:	b1 1c       	adc	r11, r1
     886:	f6 01       	movw	r30, r12
     888:	60 81       	ld	r22, Z
     88a:	71 81       	ldd	r23, Z+1	; 0x01
     88c:	80 e0       	ldi	r24, 0x00	; 0
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	a4 01       	movw	r20, r8
     892:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <__ultoa_invert>
     896:	c8 2e       	mov	r12, r24
     898:	c8 18       	sub	r12, r8
     89a:	0f 77       	andi	r16, 0x7F	; 127
     89c:	06 ff       	sbrs	r16, 6
     89e:	0b c0       	rjmp	.+22     	; 0x8b6 <vfprintf+0x5fc>
     8a0:	20 2f       	mov	r18, r16
     8a2:	2e 7f       	andi	r18, 0xFE	; 254
     8a4:	c1 16       	cp	r12, r17
     8a6:	50 f4       	brcc	.+20     	; 0x8bc <vfprintf+0x602>
     8a8:	04 ff       	sbrs	r16, 4
     8aa:	0a c0       	rjmp	.+20     	; 0x8c0 <vfprintf+0x606>
     8ac:	02 fd       	sbrc	r16, 2
     8ae:	08 c0       	rjmp	.+16     	; 0x8c0 <vfprintf+0x606>
     8b0:	20 2f       	mov	r18, r16
     8b2:	2e 7e       	andi	r18, 0xEE	; 238
     8b4:	05 c0       	rjmp	.+10     	; 0x8c0 <vfprintf+0x606>
     8b6:	dc 2c       	mov	r13, r12
     8b8:	20 2f       	mov	r18, r16
     8ba:	03 c0       	rjmp	.+6      	; 0x8c2 <vfprintf+0x608>
     8bc:	dc 2c       	mov	r13, r12
     8be:	01 c0       	rjmp	.+2      	; 0x8c2 <vfprintf+0x608>
     8c0:	d1 2e       	mov	r13, r17
     8c2:	24 ff       	sbrs	r18, 4
     8c4:	0d c0       	rjmp	.+26     	; 0x8e0 <vfprintf+0x626>
     8c6:	fe 01       	movw	r30, r28
     8c8:	ec 0d       	add	r30, r12
     8ca:	f1 1d       	adc	r31, r1
     8cc:	80 81       	ld	r24, Z
     8ce:	80 33       	cpi	r24, 0x30	; 48
     8d0:	11 f4       	brne	.+4      	; 0x8d6 <vfprintf+0x61c>
     8d2:	29 7e       	andi	r18, 0xE9	; 233
     8d4:	09 c0       	rjmp	.+18     	; 0x8e8 <vfprintf+0x62e>
     8d6:	22 ff       	sbrs	r18, 2
     8d8:	06 c0       	rjmp	.+12     	; 0x8e6 <vfprintf+0x62c>
     8da:	d3 94       	inc	r13
     8dc:	d3 94       	inc	r13
     8de:	04 c0       	rjmp	.+8      	; 0x8e8 <vfprintf+0x62e>
     8e0:	82 2f       	mov	r24, r18
     8e2:	86 78       	andi	r24, 0x86	; 134
     8e4:	09 f0       	breq	.+2      	; 0x8e8 <vfprintf+0x62e>
     8e6:	d3 94       	inc	r13
     8e8:	23 fd       	sbrc	r18, 3
     8ea:	13 c0       	rjmp	.+38     	; 0x912 <vfprintf+0x658>
     8ec:	20 ff       	sbrs	r18, 0
     8ee:	06 c0       	rjmp	.+12     	; 0x8fc <vfprintf+0x642>
     8f0:	1c 2d       	mov	r17, r12
     8f2:	d5 14       	cp	r13, r5
     8f4:	18 f4       	brcc	.+6      	; 0x8fc <vfprintf+0x642>
     8f6:	15 0d       	add	r17, r5
     8f8:	1d 19       	sub	r17, r13
     8fa:	d5 2c       	mov	r13, r5
     8fc:	d5 14       	cp	r13, r5
     8fe:	68 f4       	brcc	.+26     	; 0x91a <vfprintf+0x660>
     900:	b7 01       	movw	r22, r14
     902:	80 e2       	ldi	r24, 0x20	; 32
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	2b 8b       	std	Y+19, r18	; 0x13
     908:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <fputc>
     90c:	d3 94       	inc	r13
     90e:	2b 89       	ldd	r18, Y+19	; 0x13
     910:	f5 cf       	rjmp	.-22     	; 0x8fc <vfprintf+0x642>
     912:	d5 14       	cp	r13, r5
     914:	10 f4       	brcc	.+4      	; 0x91a <vfprintf+0x660>
     916:	5d 18       	sub	r5, r13
     918:	01 c0       	rjmp	.+2      	; 0x91c <vfprintf+0x662>
     91a:	51 2c       	mov	r5, r1
     91c:	24 ff       	sbrs	r18, 4
     91e:	12 c0       	rjmp	.+36     	; 0x944 <vfprintf+0x68a>
     920:	b7 01       	movw	r22, r14
     922:	80 e3       	ldi	r24, 0x30	; 48
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	2b 8b       	std	Y+19, r18	; 0x13
     928:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <fputc>
     92c:	2b 89       	ldd	r18, Y+19	; 0x13
     92e:	22 ff       	sbrs	r18, 2
     930:	17 c0       	rjmp	.+46     	; 0x960 <vfprintf+0x6a6>
     932:	21 ff       	sbrs	r18, 1
     934:	03 c0       	rjmp	.+6      	; 0x93c <vfprintf+0x682>
     936:	88 e5       	ldi	r24, 0x58	; 88
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	02 c0       	rjmp	.+4      	; 0x940 <vfprintf+0x686>
     93c:	88 e7       	ldi	r24, 0x78	; 120
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	b7 01       	movw	r22, r14
     942:	0c c0       	rjmp	.+24     	; 0x95c <vfprintf+0x6a2>
     944:	82 2f       	mov	r24, r18
     946:	86 78       	andi	r24, 0x86	; 134
     948:	59 f0       	breq	.+22     	; 0x960 <vfprintf+0x6a6>
     94a:	21 fd       	sbrc	r18, 1
     94c:	02 c0       	rjmp	.+4      	; 0x952 <vfprintf+0x698>
     94e:	80 e2       	ldi	r24, 0x20	; 32
     950:	01 c0       	rjmp	.+2      	; 0x954 <vfprintf+0x69a>
     952:	8b e2       	ldi	r24, 0x2B	; 43
     954:	27 fd       	sbrc	r18, 7
     956:	8d e2       	ldi	r24, 0x2D	; 45
     958:	b7 01       	movw	r22, r14
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <fputc>
     960:	c1 16       	cp	r12, r17
     962:	38 f4       	brcc	.+14     	; 0x972 <vfprintf+0x6b8>
     964:	b7 01       	movw	r22, r14
     966:	80 e3       	ldi	r24, 0x30	; 48
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <fputc>
     96e:	11 50       	subi	r17, 0x01	; 1
     970:	f7 cf       	rjmp	.-18     	; 0x960 <vfprintf+0x6a6>
     972:	ca 94       	dec	r12
     974:	f4 01       	movw	r30, r8
     976:	ec 0d       	add	r30, r12
     978:	f1 1d       	adc	r31, r1
     97a:	80 81       	ld	r24, Z
     97c:	b7 01       	movw	r22, r14
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <fputc>
     984:	c1 10       	cpse	r12, r1
     986:	f5 cf       	rjmp	.-22     	; 0x972 <vfprintf+0x6b8>
     988:	55 20       	and	r5, r5
     98a:	09 f4       	brne	.+2      	; 0x98e <vfprintf+0x6d4>
     98c:	c2 cc       	rjmp	.-1660   	; 0x312 <vfprintf+0x58>
     98e:	b7 01       	movw	r22, r14
     990:	80 e2       	ldi	r24, 0x20	; 32
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <fputc>
     998:	5a 94       	dec	r5
     99a:	f6 cf       	rjmp	.-20     	; 0x988 <vfprintf+0x6ce>
     99c:	f7 01       	movw	r30, r14
     99e:	86 81       	ldd	r24, Z+6	; 0x06
     9a0:	97 81       	ldd	r25, Z+7	; 0x07
     9a2:	02 c0       	rjmp	.+4      	; 0x9a8 <vfprintf+0x6ee>
     9a4:	8f ef       	ldi	r24, 0xFF	; 255
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	63 96       	adiw	r28, 0x13	; 19
     9aa:	e2 e1       	ldi	r30, 0x12	; 18
     9ac:	0c 94 52 12 	jmp	0x24a4	; 0x24a4 <__epilogue_restores__>

000009b0 <SetupHardware>:
}

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void) {
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     9b0:	84 b7       	in	r24, 0x34	; 52
     9b2:	87 7f       	andi	r24, 0xF7	; 247
     9b4:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     9b6:	88 e1       	ldi	r24, 0x18	; 24
     9b8:	0f b6       	in	r0, 0x3f	; 63
     9ba:	f8 94       	cli
     9bc:	80 93 60 00 	sts	0x0060, r24
     9c0:	10 92 60 00 	sts	0x0060, r1
     9c4:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	80 e8       	ldi	r24, 0x80	; 128
     9ca:	0f b6       	in	r0, 0x3f	; 63
     9cc:	f8 94       	cli
     9ce:	80 93 61 00 	sts	0x0061, r24
     9d2:	90 93 61 00 	sts	0x0061, r25
     9d6:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	USB_Init();
     9d8:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <USB_Init>
    
    /* Initialize ADC */
    initADC();
     9dc:	9a c6       	rjmp	.+3380   	; 0x1712 <initADC>

000009de <EVENT_USB_Device_Connect>:
     9de:	08 95       	ret

000009e0 <EVENT_USB_Device_Disconnect>:
}

/** Event handler for the USB_Disconnect event. This indicates that the device is no longer connected to a host via
 *  the status LEDs and stops the USB management and CDC management tasks.
 */
void EVENT_USB_Device_Disconnect(void) {
     9e0:	08 95       	ret

000009e2 <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
     9e2:	42 e3       	ldi	r20, 0x32	; 50
     9e4:	61 ec       	ldi	r22, 0xC1	; 193
     9e6:	82 e0       	ldi	r24, 0x02	; 2
     9e8:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <Endpoint_ConfigureEndpoint_Prv>
     9ec:	42 e3       	ldi	r20, 0x32	; 50
     9ee:	61 e8       	ldi	r22, 0x81	; 129
     9f0:	83 e0       	ldi	r24, 0x03	; 3
     9f2:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <Endpoint_ConfigureEndpoint_Prv>
     9f6:	42 e3       	ldi	r20, 0x32	; 50
     9f8:	60 e8       	ldi	r22, 0x80	; 128
     9fa:	84 e0       	ldi	r24, 0x04	; 4
     9fc:	0c 94 9d 0d 	jmp	0x1b3a	; 0x1b3a <Endpoint_ConfigureEndpoint_Prv>

00000a00 <EVENT_USB_Device_ControlRequest>:
 */
void EVENT_USB_Device_ControlRequest(void) {
	uint8_t TMCRequestStatus = TMC_STATUS_SUCCESS;

	/* Process TMC specific control requests */
	switch (USB_ControlRequest.bRequest) {
     a00:	80 91 64 05 	lds	r24, 0x0564
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	fc 01       	movw	r30, r24
     a08:	31 97       	sbiw	r30, 0x01	; 1
     a0a:	e7 30       	cpi	r30, 0x07	; 7
     a0c:	f1 05       	cpc	r31, r1
     a0e:	08 f0       	brcs	.+2      	; 0xa12 <EVENT_USB_Device_ControlRequest+0x12>
     a10:	d7 c0       	rjmp	.+430    	; 0xbc0 <__stack+0xc1>
     a12:	ea 5a       	subi	r30, 0xAA	; 170
     a14:	ff 4f       	sbci	r31, 0xFF	; 255
     a16:	20 91 63 05 	lds	r18, 0x0563
     a1a:	0c 94 30 12 	jmp	0x2460	; 0x2460 <__tablejump2__>
		case Req_InitiateAbortBulkOut:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT)) {
     a1e:	22 3a       	cpi	r18, 0xA2	; 162
     a20:	09 f0       	breq	.+2      	; 0xa24 <EVENT_USB_Device_ControlRequest+0x24>
     a22:	ce c0       	rjmp	.+412    	; 0xbc0 <__stack+0xc1>
				/* Check that no split transaction is already in progress and the data transfer tag is valid */
				if (RequestInProgress != 0) TMCRequestStatus = TMC_STATUS_SPLIT_IN_PROGRESS;
     a24:	80 91 54 04 	lds	r24, 0x0454
     a28:	81 11       	cpse	r24, r1
     a2a:	10 c0       	rjmp	.+32     	; 0xa4c <EVENT_USB_Device_ControlRequest+0x4c>
				else if (USB_ControlRequest.wValue != CurrentTransferTag) TMCRequestStatus = TMC_STATUS_TRANSFER_NOT_IN_PROGRESS;
     a2c:	80 91 51 04 	lds	r24, 0x0451
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	20 91 65 05 	lds	r18, 0x0565
     a36:	30 91 66 05 	lds	r19, 0x0566
     a3a:	28 17       	cp	r18, r24
     a3c:	39 07       	cpc	r19, r25
     a3e:	41 f4       	brne	.+16     	; 0xa50 <EVENT_USB_Device_ControlRequest+0x50>
				else {
					/* Indicate that all in-progress/pending data OUT requests should be aborted */
					IsTMCBulkOUTReset = true;
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	80 93 52 04 	sts	0x0452, r24

					/* Save the split request for later checking when a new request is received */
					RequestInProgress = Req_InitiateAbortBulkOut;
     a46:	80 93 54 04 	sts	0x0454, r24
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <EVENT_USB_Device_ControlRequest+0x52>
	/* Process TMC specific control requests */
	switch (USB_ControlRequest.bRequest) {
		case Req_InitiateAbortBulkOut:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT)) {
				/* Check that no split transaction is already in progress and the data transfer tag is valid */
				if (RequestInProgress != 0) TMCRequestStatus = TMC_STATUS_SPLIT_IN_PROGRESS;
     a4c:	83 e8       	ldi	r24, 0x83	; 131
     a4e:	01 c0       	rjmp	.+2      	; 0xa52 <EVENT_USB_Device_ControlRequest+0x52>
				else if (USB_ControlRequest.wValue != CurrentTransferTag) TMCRequestStatus = TMC_STATUS_TRANSFER_NOT_IN_PROGRESS;
     a50:	81 e8       	ldi	r24, 0x81	; 129
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     a52:	90 91 e8 00 	lds	r25, 0x00E8
     a56:	97 7f       	andi	r25, 0xF7	; 247
     a58:	90 93 e8 00 	sts	0x00E8, r25
     a5c:	77 c0       	rjmp	.+238    	; 0xb4c <__stack+0x4d>
				Endpoint_ClearStatusStage();
			}

			break;
		case Req_CheckAbortBulkOutStatus:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT)) {
     a5e:	22 3a       	cpi	r18, 0xA2	; 162
     a60:	09 f0       	breq	.+2      	; 0xa64 <EVENT_USB_Device_ControlRequest+0x64>
     a62:	ae c0       	rjmp	.+348    	; 0xbc0 <__stack+0xc1>
				/* Check that an ABORT BULK OUT transaction has been requested and that the request has completed */
				if (RequestInProgress != Req_InitiateAbortBulkOut) TMCRequestStatus = TMC_STATUS_SPLIT_NOT_IN_PROGRESS;
     a64:	80 91 54 04 	lds	r24, 0x0454
     a68:	81 30       	cpi	r24, 0x01	; 1
     a6a:	c1 f5       	brne	.+112    	; 0xadc <EVENT_USB_Device_ControlRequest+0xdc>
				else if (IsTMCBulkOUTReset) TMCRequestStatus = TMC_STATUS_PENDING;
     a6c:	80 91 52 04 	lds	r24, 0x0452
     a70:	2f c0       	rjmp	.+94     	; 0xad0 <EVENT_USB_Device_ControlRequest+0xd0>
				Endpoint_ClearStatusStage();
			}

			break;
		case Req_InitiateAbortBulkIn:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT)) {
     a72:	22 3a       	cpi	r18, 0xA2	; 162
     a74:	09 f0       	breq	.+2      	; 0xa78 <EVENT_USB_Device_ControlRequest+0x78>
     a76:	a4 c0       	rjmp	.+328    	; 0xbc0 <__stack+0xc1>
				/* Check that no split transaction is already in progress and the data transfer tag is valid */
				if (RequestInProgress != 0) {
     a78:	80 91 54 04 	lds	r24, 0x0454
     a7c:	81 11       	cpse	r24, r1
     a7e:	12 c0       	rjmp	.+36     	; 0xaa4 <EVENT_USB_Device_ControlRequest+0xa4>
					TMCRequestStatus = TMC_STATUS_SPLIT_IN_PROGRESS;
				}
				else if (USB_ControlRequest.wValue != CurrentTransferTag) {
     a80:	80 91 51 04 	lds	r24, 0x0451
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	20 91 65 05 	lds	r18, 0x0565
     a8a:	30 91 66 05 	lds	r19, 0x0566
     a8e:	28 17       	cp	r18, r24
     a90:	39 07       	cpc	r19, r25
     a92:	51 f4       	brne	.+20     	; 0xaa8 <EVENT_USB_Device_ControlRequest+0xa8>
					TMCRequestStatus = TMC_STATUS_TRANSFER_NOT_IN_PROGRESS;
				}
				else {
					/* Indicate that all in-progress/pending data IN requests should be aborted */
					IsTMCBulkINReset = true;
     a94:	81 e0       	ldi	r24, 0x01	; 1
     a96:	80 93 53 04 	sts	0x0453, r24

					/* Save the split request for later checking when a new request is received */
					RequestInProgress = Req_InitiateAbortBulkIn;
     a9a:	83 e0       	ldi	r24, 0x03	; 3
     a9c:	80 93 54 04 	sts	0x0454, r24
/** Event handler for the USB_ControlRequest event. This is used to catch and process control requests sent to
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void) {
	uint8_t TMCRequestStatus = TMC_STATUS_SUCCESS;
     aa0:	81 e0       	ldi	r24, 0x01	; 1
     aa2:	03 c0       	rjmp	.+6      	; 0xaaa <EVENT_USB_Device_ControlRequest+0xaa>
			break;
		case Req_InitiateAbortBulkIn:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT)) {
				/* Check that no split transaction is already in progress and the data transfer tag is valid */
				if (RequestInProgress != 0) {
					TMCRequestStatus = TMC_STATUS_SPLIT_IN_PROGRESS;
     aa4:	83 e8       	ldi	r24, 0x83	; 131
     aa6:	01 c0       	rjmp	.+2      	; 0xaaa <EVENT_USB_Device_ControlRequest+0xaa>
				}
				else if (USB_ControlRequest.wValue != CurrentTransferTag) {
					TMCRequestStatus = TMC_STATUS_TRANSFER_NOT_IN_PROGRESS;
     aa8:	81 e8       	ldi	r24, 0x81	; 129
     aaa:	90 91 e8 00 	lds	r25, 0x00E8
     aae:	97 7f       	andi	r25, 0xF7	; 247
     ab0:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     ab4:	80 93 f1 00 	sts	0x00F1, r24

				Endpoint_ClearSETUP();

				/* Write the request response bytes */
				Endpoint_Write_8(TMCRequestStatus);
				Endpoint_Write_8(CurrentTransferTag);
     ab8:	80 91 51 04 	lds	r24, 0x0451
     abc:	47 c0       	rjmp	.+142    	; 0xb4c <__stack+0x4d>
				Endpoint_ClearStatusStage();
			}

			break;
		case Req_CheckAbortBulkInStatus:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT)) {
     abe:	22 3a       	cpi	r18, 0xA2	; 162
     ac0:	09 f0       	breq	.+2      	; 0xac4 <EVENT_USB_Device_ControlRequest+0xc4>
     ac2:	7e c0       	rjmp	.+252    	; 0xbc0 <__stack+0xc1>
				/* Check that an ABORT BULK IN transaction has been requested and that the request has completed */
				if (RequestInProgress != Req_InitiateAbortBulkIn) TMCRequestStatus = TMC_STATUS_SPLIT_NOT_IN_PROGRESS;
     ac4:	80 91 54 04 	lds	r24, 0x0454
     ac8:	83 30       	cpi	r24, 0x03	; 3
     aca:	41 f4       	brne	.+16     	; 0xadc <EVENT_USB_Device_ControlRequest+0xdc>
				else if (IsTMCBulkINReset) TMCRequestStatus = TMC_STATUS_PENDING;
     acc:	80 91 53 04 	lds	r24, 0x0453
     ad0:	81 11       	cpse	r24, r1
     ad2:	06 c0       	rjmp	.+12     	; 0xae0 <EVENT_USB_Device_ControlRequest+0xe0>
				else RequestInProgress = 0;
     ad4:	10 92 54 04 	sts	0x0454, r1
/** Event handler for the USB_ControlRequest event. This is used to catch and process control requests sent to
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void) {
	uint8_t TMCRequestStatus = TMC_STATUS_SUCCESS;
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	03 c0       	rjmp	.+6      	; 0xae2 <EVENT_USB_Device_ControlRequest+0xe2>

			break;
		case Req_CheckAbortBulkInStatus:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT)) {
				/* Check that an ABORT BULK IN transaction has been requested and that the request has completed */
				if (RequestInProgress != Req_InitiateAbortBulkIn) TMCRequestStatus = TMC_STATUS_SPLIT_NOT_IN_PROGRESS;
     adc:	82 e8       	ldi	r24, 0x82	; 130
     ade:	01 c0       	rjmp	.+2      	; 0xae2 <EVENT_USB_Device_ControlRequest+0xe2>
				else if (IsTMCBulkINReset) TMCRequestStatus = TMC_STATUS_PENDING;
     ae0:	82 e0       	ldi	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     ae2:	90 91 e8 00 	lds	r25, 0x00E8
     ae6:	97 7f       	andi	r25, 0xF7	; 247
     ae8:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     aec:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     af0:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
     af4:	10 92 f1 00 	sts	0x00F1, r1
				Endpoint_ClearSETUP();

				/* Write the request response bytes */
				Endpoint_Write_8(TMCRequestStatus);
				Endpoint_Write_16_LE(0);
				Endpoint_Write_32_LE(LastTransferLength);
     af8:	80 91 4f 04 	lds	r24, 0x044F
     afc:	90 91 50 04 	lds	r25, 0x0450
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
     b00:	80 93 f1 00 	sts	0x00F1, r24
     b04:	a0 e0       	ldi	r26, 0x00	; 0
     b06:	b0 e0       	ldi	r27, 0x00	; 0
				UEDATX = (Data >> 8);
     b08:	89 2f       	mov	r24, r25
     b0a:	9a 2f       	mov	r25, r26
     b0c:	ab 2f       	mov	r26, r27
     b0e:	bb 27       	eor	r27, r27
     b10:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 16);
     b14:	10 92 f1 00 	sts	0x00F1, r1
     b18:	38 c0       	rjmp	.+112    	; 0xb8a <__stack+0x8b>
				Endpoint_ClearStatusStage();
			}

			break;
		case Req_InitiateClear:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE)) {
     b1a:	21 3a       	cpi	r18, 0xA1	; 161
     b1c:	09 f0       	breq	.+2      	; 0xb20 <__stack+0x21>
     b1e:	50 c0       	rjmp	.+160    	; 0xbc0 <__stack+0xc1>
				/* Check that no split transaction is already in progress */
				if (RequestInProgress != 0) Endpoint_Write_8(TMC_STATUS_SPLIT_IN_PROGRESS);
     b20:	80 91 54 04 	lds	r24, 0x0454
     b24:	88 23       	and	r24, r24
     b26:	21 f0       	breq	.+8      	; 0xb30 <__stack+0x31>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     b28:	83 e8       	ldi	r24, 0x83	; 131
     b2a:	80 93 f1 00 	sts	0x00F1, r24
     b2e:	08 c0       	rjmp	.+16     	; 0xb40 <__stack+0x41>
				else {
					/* Indicate that all in-progress/pending data IN and OUT requests should be aborted */
					IsTMCBulkINReset  = true;
     b30:	81 e0       	ldi	r24, 0x01	; 1
     b32:	80 93 53 04 	sts	0x0453, r24
					IsTMCBulkOUTReset = true;
     b36:	80 93 52 04 	sts	0x0452, r24

					/* Save the split request for later checking when a new request is received */
					RequestInProgress = Req_InitiateClear;
     b3a:	85 e0       	ldi	r24, 0x05	; 5
     b3c:	80 93 54 04 	sts	0x0454, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     b40:	80 91 e8 00 	lds	r24, 0x00E8
     b44:	87 7f       	andi	r24, 0xF7	; 247
     b46:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     b4a:	81 e0       	ldi	r24, 0x01	; 1
     b4c:	80 93 f1 00 	sts	0x00F1, r24
     b50:	1e c0       	rjmp	.+60     	; 0xb8e <__stack+0x8f>
				Endpoint_ClearStatusStage();
			}

			break;
		case Req_CheckClearStatus:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE)) {
     b52:	21 3a       	cpi	r18, 0xA1	; 161
     b54:	a9 f5       	brne	.+106    	; 0xbc0 <__stack+0xc1>
				/* Check that a CLEAR transaction has been requested and that the request has completed */
				if (RequestInProgress != Req_InitiateClear) TMCRequestStatus = TMC_STATUS_SPLIT_NOT_IN_PROGRESS;
     b56:	80 91 54 04 	lds	r24, 0x0454
     b5a:	85 30       	cpi	r24, 0x05	; 5
     b5c:	61 f4       	brne	.+24     	; 0xb76 <__stack+0x77>
				else if (IsTMCBulkINReset || IsTMCBulkOUTReset) TMCRequestStatus = TMC_STATUS_PENDING;
     b5e:	80 91 53 04 	lds	r24, 0x0453
     b62:	81 11       	cpse	r24, r1
     b64:	0a c0       	rjmp	.+20     	; 0xb7a <__stack+0x7b>
     b66:	80 91 52 04 	lds	r24, 0x0452
     b6a:	81 11       	cpse	r24, r1
     b6c:	06 c0       	rjmp	.+12     	; 0xb7a <__stack+0x7b>
				else RequestInProgress = 0;
     b6e:	10 92 54 04 	sts	0x0454, r1
/** Event handler for the USB_ControlRequest event. This is used to catch and process control requests sent to
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void) {
	uint8_t TMCRequestStatus = TMC_STATUS_SUCCESS;
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	03 c0       	rjmp	.+6      	; 0xb7c <__stack+0x7d>

			break;
		case Req_CheckClearStatus:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE)) {
				/* Check that a CLEAR transaction has been requested and that the request has completed */
				if (RequestInProgress != Req_InitiateClear) TMCRequestStatus = TMC_STATUS_SPLIT_NOT_IN_PROGRESS;
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	01 c0       	rjmp	.+2      	; 0xb7c <__stack+0x7d>
				else if (IsTMCBulkINReset || IsTMCBulkOUTReset) TMCRequestStatus = TMC_STATUS_PENDING;
     b7a:	82 e0       	ldi	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     b7c:	90 91 e8 00 	lds	r25, 0x00E8
     b80:	97 7f       	andi	r25, 0xF7	; 247
     b82:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     b86:	80 93 f1 00 	sts	0x00F1, r24
     b8a:	10 92 f1 00 	sts	0x00F1, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     b8e:	80 91 e8 00 	lds	r24, 0x00E8
     b92:	8e 77       	andi	r24, 0x7E	; 126
     b94:	80 93 e8 00 	sts	0x00E8, r24
				/* Write the request response bytes */
				Endpoint_Write_8(TMCRequestStatus);
				Endpoint_Write_8(0);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     b98:	0c 94 d2 0d 	jmp	0x1ba4	; 0x1ba4 <Endpoint_ClearStatusStage>
			}

			break;
		case Req_GetCapabilities:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE)) {
     b9c:	21 3a       	cpi	r18, 0xA1	; 161
     b9e:	81 f4       	brne	.+32     	; 0xbc0 <__stack+0xc1>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     ba0:	80 91 e8 00 	lds	r24, 0x00E8
     ba4:	87 7f       	andi	r24, 0xF7	; 247
     ba6:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearSETUP();

				/* Write the device capabilities to the control endpoint */
				Endpoint_Write_Control_Stream_LE(&Capabilities, sizeof(TMC_Capabilities_t));
     baa:	68 e1       	ldi	r22, 0x18	; 24
     bac:	70 e0       	ldi	r23, 0x00	; 0
     bae:	80 e0       	ldi	r24, 0x00	; 0
     bb0:	91 e0       	ldi	r25, 0x01	; 1
     bb2:	0e 94 0f 10 	call	0x201e	; 0x201e <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     bb6:	80 91 e8 00 	lds	r24, 0x00E8
     bba:	8b 77       	andi	r24, 0x7B	; 123
     bbc:	80 93 e8 00 	sts	0x00E8, r24
     bc0:	08 95       	ret

00000bc2 <ProcessSentMessage>:

			break;
	}
}

void ProcessSentMessage(uint8_t* const Data, uint16_t Length) {
     bc2:	9f 92       	push	r9
     bc4:	af 92       	push	r10
     bc6:	bf 92       	push	r11
     bc8:	cf 92       	push	r12
     bca:	df 92       	push	r13
     bcc:	ef 92       	push	r14
     bce:	ff 92       	push	r15
     bd0:	0f 93       	push	r16
     bd2:	1f 93       	push	r17
     bd4:	cf 93       	push	r28
     bd6:	df 93       	push	r29
     bd8:	cd b7       	in	r28, 0x3d	; 61
     bda:	de b7       	in	r29, 0x3e	; 62
     bdc:	a1 97       	sbiw	r28, 0x21	; 33
     bde:	0f b6       	in	r0, 0x3f	; 63
     be0:	f8 94       	cli
     be2:	de bf       	out	0x3e, r29	; 62
     be4:	0f be       	out	0x3f, r0	; 63
     be6:	cd bf       	out	0x3d, r28	; 61
     be8:	6c 01       	movw	r12, r24
    uint8_t val, valid, ss[5], i, j, *cur;
    startS ssval;
    unsigned int value, temp;
    volatile float rate;
    cmd command = CMD_ERR;
    uint8_t *args[10] = {NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};
     bea:	ce 01       	movw	r24, r28
     bec:	01 96       	adiw	r24, 0x01	; 1
     bee:	7c 01       	movw	r14, r24
     bf0:	84 e1       	ldi	r24, 0x14	; 20
     bf2:	f7 01       	movw	r30, r14
     bf4:	11 92       	st	Z+, r1
     bf6:	8a 95       	dec	r24
     bf8:	e9 f7       	brne	.-6      	; 0xbf4 <ProcessSentMessage+0x32>
    
    //Find Command Arguements
    for(i = 0, j = 0; Data[i] != NULL && j < 10; i++) {
     bfa:	b1 2c       	mov	r11, r1
     bfc:	a1 2c       	mov	r10, r1
     bfe:	86 01       	movw	r16, r12
     c00:	0a 0d       	add	r16, r10
     c02:	11 1d       	adc	r17, r1
     c04:	f8 01       	movw	r30, r16
     c06:	80 81       	ld	r24, Z
     c08:	88 23       	and	r24, r24
     c0a:	c1 f0       	breq	.+48     	; 0xc3c <ProcessSentMessage+0x7a>
     c0c:	f9 e0       	ldi	r31, 0x09	; 9
     c0e:	fb 15       	cp	r31, r11
     c10:	a8 f0       	brcs	.+42     	; 0xc3c <ProcessSentMessage+0x7a>
        if(isWhiteSpace(Data[i])) {
     c12:	51 d4       	rcall	.+2210   	; 0x14b6 <isWhiteSpace>
     c14:	88 23       	and	r24, r24
     c16:	29 f0       	breq	.+10     	; 0xc22 <ProcessSentMessage+0x60>
     c18:	f8 01       	movw	r30, r16
            Data[i] = NULL;
     c1a:	10 82       	st	Z, r1
     c1c:	99 24       	eor	r9, r9
            val = 1;
     c1e:	93 94       	inc	r9
     c20:	0b c0       	rjmp	.+22     	; 0xc38 <ProcessSentMessage+0x76>
     c22:	99 20       	and	r9, r9
        }
        else if (val) {
     c24:	49 f0       	breq	.+18     	; 0xc38 <ProcessSentMessage+0x76>
     c26:	f7 01       	movw	r30, r14
            args[j++] = &(Data[i]);
     c28:	eb 0d       	add	r30, r11
     c2a:	f1 1d       	adc	r31, r1
     c2c:	eb 0d       	add	r30, r11
     c2e:	f1 1d       	adc	r31, r1
     c30:	11 83       	std	Z+1, r17	; 0x01
     c32:	00 83       	st	Z, r16
     c34:	b3 94       	inc	r11
     c36:	91 2c       	mov	r9, r1
            val = 0;
     c38:	a3 94       	inc	r10
    volatile float rate;
    cmd command = CMD_ERR;
    uint8_t *args[10] = {NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};
    
    //Find Command Arguements
    for(i = 0, j = 0; Data[i] != NULL && j < 10; i++) {
     c3a:	e1 cf       	rjmp	.-62     	; 0xbfe <ProcessSentMessage+0x3c>
     c3c:	89 81       	ldd	r24, Y+1	; 0x01
            args[j++] = &(Data[i]);
            val = 0;
        }
    }
    
    switch (command = findCommand(args[0])) {
     c3e:	9a 81       	ldd	r25, Y+2	; 0x02
     c40:	b3 d4       	rcall	.+2406   	; 0x15a8 <findCommand>
     c42:	d8 2e       	mov	r13, r24
     c44:	48 2f       	mov	r20, r24
     c46:	50 e0       	ldi	r21, 0x00	; 0
     c48:	fa 01       	movw	r30, r20
     c4a:	31 97       	sbiw	r30, 0x01	; 1
     c4c:	e7 30       	cpi	r30, 0x07	; 7
     c4e:	f1 05       	cpc	r31, r1
     c50:	08 f0       	brcs	.+2      	; 0xc54 <ProcessSentMessage+0x92>
     c52:	3b c1       	rjmp	.+630    	; 0xeca <ProcessSentMessage+0x308>
     c54:	e3 5a       	subi	r30, 0xA3	; 163
     c56:	ff 4f       	sbci	r31, 0xFF	; 255
     c58:	0c 94 30 12 	jmp	0x2460	; 0x2460 <__tablejump2__>
     c5c:	0b 81       	ldd	r16, Y+3	; 0x03
     c5e:	1c 81       	ldd	r17, Y+4	; 0x04
        case CMD_RREG:
            //Make sure it is a number
            if (!isNumeric(args[1],0)) {
     c60:	60 e0       	ldi	r22, 0x00	; 0
     c62:	c8 01       	movw	r24, r16
     c64:	33 d4       	rcall	.+2150   	; 0x14cc <isNumeric>
     c66:	88 23       	and	r24, r24
     c68:	09 f4       	brne	.+2      	; 0xc6c <ProcessSentMessage+0xaa>
     c6a:	2f c1       	rjmp	.+606    	; 0xeca <ProcessSentMessage+0x308>
     c6c:	be 01       	movw	r22, r28
     c6e:	60 5e       	subi	r22, 0xE0	; 224
     c70:	7f 4f       	sbci	r23, 0xFF	; 255
                command = CMD_ERR;
                break;
            }
            ss[0] = myatoi(args[1], &valid);
     c72:	c8 01       	movw	r24, r16
     c74:	4c d4       	rcall	.+2200   	; 0x150e <myatoi>
     c76:	8d 8b       	std	Y+21, r24	; 0x15
     c78:	8b 31       	cpi	r24, 0x1B	; 27
     c7a:	20 f0       	brcs	.+8      	; 0xc84 <ProcessSentMessage+0xc2>
     c7c:	98 a1       	ldd	r25, Y+32	; 0x20
     c7e:	99 23       	and	r25, r25
            
            if (ss[0] > 26 && valid == NUM_VALID) command = CMD_ERR;
     c80:	09 f4       	brne	.+2      	; 0xc84 <ProcessSentMessage+0xc2>
     c82:	23 c1       	rjmp	.+582    	; 0xeca <ProcessSentMessage+0x308>
     c84:	02 d5       	rcall	.+2564   	; 0x168a <readReg>
     c86:	80 93 50 03 	sts	0x0350, r24
     c8a:	10 92 51 03 	sts	0x0351, r1
            else {
                NextResponseBuffer[0] = readReg(ss[0]);
     c8e:	82 e0       	ldi	r24, 0x02	; 2
     c90:	80 93 4f 03 	sts	0x034F, r24
                NextResponseBuffer[1] = NULL;
     c94:	2b c1       	rjmp	.+598    	; 0xeec <ProcessSentMessage+0x32a>
     c96:	89 85       	ldd	r24, Y+9	; 0x09
                NextResponseLen = 2;
     c98:	9a 85       	ldd	r25, Y+10	; 0x0a
     c9a:	89 2b       	or	r24, r25
     c9c:	09 f0       	breq	.+2      	; 0xca0 <ProcessSentMessage+0xde>
     c9e:	15 c1       	rjmp	.+554    	; 0xeca <ProcessSentMessage+0x308>
            //args[1] is number of samples
            //args[2] is channels
            //args[3] is sampling rate
            
            //Preliminary error checking
            if (args[4] != NULL || !isNumeric(args[1],0) || !isNumeric(args[2],0) || !isNumeric(args[3],1)) {
     ca0:	cb 80       	ldd	r12, Y+3	; 0x03
     ca2:	dc 80       	ldd	r13, Y+4	; 0x04
     ca4:	60 e0       	ldi	r22, 0x00	; 0
     ca6:	c6 01       	movw	r24, r12
     ca8:	11 d4       	rcall	.+2082   	; 0x14cc <isNumeric>
     caa:	88 23       	and	r24, r24
     cac:	09 f4       	brne	.+2      	; 0xcb0 <ProcessSentMessage+0xee>
     cae:	0d c1       	rjmp	.+538    	; 0xeca <ProcessSentMessage+0x308>
     cb0:	ed 80       	ldd	r14, Y+5	; 0x05
     cb2:	fe 80       	ldd	r15, Y+6	; 0x06
     cb4:	60 e0       	ldi	r22, 0x00	; 0
     cb6:	c7 01       	movw	r24, r14
     cb8:	09 d4       	rcall	.+2066   	; 0x14cc <isNumeric>
     cba:	88 23       	and	r24, r24
     cbc:	09 f4       	brne	.+2      	; 0xcc0 <ProcessSentMessage+0xfe>
     cbe:	05 c1       	rjmp	.+522    	; 0xeca <ProcessSentMessage+0x308>
     cc0:	0f 81       	ldd	r16, Y+7	; 0x07
     cc2:	18 85       	ldd	r17, Y+8	; 0x08
     cc4:	61 e0       	ldi	r22, 0x01	; 1
     cc6:	c8 01       	movw	r24, r16
     cc8:	01 d4       	rcall	.+2050   	; 0x14cc <isNumeric>
     cca:	88 23       	and	r24, r24
     ccc:	09 f4       	brne	.+2      	; 0xcd0 <ProcessSentMessage+0x10e>
     cce:	fd c0       	rjmp	.+506    	; 0xeca <ProcessSentMessage+0x308>
     cd0:	be 01       	movw	r22, r28
     cd2:	60 5e       	subi	r22, 0xE0	; 224
     cd4:	7f 4f       	sbci	r23, 0xFF	; 255
     cd6:	c6 01       	movw	r24, r12
     cd8:	1a d4       	rcall	.+2100   	; 0x150e <myatoi>
     cda:	9f 8f       	std	Y+31, r25	; 0x1f
     cdc:	8e 8f       	std	Y+30, r24	; 0x1e
     cde:	be 01       	movw	r22, r28
                command = CMD_ERR;
                break;
            }
            
            value = myatoi(args[1],&valid);
     ce0:	60 5e       	subi	r22, 0xE0	; 224
     ce2:	7f 4f       	sbci	r23, 0xFF	; 255
     ce4:	c7 01       	movw	r24, r14
     ce6:	13 d4       	rcall	.+2086   	; 0x150e <myatoi>
     ce8:	8d 8b       	std	Y+21, r24	; 0x15
     cea:	c8 01       	movw	r24, r16
     cec:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <atof>
            ss[0] = myatoi(args[2],&valid);
     cf0:	6a 8f       	std	Y+26, r22	; 0x1a
     cf2:	7b 8f       	std	Y+27, r23	; 0x1b
     cf4:	8c 8f       	std	Y+28, r24	; 0x1c
     cf6:	9d 8f       	std	Y+29, r25	; 0x1d
     cf8:	8e 8d       	ldd	r24, Y+30	; 0x1e
     cfa:	9f 8d       	ldd	r25, Y+31	; 0x1f
     cfc:	89 2b       	or	r24, r25
            rate = atof(args[3]);
     cfe:	09 f4       	brne	.+2      	; 0xd02 <ProcessSentMessage+0x140>
     d00:	e4 c0       	rjmp	.+456    	; 0xeca <ProcessSentMessage+0x308>
     d02:	8d 89       	ldd	r24, Y+21	; 0x15
     d04:	88 23       	and	r24, r24
     d06:	09 f4       	brne	.+2      	; 0xd0a <ProcessSentMessage+0x148>
     d08:	e0 c0       	rjmp	.+448    	; 0xeca <ProcessSentMessage+0x308>
     d0a:	6a 8d       	ldd	r22, Y+26	; 0x1a
            
            //TODO: error checking for rate vs #channels to ensure max rate is not exceeded
            //Number error checking
            if (value == 0 || ss[0] == 0 || rate == 0) {
     d0c:	7b 8d       	ldd	r23, Y+27	; 0x1b
     d0e:	8c 8d       	ldd	r24, Y+28	; 0x1c
     d10:	9d 8d       	ldd	r25, Y+29	; 0x1d
     d12:	20 e0       	ldi	r18, 0x00	; 0
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	a9 01       	movw	r20, r18
     d18:	0e 94 6d 12 	call	0x24da	; 0x24da <__cmpsf2>
     d1c:	88 23       	and	r24, r24
     d1e:	09 f4       	brne	.+2      	; 0xd22 <ProcessSentMessage+0x160>
     d20:	d4 c0       	rjmp	.+424    	; 0xeca <ProcessSentMessage+0x308>
     d22:	6a 8d       	ldd	r22, Y+26	; 0x1a
     d24:	7b 8d       	ldd	r23, Y+27	; 0x1b
     d26:	8c 8d       	ldd	r24, Y+28	; 0x1c
     d28:	9d 8d       	ldd	r25, Y+29	; 0x1d
     d2a:	27 d3       	rcall	.+1614   	; 0x137a <determinePrescale>
     d2c:	8e 8b       	std	Y+22, r24	; 0x16
     d2e:	4a 8d       	ldd	r20, Y+26	; 0x1a
     d30:	5b 8d       	ldd	r21, Y+27	; 0x1b
     d32:	6c 8d       	ldd	r22, Y+28	; 0x1c
     d34:	7d 8d       	ldd	r23, Y+29	; 0x1d
                command = CMD_ERR;
                break;
            }
            
            ss[1] = determinePrescale(rate);
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	5a d3       	rcall	.+1716   	; 0x13ee <determineCounter>
     d3a:	18 2f       	mov	r17, r24
     d3c:	f9 2e       	mov	r15, r25
     d3e:	ed 88       	ldd	r14, Y+21	; 0x15
     d40:	4e 89       	ldd	r20, Y+22	; 0x16
     d42:	6a 8d       	ldd	r22, Y+26	; 0x1a
            temp = determineCounter(ss[1],rate);
     d44:	7b 8d       	ldd	r23, Y+27	; 0x1b
     d46:	8c 8d       	ldd	r24, Y+28	; 0x1c
     d48:	9d 8d       	ldd	r25, Y+29	; 0x1d
     d4a:	49 a3       	std	Y+33, r20	; 0x21
     d4c:	f1 d4       	rcall	.+2530   	; 0x1730 <determineADCRate>
     d4e:	01 2f       	mov	r16, r17
     d50:	2f 2d       	mov	r18, r15
     d52:	49 a1       	ldd	r20, Y+33	; 0x21
     d54:	68 2f       	mov	r22, r24
            
            if (add(value,determineADCRate(rate),ss[1], (uint8_t) (temp >> 8), (uint8_t) temp, ss[0])) {
     d56:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d58:	9f 8d       	ldd	r25, Y+31	; 0x1f
     d5a:	47 d2       	rcall	.+1166   	; 0x11ea <add>
     d5c:	88 23       	and	r24, r24
     d5e:	09 f4       	brne	.+2      	; 0xd62 <ProcessSentMessage+0x1a0>
     d60:	b4 c0       	rjmp	.+360    	; 0xeca <ProcessSentMessage+0x308>
     d62:	4a 8d       	ldd	r20, Y+26	; 0x1a
     d64:	5b 8d       	ldd	r21, Y+27	; 0x1b
     d66:	6c 8d       	ldd	r22, Y+28	; 0x1c
     d68:	7d 8d       	ldd	r23, Y+29	; 0x1d
     d6a:	ff 92       	push	r15
     d6c:	1f 93       	push	r17
     d6e:	8e 89       	ldd	r24, Y+22	; 0x16
     d70:	1f 92       	push	r1
     d72:	8f 93       	push	r24
     d74:	7f 93       	push	r23
     d76:	6f 93       	push	r22
     d78:	5f 93       	push	r21
     d7a:	4f 93       	push	r20
     d7c:	8d 89       	ldd	r24, Y+21	; 0x15
                sprintf(NextResponseBuffer, "Number of Samples: %u\t Channels: %u\t Sample Rate: %f\nPrescale Value: %u\tCounter Value: %u\n",value,ss[0],rate,ss[1],temp);
     d7e:	1f 92       	push	r1
     d80:	8f 93       	push	r24
     d82:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d84:	8f 93       	push	r24
     d86:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d88:	8f 93       	push	r24
     d8a:	87 e2       	ldi	r24, 0x27	; 39
     d8c:	92 e0       	ldi	r25, 0x02	; 2
     d8e:	9f 93       	push	r25
     d90:	8f 93       	push	r24
     d92:	00 e5       	ldi	r16, 0x50	; 80
     d94:	13 e0       	ldi	r17, 0x03	; 3
     d96:	1f 93       	push	r17
     d98:	0f 93       	push	r16
     d9a:	0e 94 6f 16 	call	0x2cde	; 0x2cde <sprintf>
     d9e:	f8 01       	movw	r30, r16
     da0:	01 90       	ld	r0, Z+
     da2:	00 20       	and	r0, r0
     da4:	e9 f7       	brne	.-6      	; 0xda0 <ProcessSentMessage+0x1de>
     da6:	31 97       	sbiw	r30, 0x01	; 1
     da8:	e0 55       	subi	r30, 0x50	; 80
     daa:	f3 40       	sbci	r31, 0x03	; 3
     dac:	ef 5f       	subi	r30, 0xFF	; 255
     dae:	e0 93 4f 03 	sts	0x034F, r30
     db2:	0f b6       	in	r0, 0x3f	; 63
     db4:	f8 94       	cli
     db6:	de bf       	out	0x3e, r29	; 62
     db8:	0f be       	out	0x3f, r0	; 63
                NextResponseLen = strlen(NextResponseBuffer)+1;
     dba:	cd bf       	out	0x3d, r28	; 61
     dbc:	97 c0       	rjmp	.+302    	; 0xeec <ProcessSentMessage+0x32a>
     dbe:	6b d2       	rcall	.+1238   	; 0x1296 <rm>
     dc0:	88 23       	and	r24, r24
     dc2:	89 f0       	breq	.+34     	; 0xde6 <ProcessSentMessage+0x224>
     dc4:	62 e8       	ldi	r22, 0x82	; 130
     dc6:	72 e0       	ldi	r23, 0x02	; 2
     dc8:	82 c0       	rjmp	.+260    	; 0xece <ProcessSentMessage+0x30c>
     dca:	98 d5       	rcall	.+2864   	; 0x18fc <stop>
     dcc:	81 30       	cpi	r24, 0x01	; 1
     dce:	81 f4       	brne	.+32     	; 0xdf0 <ProcessSentMessage+0x22e>
     dd0:	6b e9       	ldi	r22, 0x9B	; 155
     dd2:	72 e0       	ldi	r23, 0x02	; 2
     dd4:	7c c0       	rjmp	.+248    	; 0xece <ProcessSentMessage+0x30c>
     dd6:	35 d6       	rcall	.+3178   	; 0x1a42 <start>
     dd8:	81 11       	cpse	r24, r1
            }
            else command = CMD_ERR;
            break;
        case CMD_RM:
            if (rm()) strcpy((char*)NextResponseBuffer,(char*)"REMOVED\n");
     dda:	03 c0       	rjmp	.+6      	; 0xde2 <ProcessSentMessage+0x220>
     ddc:	6e ea       	ldi	r22, 0xAE	; 174
     dde:	72 e0       	ldi	r23, 0x02	; 2
     de0:	76 c0       	rjmp	.+236    	; 0xece <ProcessSentMessage+0x30c>
     de2:	81 30       	cpi	r24, 0x01	; 1
     de4:	19 f4       	brne	.+6      	; 0xdec <ProcessSentMessage+0x22a>
     de6:	6b e8       	ldi	r22, 0x8B	; 139
            else strcpy((char*)NextResponseBuffer,(char*)"NO SAMPLE SETS\n");
            
            NextResponseLen = strlen((char*) NextResponseBuffer)+1;
            break;
        case CMD_STOP:
            if (stop() == STOP) strcpy((char*)NextResponseBuffer,(char*)"STOPPED\n");
     de8:	72 e0       	ldi	r23, 0x02	; 2
     dea:	71 c0       	rjmp	.+226    	; 0xece <ProcessSentMessage+0x30c>
     dec:	82 30       	cpi	r24, 0x02	; 2
     dee:	19 f4       	brne	.+6      	; 0xdf6 <ProcessSentMessage+0x234>
     df0:	64 ea       	ldi	r22, 0xA4	; 164
     df2:	72 e0       	ldi	r23, 0x02	; 2
     df4:	6c c0       	rjmp	.+216    	; 0xece <ProcessSentMessage+0x30c>
            else strcpy((char*)NextResponseBuffer,(char*)"STOPPING\n");
            
            NextResponseLen = strlen((char*) NextResponseBuffer)+1;
            break;
        case CMD_START:
            if ((ssval = start()) == START) strcpy((char*)NextResponseBuffer,(char*)"STARTED\n");
     df6:	67 eb       	ldi	r22, 0xB7	; 183
     df8:	72 e0       	ldi	r23, 0x02	; 2
     dfa:	69 c0       	rjmp	.+210    	; 0xece <ProcessSentMessage+0x30c>
     dfc:	be 01       	movw	r22, r28
     dfe:	60 5e       	subi	r22, 0xE0	; 224
     e00:	7f 4f       	sbci	r23, 0xFF	; 255
     e02:	8b 81       	ldd	r24, Y+3	; 0x03
            else if (ssval == STOP) strcpy((char*)NextResponseBuffer,(char*)"NO SAMPLE SETS\n");
     e04:	9c 81       	ldd	r25, Y+4	; 0x04
     e06:	83 d3       	rcall	.+1798   	; 0x150e <myatoi>
     e08:	8d 8b       	std	Y+21, r24	; 0x15
     e0a:	88 a1       	ldd	r24, Y+32	; 0x20
     e0c:	81 11       	cpse	r24, r1
            else if (ssval == YIELD) strcpy((char*)NextResponseBuffer,(char*)"STOPPING\n");
     e0e:	4a c0       	rjmp	.+148    	; 0xea4 <ProcessSentMessage+0x2e2>
     e10:	fe 01       	movw	r30, r28
     e12:	79 96       	adiw	r30, 0x19	; 25
     e14:	7f 01       	movw	r14, r30
     e16:	8e 01       	movw	r16, r28
            else strcpy((char*)NextResponseBuffer,(char*)"ALREADY GOING\n");
     e18:	08 5e       	subi	r16, 0xE8	; 232
     e1a:	1f 4f       	sbci	r17, 0xFF	; 255
     e1c:	9e 01       	movw	r18, r28
            
            NextResponseLen = strlen((char*) NextResponseBuffer)+1;
            break;
        case CMD_QRY:
            ss[0] = (uint8_t) myatoi(args[1], &valid);
     e1e:	29 5e       	subi	r18, 0xE9	; 233
     e20:	3f 4f       	sbci	r19, 0xFF	; 255
     e22:	ae 01       	movw	r20, r28
     e24:	4a 5e       	subi	r20, 0xEA	; 234
     e26:	5f 4f       	sbci	r21, 0xFF	; 255
     e28:	be 01       	movw	r22, r28
     e2a:	6b 5e       	subi	r22, 0xEB	; 235
     e2c:	7f 4f       	sbci	r23, 0xFF	; 255
            if (valid != NUM_VALID) {
     e2e:	ce 01       	movw	r24, r28
     e30:	4e 96       	adiw	r24, 0x1e	; 30
     e32:	6d d2       	rcall	.+1242   	; 0x130e <qryDSet>
                command = CMD_ERR;
                NextResponseLen = 4;
            }
            else if (qryDSet(&value, &(ss[0]), &(ss[1]), &(ss[2]), &(ss[3]), &(ss[4])) != NULL) {
     e34:	89 2b       	or	r24, r25
     e36:	31 f1       	breq	.+76     	; 0xe84 <ProcessSentMessage+0x2c2>
     e38:	89 8d       	ldd	r24, Y+25	; 0x19
     e3a:	1f 92       	push	r1
     e3c:	8f 93       	push	r24
     e3e:	2f 89       	ldd	r18, Y+23	; 0x17
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	32 2f       	mov	r19, r18
     e44:	22 27       	eor	r18, r18
     e46:	88 8d       	ldd	r24, Y+24	; 0x18
     e48:	28 0f       	add	r18, r24
     e4a:	31 1d       	adc	r19, r1
     e4c:	3f 93       	push	r19
     e4e:	2f 93       	push	r18
     e50:	8e 89       	ldd	r24, Y+22	; 0x16
     e52:	1f 92       	push	r1
     e54:	8f 93       	push	r24
     e56:	8d 89       	ldd	r24, Y+21	; 0x15
     e58:	1f 92       	push	r1
     e5a:	8f 93       	push	r24
     e5c:	8f 8d       	ldd	r24, Y+31	; 0x1f
                temp = (unsigned int) ((ss[2] << 8) + ss[3]);
                sprintf(NextResponseBuffer, "Number of Samples: %u\tADC Rate: %u\tPrescale: %u\tCompare Value: %u\t Channels: %u\n", value, ss[0], ss[1], temp, ss[4]);
     e5e:	8f 93       	push	r24
     e60:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e62:	8f 93       	push	r24
            if (valid != NUM_VALID) {
                command = CMD_ERR;
                NextResponseLen = 4;
            }
            else if (qryDSet(&value, &(ss[0]), &(ss[1]), &(ss[2]), &(ss[3]), &(ss[4])) != NULL) {
                temp = (unsigned int) ((ss[2] << 8) + ss[3]);
     e64:	86 ec       	ldi	r24, 0xC6	; 198
     e66:	92 e0       	ldi	r25, 0x02	; 2
     e68:	9f 93       	push	r25
     e6a:	8f 93       	push	r24
     e6c:	80 e5       	ldi	r24, 0x50	; 80
     e6e:	93 e0       	ldi	r25, 0x03	; 3
     e70:	9f 93       	push	r25
                sprintf(NextResponseBuffer, "Number of Samples: %u\tADC Rate: %u\tPrescale: %u\tCompare Value: %u\t Channels: %u\n", value, ss[0], ss[1], temp, ss[4]);
     e72:	8f 93       	push	r24
     e74:	0e 94 6f 16 	call	0x2cde	; 0x2cde <sprintf>
     e78:	0f b6       	in	r0, 0x3f	; 63
     e7a:	f8 94       	cli
     e7c:	de bf       	out	0x3e, r29	; 62
     e7e:	0f be       	out	0x3f, r0	; 63
     e80:	cd bf       	out	0x3d, r28	; 61
     e82:	11 c0       	rjmp	.+34     	; 0xea6 <ProcessSentMessage+0x2e4>
     e84:	80 91 55 04 	lds	r24, 0x0455
     e88:	90 91 56 04 	lds	r25, 0x0456
     e8c:	89 2b       	or	r24, r25
     e8e:	19 f4       	brne	.+6      	; 0xe96 <ProcessSentMessage+0x2d4>
     e90:	6b e8       	ldi	r22, 0x8B	; 139
     e92:	72 e0       	ldi	r23, 0x02	; 2
     e94:	02 c0       	rjmp	.+4      	; 0xe9a <ProcessSentMessage+0x2d8>
     e96:	67 e1       	ldi	r22, 0x17	; 23
     e98:	73 e0       	ldi	r23, 0x03	; 3
     e9a:	80 e5       	ldi	r24, 0x50	; 80
     e9c:	93 e0       	ldi	r25, 0x03	; 3
     e9e:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <strcpy>
     ea2:	01 c0       	rjmp	.+2      	; 0xea6 <ProcessSentMessage+0x2e4>
     ea4:	d1 2c       	mov	r13, r1
     ea6:	e0 e5       	ldi	r30, 0x50	; 80
     ea8:	f3 e0       	ldi	r31, 0x03	; 3
            }
            else if (queue == NULL) strcpy((char*)NextResponseBuffer,(char*)"NO SAMPLE SETS\n");
     eaa:	01 90       	ld	r0, Z+
     eac:	00 20       	and	r0, r0
     eae:	e9 f7       	brne	.-6      	; 0xeaa <ProcessSentMessage+0x2e8>
     eb0:	31 97       	sbiw	r30, 0x01	; 1
     eb2:	e0 55       	subi	r30, 0x50	; 80
     eb4:	f3 40       	sbci	r31, 0x03	; 3
     eb6:	ef 5f       	subi	r30, 0xFF	; 255
     eb8:	e0 93 4f 03 	sts	0x034F, r30
            else strcpy((char*)NextResponseBuffer,(char*)"DOES NOT EXIST\n");
     ebc:	d1 10       	cpse	r13, r1
     ebe:	16 c0       	rjmp	.+44     	; 0xeec <ProcessSentMessage+0x32a>
     ec0:	04 c0       	rjmp	.+8      	; 0xeca <ProcessSentMessage+0x308>
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	80 93 4e 03 	sts	0x034E, r24
     ec8:	11 c0       	rjmp	.+34     	; 0xeec <ProcessSentMessage+0x32a>
            NextResponseLen = strlen((char*) NextResponseBuffer)+1;
            break;
        case CMD_QRY:
            ss[0] = (uint8_t) myatoi(args[1], &valid);
            if (valid != NUM_VALID) {
                command = CMD_ERR;
     eca:	67 e2       	ldi	r22, 0x27	; 39
                sprintf(NextResponseBuffer, "Number of Samples: %u\tADC Rate: %u\tPrescale: %u\tCompare Value: %u\t Channels: %u\n", value, ss[0], ss[1], temp, ss[4]);
            }
            else if (queue == NULL) strcpy((char*)NextResponseBuffer,(char*)"NO SAMPLE SETS\n");
            else strcpy((char*)NextResponseBuffer,(char*)"DOES NOT EXIST\n");
            
            NextResponseLen = strlen((char*) NextResponseBuffer)+1;
     ecc:	73 e0       	ldi	r23, 0x03	; 3
     ece:	80 e5       	ldi	r24, 0x50	; 80
     ed0:	93 e0       	ldi	r25, 0x03	; 3
     ed2:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <strcpy>
     ed6:	e0 e5       	ldi	r30, 0x50	; 80
     ed8:	f3 e0       	ldi	r31, 0x03	; 3
     eda:	01 90       	ld	r0, Z+
     edc:	00 20       	and	r0, r0
     ede:	e9 f7       	brne	.-6      	; 0xeda <ProcessSentMessage+0x318>
     ee0:	31 97       	sbiw	r30, 0x01	; 1
            break;
        default:
            command = CMD_ERR;
            break;
    }
    if (command == CMD_ERR) {
     ee2:	e0 55       	subi	r30, 0x50	; 80
     ee4:	f3 40       	sbci	r31, 0x03	; 3
     ee6:	ef 5f       	subi	r30, 0xFF	; 255
            
            NextResponseLen = strlen((char*) NextResponseBuffer)+1;
            break;
        case CMD_READ:
            //TODO: switch buffers
            readCMD = 1;
     ee8:	e0 93 4f 03 	sts	0x034F, r30
     eec:	a1 96       	adiw	r28, 0x21	; 33
            break;
     eee:	0f b6       	in	r0, 0x3f	; 63
            command = CMD_ERR;
            break;
    }
    if (command == CMD_ERR) {
        //strcpy((char*)NextResponseBuffer, (char*) Data);
        strcpy((char*)NextResponseBuffer,(char*)"ERROR");
     ef0:	f8 94       	cli
     ef2:	de bf       	out	0x3e, r29	; 62
     ef4:	0f be       	out	0x3f, r0	; 63
     ef6:	cd bf       	out	0x3d, r28	; 61
     ef8:	df 91       	pop	r29
     efa:	cf 91       	pop	r28
        NextResponseLen = strlen((char*) NextResponseBuffer)+1;
     efc:	1f 91       	pop	r17
     efe:	0f 91       	pop	r16
     f00:	ff 90       	pop	r15
     f02:	ef 90       	pop	r14
     f04:	df 90       	pop	r13
     f06:	cf 90       	pop	r12
     f08:	bf 90       	pop	r11
     f0a:	af 90       	pop	r10
     f0c:	9f 90       	pop	r9
     f0e:	08 95       	ret

00000f10 <GetNextMessage>:
     f10:	48 2f       	mov	r20, r24
    }
}
     f12:	80 91 4e 03 	lds	r24, 0x034E
     f16:	88 23       	and	r24, r24
     f18:	89 f0       	breq	.+34     	; 0xf3c <GetNextMessage+0x2c>
     f1a:	80 91 5a 04 	lds	r24, 0x045A
     f1e:	2d e5       	ldi	r18, 0x5D	; 93
     f20:	34 e0       	ldi	r19, 0x04	; 4
     f22:	e4 2f       	mov	r30, r20
     f24:	f9 2f       	mov	r31, r25
     f26:	d9 01       	movw	r26, r18
     f28:	9a 2f       	mov	r25, r26
     f2a:	92 1b       	sub	r25, r18
     f2c:	98 17       	cp	r25, r24
     f2e:	18 f4       	brcc	.+6      	; 0xf36 <GetNextMessage+0x26>
     f30:	9d 91       	ld	r25, X+
     f32:	91 93       	st	Z+, r25
     f34:	f9 cf       	rjmp	.-14     	; 0xf28 <GetNextMessage+0x18>
    uint8_t DataLen,i;

    if (readCMD) {
        DataLen = buf1_end;
        for (i = 0; i < DataLen; i++) Data[i] = buf1[i];
        buf1_end = 0;
     f36:	10 92 5a 04 	sts	0x045A, r1
     f3a:	0e c0       	rjmp	.+28     	; 0xf58 <GetNextMessage+0x48>
    }
    else {
        DataLen = NextResponseLen;
     f3c:	80 91 4f 03 	lds	r24, 0x034F
     f40:	20 e5       	ldi	r18, 0x50	; 80
     f42:	33 e0       	ldi	r19, 0x03	; 3
     f44:	e4 2f       	mov	r30, r20
     f46:	f9 2f       	mov	r31, r25
        for (i = 0; i < DataLen; i++) Data[i] = NextResponseBuffer[i];
     f48:	d9 01       	movw	r26, r18
     f4a:	9a 2f       	mov	r25, r26
     f4c:	92 1b       	sub	r25, r18
     f4e:	98 17       	cp	r25, r24
     f50:	18 f4       	brcc	.+6      	; 0xf58 <GetNextMessage+0x48>
     f52:	9d 91       	ld	r25, X+
     f54:	91 93       	st	Z+, r25
     f56:	f9 cf       	rjmp	.-14     	; 0xf4a <GetNextMessage+0x3a>
    }
    readCMD = 0;
     f58:	10 92 4e 03 	sts	0x034E, r1

	return DataLen;
}
     f5c:	08 95       	ret

00000f5e <ReadTMCHeader>:
 *
 *  \param[out] MessageHeader  Pointer to a location where the read header (if any) should be stored
 *
 *  \return Boolean true if a header was read, false otherwise
 */
bool ReadTMCHeader(TMC_MessageHeader_t* const MessageHeader) {
     f5e:	0f 93       	push	r16
     f60:	1f 93       	push	r17
     f62:	cf 93       	push	r28
     f64:	df 93       	push	r29
     f66:	00 d0       	rcall	.+0      	; 0xf68 <ReadTMCHeader+0xa>
     f68:	cd b7       	in	r28, 0x3d	; 61
     f6a:	de b7       	in	r29, 0x3e	; 62
     f6c:	8c 01       	movw	r16, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f6e:	84 e0       	ldi	r24, 0x04	; 4
     f70:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     f74:	80 91 e8 00 	lds	r24, 0x00E8

	/* Select the Data Out endpoint */
	Endpoint_SelectEndpoint(TMC_OUT_EPADDR);

	/* Abort if no command has been sent from the host */
	if (!(Endpoint_IsOUTReceived())) return false;
     f78:	82 ff       	sbrs	r24, 2
     f7a:	1e c0       	rjmp	.+60     	; 0xfb8 <ReadTMCHeader+0x5a>

	/* Read in the header of the command from the host */
	BytesTransferred = 0;
     f7c:	1a 82       	std	Y+2, r1	; 0x02
     f7e:	19 82       	std	Y+1, r1	; 0x01
	while ((ErrorCode = Endpoint_Read_Stream_LE(MessageHeader, sizeof(TMC_MessageHeader_t), &BytesTransferred)) ==
     f80:	ae 01       	movw	r20, r28
     f82:	4f 5f       	subi	r20, 0xFF	; 255
     f84:	5f 4f       	sbci	r21, 0xFF	; 255
     f86:	6c e0       	ldi	r22, 0x0C	; 12
     f88:	70 e0       	ldi	r23, 0x00	; 0
     f8a:	c8 01       	movw	r24, r16
     f8c:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <Endpoint_Read_Stream_LE>
     f90:	90 91 52 04 	lds	r25, 0x0452
     f94:	85 30       	cpi	r24, 0x05	; 5
     f96:	11 f4       	brne	.+4      	; 0xf9c <ReadTMCHeader+0x3e>
	       ENDPOINT_RWSTREAM_IncompleteTransfer) {
		if (IsTMCBulkOUTReset) break;
     f98:	99 23       	and	r25, r25
     f9a:	91 f3       	breq	.-28     	; 0xf80 <ReadTMCHeader+0x22>
	}

	/* Store the new command tag value for later use */
	CurrentTransferTag = MessageHeader->Tag;
     f9c:	f8 01       	movw	r30, r16
     f9e:	21 81       	ldd	r18, Z+1	; 0x01
     fa0:	20 93 51 04 	sts	0x0451, r18

	/* Indicate if the command has been aborted or not */
	return (!(IsTMCBulkOUTReset) && (ErrorCode == ENDPOINT_RWSTREAM_NoError));
     fa4:	91 11       	cpse	r25, r1
     fa6:	05 c0       	rjmp	.+10     	; 0xfb2 <ReadTMCHeader+0x54>
     fa8:	91 e0       	ldi	r25, 0x01	; 1
     faa:	81 11       	cpse	r24, r1
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	89 2f       	mov	r24, r25
     fb0:	01 c0       	rjmp	.+2      	; 0xfb4 <ReadTMCHeader+0x56>
     fb2:	80 e0       	ldi	r24, 0x00	; 0
     fb4:	81 70       	andi	r24, 0x01	; 1
     fb6:	01 c0       	rjmp	.+2      	; 0xfba <ReadTMCHeader+0x5c>

	/* Select the Data Out endpoint */
	Endpoint_SelectEndpoint(TMC_OUT_EPADDR);

	/* Abort if no command has been sent from the host */
	if (!(Endpoint_IsOUTReceived())) return false;
     fb8:	80 e0       	ldi	r24, 0x00	; 0
	/* Store the new command tag value for later use */
	CurrentTransferTag = MessageHeader->Tag;

	/* Indicate if the command has been aborted or not */
	return (!(IsTMCBulkOUTReset) && (ErrorCode == ENDPOINT_RWSTREAM_NoError));
}
     fba:	0f 90       	pop	r0
     fbc:	0f 90       	pop	r0
     fbe:	df 91       	pop	r29
     fc0:	cf 91       	pop	r28
     fc2:	1f 91       	pop	r17
     fc4:	0f 91       	pop	r16
     fc6:	08 95       	ret

00000fc8 <WriteTMCHeader>:

bool WriteTMCHeader(TMC_MessageHeader_t* const MessageHeader) {
     fc8:	0f 93       	push	r16
     fca:	1f 93       	push	r17
     fcc:	cf 93       	push	r28
     fce:	df 93       	push	r29
     fd0:	00 d0       	rcall	.+0      	; 0xfd2 <WriteTMCHeader+0xa>
     fd2:	cd b7       	in	r28, 0x3d	; 61
     fd4:	de b7       	in	r29, 0x3e	; 62
     fd6:	8c 01       	movw	r16, r24
	uint16_t BytesTransferred;
	uint8_t  ErrorCode;

	/* Set the message tag of the command header */
	MessageHeader->Tag        =  CurrentTransferTag;
     fd8:	80 91 51 04 	lds	r24, 0x0451
     fdc:	f8 01       	movw	r30, r16
     fde:	81 83       	std	Z+1, r24	; 0x01
	MessageHeader->InverseTag = ~CurrentTransferTag;
     fe0:	80 95       	com	r24
     fe2:	82 83       	std	Z+2, r24	; 0x02
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     fe4:	83 e0       	ldi	r24, 0x03	; 3
     fe6:	80 93 e9 00 	sts	0x00E9, r24

	/* Select the Data In endpoint */
	Endpoint_SelectEndpoint(TMC_IN_EPADDR);

	/* Send the command header to the host */
	BytesTransferred = 0;
     fea:	1a 82       	std	Y+2, r1	; 0x02
     fec:	19 82       	std	Y+1, r1	; 0x01
	while ((ErrorCode = Endpoint_Write_Stream_LE(MessageHeader, sizeof(TMC_MessageHeader_t), &BytesTransferred)) ==
     fee:	ae 01       	movw	r20, r28
     ff0:	4f 5f       	subi	r20, 0xFF	; 255
     ff2:	5f 4f       	sbci	r21, 0xFF	; 255
     ff4:	6c e0       	ldi	r22, 0x0C	; 12
     ff6:	70 e0       	ldi	r23, 0x00	; 0
     ff8:	c8 01       	movw	r24, r16
     ffa:	83 d7       	rcall	.+3846   	; 0x1f02 <Endpoint_Write_Stream_LE>
     ffc:	90 91 53 04 	lds	r25, 0x0453
    1000:	85 30       	cpi	r24, 0x05	; 5
    1002:	11 f4       	brne	.+4      	; 0x1008 <WriteTMCHeader+0x40>
    1004:	99 23       	and	r25, r25
	       ENDPOINT_RWSTREAM_IncompleteTransfer) {
		if (IsTMCBulkINReset) break;
    1006:	99 f3       	breq	.-26     	; 0xfee <WriteTMCHeader+0x26>
    1008:	91 11       	cpse	r25, r1
	}

	/* Indicate if the command has been aborted or not */
	return (!(IsTMCBulkINReset) && (ErrorCode == ENDPOINT_RWSTREAM_NoError));
    100a:	05 c0       	rjmp	.+10     	; 0x1016 <WriteTMCHeader+0x4e>
    100c:	91 e0       	ldi	r25, 0x01	; 1
    100e:	81 11       	cpse	r24, r1
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	89 2f       	mov	r24, r25
    1014:	01 c0       	rjmp	.+2      	; 0x1018 <WriteTMCHeader+0x50>
    1016:	80 e0       	ldi	r24, 0x00	; 0
    1018:	81 70       	andi	r24, 0x01	; 1
}
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	df 91       	pop	r29
    1020:	cf 91       	pop	r28
    1022:	1f 91       	pop	r17
    1024:	0f 91       	pop	r16
    1026:	08 95       	ret

00001028 <TMC_Task>:
    1028:	cf 93       	push	r28

	return DataLen;
}

/** Function to manage TMC data transmission and reception to and from the host. */
void TMC_Task(void) {
    102a:	df 93       	push	r29
    102c:	cd b7       	in	r28, 0x3d	; 61
    102e:	de b7       	in	r29, 0x3e	; 62
    1030:	cb 50       	subi	r28, 0x0B	; 11
    1032:	d1 40       	sbci	r29, 0x01	; 1
    1034:	0f b6       	in	r0, 0x3f	; 63
    1036:	f8 94       	cli
    1038:	de bf       	out	0x3e, r29	; 62
    103a:	0f be       	out	0x3f, r0	; 63
    103c:	cd bf       	out	0x3d, r28	; 61
	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured) return;
    103e:	80 91 62 05 	lds	r24, 0x0562
    1042:	84 30       	cpi	r24, 0x04	; 4
    1044:	09 f0       	breq	.+2      	; 0x1048 <TMC_Task+0x20>
    1046:	8e c0       	rjmp	.+284    	; 0x1164 <TMC_Task+0x13c>

	TMC_MessageHeader_t MessageHeader;
	uint8_t             rw[255];

	/* Try to read in a TMC message from the interface, process if one is available */
	if (ReadTMCHeader(&MessageHeader)) {
    1048:	ce 01       	movw	r24, r28
    104a:	93 95       	inc	r25
    104c:	88 df       	rcall	.-240    	; 0xf5e <ReadTMCHeader>
    104e:	88 23       	and	r24, r24
    1050:	09 f4       	brne	.+2      	; 0x1054 <TMC_Task+0x2c>
    1052:	84 c0       	rjmp	.+264    	; 0x115c <TMC_Task+0x134>
    1054:	c0 50       	subi	r28, 0x00	; 0
		switch (MessageHeader.MessageID) {
    1056:	df 4f       	sbci	r29, 0xFF	; 255
    1058:	88 81       	ld	r24, Y
    105a:	c0 50       	subi	r28, 0x00	; 0
    105c:	d1 40       	sbci	r29, 0x01	; 1
    105e:	81 30       	cpi	r24, 0x01	; 1
    1060:	21 f1       	breq	.+72     	; 0x10aa <TMC_Task+0x82>
    1062:	82 30       	cpi	r24, 0x02	; 2
    1064:	09 f0       	breq	.+2      	; 0x1068 <TMC_Task+0x40>
    1066:	75 c0       	rjmp	.+234    	; 0x1152 <TMC_Task+0x12a>
    1068:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    106c:	8b 77       	andi	r24, 0x7B	; 123
    106e:	80 93 e8 00 	sts	0x00E8, r24
    1072:	ce 01       	movw	r24, r28
				ProcessSentMessage(rw, MessageHeader.TransferSize);
				break;
			case TMC_MESSAGEID_DEV_DEP_MSG_IN:
				Endpoint_ClearOUT();

				MessageHeader.TransferSize = GetNextMessage(rw);
    1074:	01 96       	adiw	r24, 0x01	; 1
    1076:	4c df       	rcall	.-360    	; 0xf10 <GetNextMessage>
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	a0 e0       	ldi	r26, 0x00	; 0
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	cc 5f       	subi	r28, 0xFC	; 252
    1080:	de 4f       	sbci	r29, 0xFE	; 254
    1082:	88 83       	st	Y, r24
    1084:	99 83       	std	Y+1, r25	; 0x01
    1086:	aa 83       	std	Y+2, r26	; 0x02
    1088:	bb 83       	std	Y+3, r27	; 0x03
    108a:	c4 50       	subi	r28, 0x04	; 4
    108c:	d1 40       	sbci	r29, 0x01	; 1
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	c8 5f       	subi	r28, 0xF8	; 248
				MessageHeader.MessageIDSpecific.DeviceOUT.LastMessageTransaction = true;
    1092:	de 4f       	sbci	r29, 0xFE	; 254
    1094:	88 83       	st	Y, r24
    1096:	c8 50       	subi	r28, 0x08	; 8
    1098:	d1 40       	sbci	r29, 0x01	; 1
    109a:	ce 01       	movw	r24, r28
    109c:	93 95       	inc	r25
				WriteTMCHeader(&MessageHeader);
    109e:	94 df       	rcall	.-216    	; 0xfc8 <WriteTMCHeader>
    10a0:	10 92 50 04 	sts	0x0450, r1
    10a4:	10 92 4f 04 	sts	0x044F, r1

				LastTransferLength = 0;
    10a8:	41 c0       	rjmp	.+130    	; 0x112c <TMC_Task+0x104>
    10aa:	10 92 50 04 	sts	0x0450, r1
				while (Endpoint_Write_Stream_LE(rw, MessageHeader.TransferSize, &LastTransferLength) ==
    10ae:	10 92 4f 04 	sts	0x044F, r1

	/* Try to read in a TMC message from the interface, process if one is available */
	if (ReadTMCHeader(&MessageHeader)) {
		switch (MessageHeader.MessageID) {
			case TMC_MESSAGEID_DEV_DEP_MSG_OUT:
				LastTransferLength = 0;
    10b2:	cc 5f       	subi	r28, 0xFC	; 252
    10b4:	de 4f       	sbci	r29, 0xFE	; 254
    10b6:	68 81       	ld	r22, Y
				while (Endpoint_Read_Stream_LE(rw, MIN(MessageHeader.TransferSize, sizeof(rw)), &LastTransferLength) ==
    10b8:	79 81       	ldd	r23, Y+1	; 0x01
    10ba:	8a 81       	ldd	r24, Y+2	; 0x02
    10bc:	9b 81       	ldd	r25, Y+3	; 0x03
    10be:	c4 50       	subi	r28, 0x04	; 4
    10c0:	d1 40       	sbci	r29, 0x01	; 1
    10c2:	6f 3f       	cpi	r22, 0xFF	; 255
    10c4:	71 05       	cpc	r23, r1
    10c6:	81 05       	cpc	r24, r1
    10c8:	91 05       	cpc	r25, r1
    10ca:	29 f0       	breq	.+10     	; 0x10d6 <TMC_Task+0xae>
    10cc:	20 f0       	brcs	.+8      	; 0x10d6 <TMC_Task+0xae>
    10ce:	6f ef       	ldi	r22, 0xFF	; 255
    10d0:	70 e0       	ldi	r23, 0x00	; 0
    10d2:	80 e0       	ldi	r24, 0x00	; 0
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	4f e4       	ldi	r20, 0x4F	; 79
    10d8:	54 e0       	ldi	r21, 0x04	; 4
    10da:	ce 01       	movw	r24, r28
    10dc:	01 96       	adiw	r24, 0x01	; 1
    10de:	58 d7       	rcall	.+3760   	; 0x1f90 <Endpoint_Read_Stream_LE>
    10e0:	85 30       	cpi	r24, 0x05	; 5
    10e2:	21 f4       	brne	.+8      	; 0x10ec <TMC_Task+0xc4>
    10e4:	80 91 52 04 	lds	r24, 0x0452
    10e8:	88 23       	and	r24, r24
    10ea:	19 f3       	breq	.-58     	; 0x10b2 <TMC_Task+0x8a>
				       ENDPOINT_RWSTREAM_IncompleteTransfer) {
					if (IsTMCBulkOUTReset) break;
    10ec:	cc 5f       	subi	r28, 0xFC	; 252
    10ee:	de 4f       	sbci	r29, 0xFE	; 254
    10f0:	e8 81       	ld	r30, Y
    10f2:	f9 81       	ldd	r31, Y+1	; 0x01
				}
                
                rw[MessageHeader.TransferSize] = NULL;
    10f4:	c4 50       	subi	r28, 0x04	; 4
    10f6:	d1 40       	sbci	r29, 0x01	; 1
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	8c 0f       	add	r24, r28
    10fe:	9d 1f       	adc	r25, r29
    1100:	e8 0f       	add	r30, r24
    1102:	f9 1f       	adc	r31, r25
    1104:	10 82       	st	Z, r1
    1106:	80 91 e8 00 	lds	r24, 0x00E8
    110a:	8b 77       	andi	r24, 0x7B	; 123
    110c:	80 93 e8 00 	sts	0x00E8, r24
    1110:	cc 5f       	subi	r28, 0xFC	; 252
    1112:	de 4f       	sbci	r29, 0xFE	; 254
    1114:	68 81       	ld	r22, Y
    1116:	79 81       	ldd	r23, Y+1	; 0x01

				Endpoint_ClearOUT();

				ProcessSentMessage(rw, MessageHeader.TransferSize);
    1118:	c4 50       	subi	r28, 0x04	; 4
    111a:	d1 40       	sbci	r29, 0x01	; 1
    111c:	ce 01       	movw	r24, r28
    111e:	01 96       	adiw	r24, 0x01	; 1
    1120:	50 dd       	rcall	.-1376   	; 0xbc2 <ProcessSentMessage>
    1122:	1c c0       	rjmp	.+56     	; 0x115c <TMC_Task+0x134>
    1124:	80 91 53 04 	lds	r24, 0x0453
    1128:	81 11       	cpse	r24, r1
    112a:	0d c0       	rjmp	.+26     	; 0x1146 <TMC_Task+0x11e>
				break;
    112c:	cc 5f       	subi	r28, 0xFC	; 252
				WriteTMCHeader(&MessageHeader);

				LastTransferLength = 0;
				while (Endpoint_Write_Stream_LE(rw, MessageHeader.TransferSize, &LastTransferLength) ==
				       ENDPOINT_RWSTREAM_IncompleteTransfer) {
					if (IsTMCBulkINReset) break;
    112e:	de 4f       	sbci	r29, 0xFE	; 254
    1130:	68 81       	ld	r22, Y
    1132:	79 81       	ldd	r23, Y+1	; 0x01
    1134:	c4 50       	subi	r28, 0x04	; 4
				MessageHeader.TransferSize = GetNextMessage(rw);
				MessageHeader.MessageIDSpecific.DeviceOUT.LastMessageTransaction = true;
				WriteTMCHeader(&MessageHeader);

				LastTransferLength = 0;
				while (Endpoint_Write_Stream_LE(rw, MessageHeader.TransferSize, &LastTransferLength) ==
    1136:	d1 40       	sbci	r29, 0x01	; 1
    1138:	4f e4       	ldi	r20, 0x4F	; 79
    113a:	54 e0       	ldi	r21, 0x04	; 4
    113c:	ce 01       	movw	r24, r28
    113e:	01 96       	adiw	r24, 0x01	; 1
    1140:	e0 d6       	rcall	.+3520   	; 0x1f02 <Endpoint_Write_Stream_LE>
    1142:	85 30       	cpi	r24, 0x05	; 5
    1144:	79 f3       	breq	.-34     	; 0x1124 <TMC_Task+0xfc>
    1146:	80 91 e8 00 	lds	r24, 0x00E8
    114a:	8e 77       	andi	r24, 0x7E	; 126
    114c:	80 93 e8 00 	sts	0x00E8, r24
    1150:	05 c0       	rjmp	.+10     	; 0x115c <TMC_Task+0x134>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1152:	80 91 eb 00 	lds	r24, 0x00EB
    1156:	80 62       	ori	r24, 0x20	; 32
    1158:	80 93 eb 00 	sts	0x00EB, r24
    115c:	10 92 53 04 	sts	0x0453, r1
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1160:	10 92 52 04 	sts	0x0452, r1
    1164:	c5 5f       	subi	r28, 0xF5	; 245
    1166:	de 4f       	sbci	r29, 0xFE	; 254
				break;
		}
	}

	/* All pending data has been processed - reset the data abort flags */
	IsTMCBulkINReset  = false;
    1168:	0f b6       	in	r0, 0x3f	; 63
    116a:	f8 94       	cli
	IsTMCBulkOUTReset = false;
    116c:	de bf       	out	0x3e, r29	; 62
    116e:	0f be       	out	0x3f, r0	; 63
}
    1170:	cd bf       	out	0x3d, r28	; 61
    1172:	df 91       	pop	r29
    1174:	cf 91       	pop	r28
    1176:	08 95       	ret

00001178 <main>:
    1178:	1b dc       	rcall	.-1994   	; 0x9b0 <SetupHardware>
    117a:	78 94       	sei
    117c:	55 df       	rcall	.-342    	; 0x1028 <TMC_Task>
    117e:	0e 94 14 12 	call	0x2428	; 0x2428 <USB_USBTask>
    1182:	aa d4       	rcall	.+2388   	; 0x1ad8 <readData>
	SetupHardware();
	sei();

	while(1) {
		TMC_Task();
		USB_USBTask();
    1184:	fb cf       	rjmp	.-10     	; 0x117c <main+0x4>

00001186 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
    1186:	29 2f       	mov	r18, r25
    1188:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
    118a:	22 30       	cpi	r18, 0x02	; 2
    118c:	31 05       	cpc	r19, r1
    118e:	59 f0       	breq	.+22     	; 0x11a6 <CALLBACK_USB_GetDescriptor+0x20>
    1190:	23 30       	cpi	r18, 0x03	; 3
    1192:	31 05       	cpc	r19, r1
    1194:	69 f0       	breq	.+26     	; 0x11b0 <CALLBACK_USB_GetDescriptor+0x2a>
    1196:	21 30       	cpi	r18, 0x01	; 1
    1198:	31 05       	cpc	r19, r1
    119a:	f9 f4       	brne	.+62     	; 0x11da <CALLBACK_USB_GetDescriptor+0x54>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
    119c:	82 e1       	ldi	r24, 0x12	; 18
    119e:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
    11a0:	29 e3       	ldi	r18, 0x39	; 57
    11a2:	31 e0       	ldi	r19, 0x01	; 1
    11a4:	1e c0       	rjmp	.+60     	; 0x11e2 <CALLBACK_USB_GetDescriptor+0x5c>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
    11a6:	87 e2       	ldi	r24, 0x27	; 39
    11a8:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
    11aa:	22 e1       	ldi	r18, 0x12	; 18
    11ac:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
    11ae:	19 c0       	rjmp	.+50     	; 0x11e2 <CALLBACK_USB_GetDescriptor+0x5c>
    11b0:	99 27       	eor	r25, r25
		case DTYPE_String:
			switch (DescriptorNumber)
    11b2:	81 30       	cpi	r24, 0x01	; 1
    11b4:	91 05       	cpc	r25, r1
    11b6:	41 f0       	breq	.+16     	; 0x11c8 <CALLBACK_USB_GetDescriptor+0x42>
    11b8:	82 30       	cpi	r24, 0x02	; 2
    11ba:	91 05       	cpc	r25, r1
    11bc:	41 f0       	breq	.+16     	; 0x11ce <CALLBACK_USB_GetDescriptor+0x48>
    11be:	89 2b       	or	r24, r25
    11c0:	61 f4       	brne	.+24     	; 0x11da <CALLBACK_USB_GetDescriptor+0x54>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
    11c2:	ee e0       	ldi	r30, 0x0E	; 14
    11c4:	f1 e0       	ldi	r31, 0x01	; 1
    11c6:	05 c0       	rjmp	.+10     	; 0x11d2 <CALLBACK_USB_GetDescriptor+0x4c>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    11c8:	ec ef       	ldi	r30, 0xFC	; 252
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	02 c0       	rjmp	.+4      	; 0x11d2 <CALLBACK_USB_GetDescriptor+0x4c>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
    11ce:	e4 ee       	ldi	r30, 0xE4	; 228
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	84 91       	lpm	r24, Z
    11d4:	90 e0       	ldi	r25, 0x00	; 0
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02:
					Address = &ProductString;
    11d6:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
    11d8:	04 c0       	rjmp	.+8      	; 0x11e2 <CALLBACK_USB_GetDescriptor+0x5c>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
    11da:	80 e0       	ldi	r24, 0x00	; 0
    11dc:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
    11de:	20 e0       	ldi	r18, 0x00	; 0
    11e0:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
    11e2:	fa 01       	movw	r30, r20
    11e4:	31 83       	std	Z+1, r19	; 0x01
    11e6:	20 83       	st	Z, r18
	return Size;
}
    11e8:	08 95       	ret

000011ea <add>:
 * Output: uint8_t
 *
 * Description: This function is to add a sample set to the queue. This returns 1 if the set is
    added, Null otherwise. */
//TODO: Max number of sets is 255
uint8_t add(unsigned int n, uint8_t ar, uint8_t ps, uint8_t cH, uint8_t cL, uint8_t c) {
    11ea:	af 92       	push	r10
    11ec:	bf 92       	push	r11
    11ee:	cf 92       	push	r12
    11f0:	df 92       	push	r13
    11f2:	ef 92       	push	r14
    11f4:	0f 93       	push	r16
    11f6:	cf 93       	push	r28
    11f8:	df 93       	push	r29
    11fa:	00 d0       	rcall	.+0      	; 0x11fc <add+0x12>
    11fc:	1f 92       	push	r1
    11fe:	cd b7       	in	r28, 0x3d	; 61
    1200:	de b7       	in	r29, 0x3e	; 62
    1202:	5c 01       	movw	r10, r24
    dSet *temp = (dSet*) malloc(sizeof(dSet));
    1204:	89 e0       	ldi	r24, 0x09	; 9
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	2b 83       	std	Y+3, r18	; 0x03
    120a:	4a 83       	std	Y+2, r20	; 0x02
    120c:	69 83       	std	Y+1, r22	; 0x01
    120e:	0e 94 1e 14 	call	0x283c	; 0x283c <malloc>
    1212:	fc 01       	movw	r30, r24
    dSet *end = queue;
    1214:	c0 90 55 04 	lds	r12, 0x0455
    1218:	d0 90 56 04 	lds	r13, 0x0456
    
    if (temp != NULL && isNumOk(n) && isADCRateOk(ar) && isPrescaleOk(ps) && isNumOk(c)) {
    121c:	2b 81       	ldd	r18, Y+3	; 0x03
    121e:	4a 81       	ldd	r20, Y+2	; 0x02
    1220:	69 81       	ldd	r22, Y+1	; 0x01
    1222:	00 97       	sbiw	r24, 0x00	; 0
    1224:	59 f1       	breq	.+86     	; 0x127c <add+0x92>
    1226:	a1 14       	cp	r10, r1
    1228:	b1 04       	cpc	r11, r1
    122a:	41 f1       	breq	.+80     	; 0x127c <add+0x92>
 *
 * Description: This function is for error checking the ADC Rate in a sample set.
    This returns 1 if the ADC rate is ok, Null otherwise. */
//TODO: Replace this function with error checking on the sample rate
uint8_t isADCRateOk(uint8_t ar) {
    return ((ar & 0xF0) == 0) ? 1 : NULL;
    122c:	86 2f       	mov	r24, r22
    122e:	80 7f       	andi	r24, 0xF0	; 240
//TODO: Max number of sets is 255
uint8_t add(unsigned int n, uint8_t ar, uint8_t ps, uint8_t cH, uint8_t cL, uint8_t c) {
    dSet *temp = (dSet*) malloc(sizeof(dSet));
    dSet *end = queue;
    
    if (temp != NULL && isNumOk(n) && isADCRateOk(ar) && isPrescaleOk(ps) && isNumOk(c)) {
    1230:	29 f5       	brne	.+74     	; 0x127c <add+0x92>
    1232:	49 30       	cpi	r20, 0x09	; 9
    1234:	20 f5       	brcc	.+72     	; 0x127e <add+0x94>
    1236:	ee 20       	and	r14, r14
    1238:	11 f1       	breq	.+68     	; 0x127e <add+0x94>
        //Number of Samples
        temp->num = n;
    123a:	b1 82       	std	Z+1, r11	; 0x01
    123c:	a0 82       	st	Z, r10
        //ADC rate
        temp->adcRate = ar;
    123e:	62 83       	std	Z+2, r22	; 0x02
        //Prescale
        temp->prescale = ps;
    1240:	43 83       	std	Z+3, r20	; 0x03
        //Compare High
        temp->compareH = cH;
    1242:	24 83       	std	Z+4, r18	; 0x04
        //Compare Low
        temp->compareL = cL;
    1244:	05 83       	std	Z+5, r16	; 0x05
        //Channels
        //TODO: make this a 16bit to account for the other two channels
        temp->channels = c;
    1246:	e6 82       	std	Z+6, r14	; 0x06
        //Pointer to next
        temp->next = NULL;
    1248:	10 86       	std	Z+8, r1	; 0x08
    124a:	17 82       	std	Z+7, r1	; 0x07
        
        if (queue == NULL) queue = temp;
    124c:	c1 14       	cp	r12, r1
    124e:	d1 04       	cpc	r13, r1
    1250:	29 f4       	brne	.+10     	; 0x125c <add+0x72>
    1252:	f0 93 56 04 	sts	0x0456, r31
    1256:	e0 93 55 04 	sts	0x0455, r30
    125a:	0e c0       	rjmp	.+28     	; 0x1278 <add+0x8e>
        else {
            while(end->next != NULL) end = end->next;
    125c:	d6 01       	movw	r26, r12
    125e:	17 96       	adiw	r26, 0x07	; 7
    1260:	8d 91       	ld	r24, X+
    1262:	9c 91       	ld	r25, X
    1264:	18 97       	sbiw	r26, 0x08	; 8
    1266:	00 97       	sbiw	r24, 0x00	; 0
    1268:	11 f0       	breq	.+4      	; 0x126e <add+0x84>
    126a:	6c 01       	movw	r12, r24
    126c:	f7 cf       	rjmp	.-18     	; 0x125c <add+0x72>
            end->next = temp;
    126e:	d6 01       	movw	r26, r12
    1270:	18 96       	adiw	r26, 0x08	; 8
    1272:	fc 93       	st	X, r31
    1274:	ee 93       	st	-X, r30
    1276:	17 97       	sbiw	r26, 0x07	; 7
        }
        return 1;
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	01 c0       	rjmp	.+2      	; 0x127e <add+0x94>
    }
    else return NULL;
    127c:	80 e0       	ldi	r24, 0x00	; 0
}
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
    1282:	0f 90       	pop	r0
    1284:	df 91       	pop	r29
    1286:	cf 91       	pop	r28
    1288:	0f 91       	pop	r16
    128a:	ef 90       	pop	r14
    128c:	df 90       	pop	r13
    128e:	cf 90       	pop	r12
    1290:	bf 90       	pop	r11
    1292:	af 90       	pop	r10
    1294:	08 95       	ret

00001296 <rm>:
 * Output: uint8_t
 *
 * Description: This function removes the first item in the queue.
    This returns 1 if it was removed, Null if the queue is empty. */
uint8_t rm() {
    dSet *temp = queue;
    1296:	80 91 55 04 	lds	r24, 0x0455
    129a:	90 91 56 04 	lds	r25, 0x0456
    queue = queue->next;
    129e:	fc 01       	movw	r30, r24
    12a0:	27 81       	ldd	r18, Z+7	; 0x07
    12a2:	30 85       	ldd	r19, Z+8	; 0x08
    12a4:	30 93 56 04 	sts	0x0456, r19
    12a8:	20 93 55 04 	sts	0x0455, r18
    free(temp);
    12ac:	0e 94 b6 14 	call	0x296c	; 0x296c <free>
    return (queue == NULL) ? NULL : 1;
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	20 91 55 04 	lds	r18, 0x0455
    12b6:	30 91 56 04 	lds	r19, 0x0456
    12ba:	23 2b       	or	r18, r19
    12bc:	09 f4       	brne	.+2      	; 0x12c0 <rm+0x2a>
    12be:	80 e0       	ldi	r24, 0x00	; 0
}
    12c0:	08 95       	ret

000012c2 <dec>:
 * Description: This function decrements the number of the first item in the queue.
    This returns 1 if it was decremented, but still exists.  Returns 2 if it was
    decrememted, removed, and there are more sample sets.  Returns Null if it is 
    removed and/or there is no sample sets. */
uint8_t dec() {
    if (queue == NULL) return NULL;
    12c2:	e0 91 55 04 	lds	r30, 0x0455
    12c6:	f0 91 56 04 	lds	r31, 0x0456
    12ca:	30 97       	sbiw	r30, 0x00	; 0
    12cc:	71 f0       	breq	.+28     	; 0x12ea <dec+0x28>
    else if (--(queue->num) == 0) return rm() ? 2 : NULL;
    12ce:	80 81       	ld	r24, Z
    12d0:	91 81       	ldd	r25, Z+1	; 0x01
    12d2:	01 97       	sbiw	r24, 0x01	; 1
    12d4:	91 83       	std	Z+1, r25	; 0x01
    12d6:	80 83       	st	Z, r24
    12d8:	89 2b       	or	r24, r25
    12da:	29 f4       	brne	.+10     	; 0x12e6 <dec+0x24>
    12dc:	dc df       	rcall	.-72     	; 0x1296 <rm>
    12de:	88 23       	and	r24, r24
    12e0:	21 f0       	breq	.+8      	; 0x12ea <dec+0x28>
    12e2:	82 e0       	ldi	r24, 0x02	; 2
    12e4:	08 95       	ret
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    else return 1;
    12e8:	08 95       	ret
    12ea:	80 e0       	ldi	r24, 0x00	; 0
    This returns 1 if it was decremented, but still exists.  Returns 2 if it was
    decrememted, removed, and there are more sample sets.  Returns Null if it is 
    removed and/or there is no sample sets. */
uint8_t dec() {
    if (queue == NULL) return NULL;
    else if (--(queue->num) == 0) return rm() ? 2 : NULL;
    12ec:	08 95       	ret

000012ee <findSet>:
    else return 1;
}
    12ee:	e0 91 55 04 	lds	r30, 0x0455
 *
 * Description: This function finds the item requested in the queue.
    This returns a pointer to that item, Null if it doesnt exist. */
dSet* findSet(uint8_t n) {
    uint8_t i;
    dSet *temp = queue;
    12f2:	f0 91 56 04 	lds	r31, 0x0456
    
    for(i = 0; i < n && temp != NULL; i++) temp = temp->next;
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	98 17       	cp	r25, r24
    12fa:	39 f0       	breq	.+14     	; 0x130a <findSet+0x1c>
    12fc:	30 97       	sbiw	r30, 0x00	; 0
    12fe:	29 f0       	breq	.+10     	; 0x130a <findSet+0x1c>
    1300:	07 80       	ldd	r0, Z+7	; 0x07
    1302:	f0 85       	ldd	r31, Z+8	; 0x08
    1304:	e0 2d       	mov	r30, r0
    1306:	9f 5f       	subi	r25, 0xFF	; 255
    1308:	f7 cf       	rjmp	.-18     	; 0x12f8 <findSet+0xa>
    
    return temp;
}
    130a:	cf 01       	movw	r24, r30
    130c:	08 95       	ret

0000130e <qryDSet>:
 * Input: n*, a*, ps*, ch*, cl*, c*
 * Output: dSet*
 *
 * Description: This function finds the item requested in the queue.
 This returns a pointer to that item, Null if it doesnt exist. */
dSet* qryDSet(unsigned int *n, uint8_t *a, uint8_t *ps, uint8_t *ch, uint8_t *cl, uint8_t *c) {
    130e:	8f 92       	push	r8
    1310:	9f 92       	push	r9
    1312:	af 92       	push	r10
    1314:	bf 92       	push	r11
    1316:	cf 92       	push	r12
    1318:	df 92       	push	r13
    131a:	ef 92       	push	r14
    131c:	ff 92       	push	r15
    131e:	0f 93       	push	r16
    1320:	1f 93       	push	r17
    1322:	cf 93       	push	r28
    1324:	df 93       	push	r29
    1326:	6c 01       	movw	r12, r24
    1328:	eb 01       	movw	r28, r22
    132a:	4a 01       	movw	r8, r20
    132c:	59 01       	movw	r10, r18
    dSet *temp = findSet(*a);
    132e:	88 81       	ld	r24, Y
    1330:	de df       	rcall	.-68     	; 0x12ee <findSet>
    1332:	fc 01       	movw	r30, r24
    1334:	00 97       	sbiw	r24, 0x00	; 0
    
    if (temp != NULL) {
    1336:	99 f0       	breq	.+38     	; 0x135e <qryDSet+0x50>
    1338:	80 81       	ld	r24, Z
        *n = temp->num;
    133a:	91 81       	ldd	r25, Z+1	; 0x01
    133c:	d6 01       	movw	r26, r12
    133e:	8d 93       	st	X+, r24
    1340:	9c 93       	st	X, r25
    1342:	82 81       	ldd	r24, Z+2	; 0x02
        *a = temp->adcRate;
    1344:	88 83       	st	Y, r24
    1346:	83 81       	ldd	r24, Z+3	; 0x03
        *ps = temp->prescale;
    1348:	d4 01       	movw	r26, r8
    134a:	8c 93       	st	X, r24
    134c:	84 81       	ldd	r24, Z+4	; 0x04
        *ch = temp->compareH;
    134e:	d5 01       	movw	r26, r10
    1350:	8c 93       	st	X, r24
    1352:	85 81       	ldd	r24, Z+5	; 0x05
        *cl = temp->compareL;
    1354:	d8 01       	movw	r26, r16
    1356:	8c 93       	st	X, r24
    1358:	86 81       	ldd	r24, Z+6	; 0x06
        *c = temp->channels;
    135a:	d7 01       	movw	r26, r14
    135c:	8c 93       	st	X, r24
    135e:	cf 01       	movw	r24, r30
    }
    return temp;
}
    1360:	df 91       	pop	r29
    1362:	cf 91       	pop	r28
    1364:	1f 91       	pop	r17
    1366:	0f 91       	pop	r16
    1368:	ff 90       	pop	r15
    136a:	ef 90       	pop	r14
    136c:	df 90       	pop	r13
    136e:	cf 90       	pop	r12
    1370:	bf 90       	pop	r11
    1372:	af 90       	pop	r10
    1374:	9f 90       	pop	r9
    1376:	8f 90       	pop	r8
    1378:	08 95       	ret

0000137a <determinePrescale>:
    137a:	cf 92       	push	r12
 * Input: rate
 * Output: uint8_t
 *
 * Description: This function detrmines a prescale value based on the sample rate.
    This returns the register value for the prescale. */
uint8_t determinePrescale(float rate) {
    137c:	df 92       	push	r13
    137e:	ef 92       	push	r14
    1380:	ff 92       	push	r15
    1382:	6b 01       	movw	r12, r22
    1384:	7c 01       	movw	r14, r24
    if (rate > (float) CLK_PS_1) return PS_1;
    1386:	20 e0       	ldi	r18, 0x00	; 0
    1388:	34 e2       	ldi	r19, 0x24	; 36
    138a:	44 e7       	ldi	r20, 0x74	; 116
    138c:	53 e4       	ldi	r21, 0x43	; 67
    138e:	0e 94 b7 13 	call	0x276e	; 0x276e <__gesf2>
    1392:	18 16       	cp	r1, r24
    1394:	04 f1       	brlt	.+64     	; 0x13d6 <determinePrescale+0x5c>
    else if (rate > (float) CLK_PS_8) return PS_8;
    1396:	20 e0       	ldi	r18, 0x00	; 0
    1398:	34 e2       	ldi	r19, 0x24	; 36
    139a:	44 ef       	ldi	r20, 0xF4	; 244
    139c:	51 e4       	ldi	r21, 0x41	; 65
    139e:	c7 01       	movw	r24, r14
    13a0:	b6 01       	movw	r22, r12
    13a2:	0e 94 b7 13 	call	0x276e	; 0x276e <__gesf2>
    13a6:	18 16       	cp	r1, r24
    13a8:	c4 f0       	brlt	.+48     	; 0x13da <determinePrescale+0x60>
    else if (rate > (float) CLK_PS_64) return PS_64;
    13aa:	20 e0       	ldi	r18, 0x00	; 0
    13ac:	34 e2       	ldi	r19, 0x24	; 36
    13ae:	44 e7       	ldi	r20, 0x74	; 116
    13b0:	50 e4       	ldi	r21, 0x40	; 64
    13b2:	c7 01       	movw	r24, r14
    13b4:	b6 01       	movw	r22, r12
    13b6:	0e 94 b7 13 	call	0x276e	; 0x276e <__gesf2>
    13ba:	18 16       	cp	r1, r24
    13bc:	84 f0       	brlt	.+32     	; 0x13de <determinePrescale+0x64>
    else if (rate > (float) CLK_PS_256) return PS_256;
    13be:	20 e0       	ldi	r18, 0x00	; 0
    13c0:	34 e2       	ldi	r19, 0x24	; 36
    13c2:	44 e7       	ldi	r20, 0x74	; 116
    13c4:	5f e3       	ldi	r21, 0x3F	; 63
    13c6:	c7 01       	movw	r24, r14
    13c8:	b6 01       	movw	r22, r12
    13ca:	0e 94 b7 13 	call	0x276e	; 0x276e <__gesf2>
    13ce:	18 16       	cp	r1, r24
    13d0:	44 f4       	brge	.+16     	; 0x13e2 <determinePrescale+0x68>
    13d2:	84 e0       	ldi	r24, 0x04	; 4
    13d4:	07 c0       	rjmp	.+14     	; 0x13e4 <determinePrescale+0x6a>
 * Output: uint8_t
 *
 * Description: This function detrmines a prescale value based on the sample rate.
    This returns the register value for the prescale. */
uint8_t determinePrescale(float rate) {
    if (rate > (float) CLK_PS_1) return PS_1;
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	05 c0       	rjmp	.+10     	; 0x13e4 <determinePrescale+0x6a>
    else if (rate > (float) CLK_PS_8) return PS_8;
    13da:	82 e0       	ldi	r24, 0x02	; 2
    13dc:	03 c0       	rjmp	.+6      	; 0x13e4 <determinePrescale+0x6a>
    else if (rate > (float) CLK_PS_64) return PS_64;
    13de:	83 e0       	ldi	r24, 0x03	; 3
    13e0:	01 c0       	rjmp	.+2      	; 0x13e4 <determinePrescale+0x6a>
    else if (rate > (float) CLK_PS_256) return PS_256;
    else return PS_1024;
    13e2:	85 e0       	ldi	r24, 0x05	; 5
}
    13e4:	ff 90       	pop	r15
    13e6:	ef 90       	pop	r14
    13e8:	df 90       	pop	r13
    13ea:	cf 90       	pop	r12
    13ec:	08 95       	ret

000013ee <determineCounter>:
 * Input: prescale, rate
 * Output: unsigned int
 *
 * Description: This function detrmines the counter based on the prescale and sample rate.
    This function returns the counter value. */
unsigned int determineCounter(uint8_t prescale, float rate) {
    13ee:	cf 93       	push	r28
    13f0:	df 93       	push	r29
    13f2:	00 d0       	rcall	.+0      	; 0x13f4 <determineCounter+0x6>
    13f4:	00 d0       	rcall	.+0      	; 0x13f6 <determineCounter+0x8>
    13f6:	cd b7       	in	r28, 0x3d	; 61
    13f8:	de b7       	in	r29, 0x3e	; 62
    13fa:	9a 01       	movw	r18, r20
    13fc:	ab 01       	movw	r20, r22
    13fe:	82 50       	subi	r24, 0x02	; 2
    1400:	84 30       	cpi	r24, 0x04	; 4
    1402:	48 f4       	brcc	.+18     	; 0x1416 <determineCounter+0x28>
    1404:	e8 2f       	mov	r30, r24
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	ee 0f       	add	r30, r30
    140a:	ff 1f       	adc	r31, r31
    140c:	e1 5e       	subi	r30, 0xE1	; 225
    140e:	fe 4f       	sbci	r31, 0xFE	; 254
    1410:	60 81       	ld	r22, Z
    1412:	71 81       	ldd	r23, Z+1	; 0x01
    1414:	02 c0       	rjmp	.+4      	; 0x141a <determineCounter+0x2c>
    1416:	61 e0       	ldi	r22, 0x01	; 1
    1418:	70 e0       	ldi	r23, 0x00	; 0
            break;
        default:
            break;
    }
    
    return ((unsigned int) ((float) F_CPU/((float) ps*rate)));
    141a:	80 e0       	ldi	r24, 0x00	; 0
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	29 83       	std	Y+1, r18	; 0x01
    1420:	3a 83       	std	Y+2, r19	; 0x02
    1422:	4b 83       	std	Y+3, r20	; 0x03
    1424:	5c 83       	std	Y+4, r21	; 0x04
    1426:	0e 94 05 13 	call	0x260a	; 0x260a <__floatunsisf>
    142a:	29 81       	ldd	r18, Y+1	; 0x01
    142c:	3a 81       	ldd	r19, Y+2	; 0x02
    142e:	4b 81       	ldd	r20, Y+3	; 0x03
    1430:	5c 81       	ldd	r21, Y+4	; 0x04
    1432:	0e 94 bb 13 	call	0x2776	; 0x2776 <__mulsf3>
    1436:	9b 01       	movw	r18, r22
    1438:	ac 01       	movw	r20, r24
    143a:	60 e0       	ldi	r22, 0x00	; 0
    143c:	74 e2       	ldi	r23, 0x24	; 36
    143e:	84 e7       	ldi	r24, 0x74	; 116
    1440:	9b e4       	ldi	r25, 0x4B	; 75
    1442:	0e 94 71 12 	call	0x24e2	; 0x24e2 <__divsf3>
    1446:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <__fixunssfsi>
}
    144a:	cb 01       	movw	r24, r22
    144c:	0f 90       	pop	r0
    144e:	0f 90       	pop	r0
    1450:	0f 90       	pop	r0
    1452:	0f 90       	pop	r0
    1454:	df 91       	pop	r29
    1456:	cf 91       	pop	r28
    1458:	08 95       	ret

0000145a <mystrcmp>:
#include "command.h"

uint8_t mystrcmp(uint8_t *a, uint8_t *b) {
    uint8_t n;
    
    for(n = 0; a[n] == b[n] && a[n] != NULL && n < 255; n++);
    145a:	50 e0       	ldi	r21, 0x00	; 0
    145c:	25 2f       	mov	r18, r21
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	fc 01       	movw	r30, r24
    1462:	e2 0f       	add	r30, r18
    1464:	f3 1f       	adc	r31, r19
    1466:	40 81       	ld	r20, Z
    1468:	fb 01       	movw	r30, r22
    146a:	e2 0f       	add	r30, r18
    146c:	f3 1f       	adc	r31, r19
    146e:	20 81       	ld	r18, Z
    1470:	42 13       	cpse	r20, r18
    1472:	07 c0       	rjmp	.+14     	; 0x1482 <mystrcmp+0x28>
    1474:	44 23       	and	r20, r20
    1476:	21 f0       	breq	.+8      	; 0x1480 <mystrcmp+0x26>
    1478:	5f 3f       	cpi	r21, 0xFF	; 255
    147a:	11 f0       	breq	.+4      	; 0x1480 <mystrcmp+0x26>
    147c:	5f 5f       	subi	r21, 0xFF	; 255
    147e:	ee cf       	rjmp	.-36     	; 0x145c <mystrcmp+0x2>
    1480:	24 2f       	mov	r18, r20
    
    if ((NULL == b[n]) && (a[n] == NULL || a[n] == '\n')) return NULL;
    1482:	21 11       	cpse	r18, r1
    1484:	06 c0       	rjmp	.+12     	; 0x1492 <mystrcmp+0x38>
    1486:	41 11       	cpse	r20, r1
    1488:	02 c0       	rjmp	.+4      	; 0x148e <mystrcmp+0x34>
    148a:	80 e0       	ldi	r24, 0x00	; 0
    148c:	08 95       	ret
    148e:	4a 30       	cpi	r20, 0x0A	; 10
    1490:	e1 f3       	breq	.-8      	; 0x148a <mystrcmp+0x30>
    else return 1;
    1492:	81 e0       	ldi	r24, 0x01	; 1
}
    1494:	08 95       	ret

00001496 <crc8>:
    else if (!mystrcmp((uint8_t*)command, (uint8_t*)QRY_CMD)) return CMD_QRY;
    else if (!mystrcmp((uint8_t*)command, (uint8_t*)READ_CMD)) return CMD_READ;
}

uint8_t crc8(uint8_t *p, uint8_t len) {
    uint16_t i, crc = 0x0;
    1496:	20 e0       	ldi	r18, 0x00	; 0
    1498:	30 e0       	ldi	r19, 0x00	; 0
    
    while (len--) {
    149a:	61 50       	subi	r22, 0x01	; 1
    149c:	50 f0       	brcs	.+20     	; 0x14b2 <crc8+0x1c>
        i = (crc ^ *p++) & 0xFF;
    149e:	fc 01       	movw	r30, r24
    14a0:	41 91       	ld	r20, Z+
    14a2:	cf 01       	movw	r24, r30
    14a4:	f9 01       	movw	r30, r18
    14a6:	e4 27       	eor	r30, r20
        crc = (crc_table[i] ^ (crc << 8)) & 0xFF;
    14a8:	e9 5d       	subi	r30, 0xD9	; 217
    14aa:	fe 4f       	sbci	r31, 0xFE	; 254
    14ac:	20 81       	ld	r18, Z
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	f4 cf       	rjmp	.-24     	; 0x149a <crc8+0x4>
    }
    
    return crc & 0xFF;
}
    14b2:	82 2f       	mov	r24, r18
    14b4:	08 95       	ret

000014b6 <isWhiteSpace>:
    }
    return 1;
}

uint8_t isWhiteSpace(uint8_t c) {
    if (c == ' ' || c == '\n' || c == '\t') return 1;
    14b6:	80 32       	cpi	r24, 0x20	; 32
    14b8:	39 f0       	breq	.+14     	; 0x14c8 <isWhiteSpace+0x12>
    14ba:	97 ef       	ldi	r25, 0xF7	; 247
    14bc:	98 0f       	add	r25, r24
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	92 30       	cpi	r25, 0x02	; 2
    14c2:	18 f0       	brcs	.+6      	; 0x14ca <isWhiteSpace+0x14>
    14c4:	80 e0       	ldi	r24, 0x00	; 0
    14c6:	08 95       	ret
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    else return 0;
}
    14ca:	08 95       	ret

000014cc <isNumeric>:

uint8_t isNumeric(uint8_t *d, uint8_t isFloat) {
    uint8_t f,i;
    
    if (d == NULL) return NULL;
    14cc:	00 97       	sbiw	r24, 0x00	; 0
    14ce:	c1 f0       	breq	.+48     	; 0x1500 <isNumeric+0x34>
    14d0:	20 e0       	ldi	r18, 0x00	; 0
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    
    for(i = 0, f = 0; ((d[i] >= '0' && d[i] <= '9') || (d[i] == '.' && isFloat)) && f < 2; i++) {
    14d4:	fc 01       	movw	r30, r24
    14d6:	e2 0f       	add	r30, r18
    14d8:	f1 1d       	adc	r31, r1
    14da:	40 81       	ld	r20, Z
    14dc:	50 ed       	ldi	r21, 0xD0	; 208
    14de:	54 0f       	add	r21, r20
    14e0:	5a 30       	cpi	r21, 0x0A	; 10
    14e2:	28 f0       	brcs	.+10     	; 0x14ee <isNumeric+0x22>
    14e4:	4e 32       	cpi	r20, 0x2E	; 46
    14e6:	39 f4       	brne	.+14     	; 0x14f6 <isNumeric+0x2a>
    14e8:	61 11       	cpse	r22, r1
    14ea:	0c c0       	rjmp	.+24     	; 0x1504 <isNumeric+0x38>
    14ec:	04 c0       	rjmp	.+8      	; 0x14f6 <isNumeric+0x2a>
    14ee:	32 30       	cpi	r19, 0x02	; 2
    14f0:	10 f4       	brcc	.+4      	; 0x14f6 <isNumeric+0x2a>
    14f2:	2f 5f       	subi	r18, 0xFF	; 255
    14f4:	ef cf       	rjmp	.-34     	; 0x14d4 <isNumeric+0x8>
        if (d[i] == '.') f++;
    }
    
    if (d[i] == NULL && i > 0) return 1;
    14f6:	41 11       	cpse	r20, r1
    14f8:	03 c0       	rjmp	.+6      	; 0x1500 <isNumeric+0x34>
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	21 11       	cpse	r18, r1
    14fe:	06 c0       	rjmp	.+12     	; 0x150c <isNumeric+0x40>
    else return 0;
    1500:	80 e0       	ldi	r24, 0x00	; 0
    1502:	08 95       	ret
uint8_t isNumeric(uint8_t *d, uint8_t isFloat) {
    uint8_t f,i;
    
    if (d == NULL) return NULL;
    
    for(i = 0, f = 0; ((d[i] >= '0' && d[i] <= '9') || (d[i] == '.' && isFloat)) && f < 2; i++) {
    1504:	32 30       	cpi	r19, 0x02	; 2
    1506:	b8 f7       	brcc	.-18     	; 0x14f6 <isNumeric+0x2a>
        if (d[i] == '.') f++;
    1508:	3f 5f       	subi	r19, 0xFF	; 255
    150a:	f3 cf       	rjmp	.-26     	; 0x14f2 <isNumeric+0x26>
    }
    
    if (d[i] == NULL && i > 0) return 1;
    else return 0;
}
    150c:	08 95       	ret

0000150e <myatoi>:
    
    if ((NULL == b[n]) && (a[n] == NULL || a[n] == '\n')) return NULL;
    else return 1;
}

unsigned int myatoi(uint8_t *a, uint8_t *valid) {
    150e:	0f 93       	push	r16
    1510:	1f 93       	push	r17
    1512:	cf 93       	push	r28
    1514:	df 93       	push	r29
    1516:	8c 01       	movw	r16, r24
    1518:	eb 01       	movw	r28, r22
    uint8_t n;
    unsigned int i = 0;
    
    if (!isNumeric(a,0)) {
    151a:	60 e0       	ldi	r22, 0x00	; 0
    151c:	d7 df       	rcall	.-82     	; 0x14cc <isNumeric>
    151e:	81 11       	cpse	r24, r1
    1520:	02 c0       	rjmp	.+4      	; 0x1526 <myatoi+0x18>
    1522:	82 e0       	ldi	r24, 0x02	; 2
        *valid = NUM_INVALID;
    1524:	0b c0       	rjmp	.+22     	; 0x153c <myatoi+0x2e>
    1526:	f8 01       	movw	r30, r16
        return 0;
    }
    
    if (a[0] < '0' || a[0] > '9') {
    1528:	80 81       	ld	r24, Z
    152a:	80 53       	subi	r24, 0x30	; 48
    152c:	8a 30       	cpi	r24, 0x0A	; 10
    152e:	28 f4       	brcc	.+10     	; 0x153a <myatoi+0x2c>
    1530:	20 e0       	ldi	r18, 0x00	; 0
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	80 e0       	ldi	r24, 0x00	; 0
    1536:	5a e0       	ldi	r21, 0x0A	; 10
        *valid = 3;
        return i;
    }
    
    for(n = 0; a[n] >= '0' && a[n] <= '9'; n++) i = i*10 + a[n] - 48;
    1538:	05 c0       	rjmp	.+10     	; 0x1544 <myatoi+0x36>
    153a:	83 e0       	ldi	r24, 0x03	; 3
        *valid = NUM_INVALID;
        return 0;
    }
    
    if (a[0] < '0' || a[0] > '9') {
        *valid = 3;
    153c:	88 83       	st	Y, r24
    153e:	80 e0       	ldi	r24, 0x00	; 0
        return i;
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	1d c0       	rjmp	.+58     	; 0x157e <myatoi+0x70>
    1544:	f8 01       	movw	r30, r16
    }
    
    for(n = 0; a[n] >= '0' && a[n] <= '9'; n++) i = i*10 + a[n] - 48;
    1546:	e8 0f       	add	r30, r24
    1548:	f1 1d       	adc	r31, r1
    154a:	90 81       	ld	r25, Z
    154c:	40 ed       	ldi	r20, 0xD0	; 208
    154e:	49 0f       	add	r20, r25
    1550:	4a 30       	cpi	r20, 0x0A	; 10
    1552:	60 f4       	brcc	.+24     	; 0x156c <myatoi+0x5e>
    1554:	b9 01       	movw	r22, r18
    1556:	56 9f       	mul	r21, r22
    1558:	90 01       	movw	r18, r0
    155a:	57 9f       	mul	r21, r23
    155c:	30 0d       	add	r19, r0
    155e:	11 24       	eor	r1, r1
    1560:	20 53       	subi	r18, 0x30	; 48
    1562:	31 09       	sbc	r19, r1
    1564:	29 0f       	add	r18, r25
    1566:	31 1d       	adc	r19, r1
    1568:	8f 5f       	subi	r24, 0xFF	; 255
    156a:	ec cf       	rjmp	.-40     	; 0x1544 <myatoi+0x36>
    156c:	2f 3f       	cpi	r18, 0xFF	; 255
    
    if (i > 255) *valid = NUM_INT;
    156e:	31 05       	cpc	r19, r1
    1570:	21 f0       	breq	.+8      	; 0x157a <myatoi+0x6c>
    1572:	18 f0       	brcs	.+6      	; 0x157a <myatoi+0x6c>
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	88 83       	st	Y, r24
    1578:	01 c0       	rjmp	.+2      	; 0x157c <myatoi+0x6e>
    157a:	18 82       	st	Y, r1
    else *valid = NUM_VALID;
    157c:	c9 01       	movw	r24, r18
    157e:	df 91       	pop	r29
    
    return i;
}
    1580:	cf 91       	pop	r28
    1582:	1f 91       	pop	r17
    1584:	0f 91       	pop	r16
    1586:	08 95       	ret

00001588 <toUpper>:
    1588:	30 e0       	ldi	r19, 0x00	; 0
}

void toUpper(uint8_t *str) {
    uint8_t i;
    
    for (i = 0; str[i] != NULL; i++) {
    158a:	fc 01       	movw	r30, r24
    158c:	e3 0f       	add	r30, r19
    158e:	f1 1d       	adc	r31, r1
    1590:	20 81       	ld	r18, Z
    1592:	22 23       	and	r18, r18
    1594:	41 f0       	breq	.+16     	; 0x15a6 <toUpper+0x1e>
        if (str[i] >= 'a' && str[i] <= 'z') str[i] -= 'a' - 'A';
    1596:	4f e9       	ldi	r20, 0x9F	; 159
    1598:	42 0f       	add	r20, r18
    159a:	4a 31       	cpi	r20, 0x1A	; 26
    159c:	10 f4       	brcc	.+4      	; 0x15a2 <toUpper+0x1a>
    159e:	20 52       	subi	r18, 0x20	; 32
    15a0:	20 83       	st	Z, r18
}

void toUpper(uint8_t *str) {
    uint8_t i;
    
    for (i = 0; str[i] != NULL; i++) {
    15a2:	3f 5f       	subi	r19, 0xFF	; 255
    15a4:	f2 cf       	rjmp	.-28     	; 0x158a <toUpper+0x2>
        if (str[i] >= 'a' && str[i] <= 'z') str[i] -= 'a' - 'A';
    }
}
    15a6:	08 95       	ret

000015a8 <findCommand>:
    else *valid = NUM_VALID;
    
    return i;
}

cmd findCommand(uint8_t* command) {
    15a8:	cf 93       	push	r28
    15aa:	df 93       	push	r29
    15ac:	ec 01       	movw	r28, r24
    toUpper(command);
    15ae:	ec df       	rcall	.-40     	; 0x1588 <toUpper>
    15b0:	6d e2       	ldi	r22, 0x2D	; 45
    
    if (!mystrcmp((uint8_t*)command, (uint8_t*)RREG_CMD)) return CMD_RREG;
    15b2:	73 e0       	ldi	r23, 0x03	; 3
    15b4:	ce 01       	movw	r24, r28
    15b6:	51 df       	rcall	.-350    	; 0x145a <mystrcmp>
    15b8:	88 23       	and	r24, r24
    15ba:	29 f1       	breq	.+74     	; 0x1606 <findCommand+0x5e>
    15bc:	62 e3       	ldi	r22, 0x32	; 50
    15be:	73 e0       	ldi	r23, 0x03	; 3
    else if (!mystrcmp((uint8_t*)command, (uint8_t*)ADD_CMD)) return CMD_ADD;
    15c0:	ce 01       	movw	r24, r28
    15c2:	4b df       	rcall	.-362    	; 0x145a <mystrcmp>
    15c4:	88 23       	and	r24, r24
    15c6:	09 f1       	breq	.+66     	; 0x160a <findCommand+0x62>
    15c8:	66 e3       	ldi	r22, 0x36	; 54
    15ca:	73 e0       	ldi	r23, 0x03	; 3
    15cc:	ce 01       	movw	r24, r28
    else if (!mystrcmp((uint8_t*)command, (uint8_t*)RM_CMD)) return CMD_RM;
    15ce:	45 df       	rcall	.-374    	; 0x145a <mystrcmp>
    15d0:	88 23       	and	r24, r24
    15d2:	e9 f0       	breq	.+58     	; 0x160e <findCommand+0x66>
    15d4:	69 e3       	ldi	r22, 0x39	; 57
    15d6:	73 e0       	ldi	r23, 0x03	; 3
    15d8:	ce 01       	movw	r24, r28
    15da:	3f df       	rcall	.-386    	; 0x145a <mystrcmp>
    else if (!mystrcmp((uint8_t*)command, (uint8_t*)STOP_CMD)) return CMD_STOP;
    15dc:	88 23       	and	r24, r24
    15de:	c9 f0       	breq	.+50     	; 0x1612 <findCommand+0x6a>
    15e0:	6e e3       	ldi	r22, 0x3E	; 62
    15e2:	73 e0       	ldi	r23, 0x03	; 3
    15e4:	ce 01       	movw	r24, r28
    15e6:	39 df       	rcall	.-398    	; 0x145a <mystrcmp>
    15e8:	88 23       	and	r24, r24
    else if (!mystrcmp((uint8_t*)command, (uint8_t*)START_CMD)) return CMD_START;
    15ea:	a9 f0       	breq	.+42     	; 0x1616 <findCommand+0x6e>
    15ec:	64 e4       	ldi	r22, 0x44	; 68
    15ee:	73 e0       	ldi	r23, 0x03	; 3
    15f0:	ce 01       	movw	r24, r28
    15f2:	33 df       	rcall	.-410    	; 0x145a <mystrcmp>
    15f4:	88 23       	and	r24, r24
    15f6:	89 f0       	breq	.+34     	; 0x161a <findCommand+0x72>
    else if (!mystrcmp((uint8_t*)command, (uint8_t*)QRY_CMD)) return CMD_QRY;
    15f8:	68 e4       	ldi	r22, 0x48	; 72
    15fa:	73 e0       	ldi	r23, 0x03	; 3
    15fc:	ce 01       	movw	r24, r28
    15fe:	2d df       	rcall	.-422    	; 0x145a <mystrcmp>
    1600:	88 23       	and	r24, r24
    1602:	69 f0       	breq	.+26     	; 0x161e <findCommand+0x76>
    1604:	0d c0       	rjmp	.+26     	; 0x1620 <findCommand+0x78>
    else if (!mystrcmp((uint8_t*)command, (uint8_t*)READ_CMD)) return CMD_READ;
    1606:	81 e0       	ldi	r24, 0x01	; 1
    1608:	0b c0       	rjmp	.+22     	; 0x1620 <findCommand+0x78>
    160a:	82 e0       	ldi	r24, 0x02	; 2
    160c:	09 c0       	rjmp	.+18     	; 0x1620 <findCommand+0x78>
    160e:	83 e0       	ldi	r24, 0x03	; 3
    1610:	07 c0       	rjmp	.+14     	; 0x1620 <findCommand+0x78>
    1612:	84 e0       	ldi	r24, 0x04	; 4
    1614:	05 c0       	rjmp	.+10     	; 0x1620 <findCommand+0x78>
}

cmd findCommand(uint8_t* command) {
    toUpper(command);
    
    if (!mystrcmp((uint8_t*)command, (uint8_t*)RREG_CMD)) return CMD_RREG;
    1616:	85 e0       	ldi	r24, 0x05	; 5
    1618:	03 c0       	rjmp	.+6      	; 0x1620 <findCommand+0x78>
    else if (!mystrcmp((uint8_t*)command, (uint8_t*)ADD_CMD)) return CMD_ADD;
    161a:	86 e0       	ldi	r24, 0x06	; 6
    161c:	01 c0       	rjmp	.+2      	; 0x1620 <findCommand+0x78>
    else if (!mystrcmp((uint8_t*)command, (uint8_t*)RM_CMD)) return CMD_RM;
    161e:	87 e0       	ldi	r24, 0x07	; 7
    1620:	df 91       	pop	r29
    else if (!mystrcmp((uint8_t*)command, (uint8_t*)STOP_CMD)) return CMD_STOP;
    1622:	cf 91       	pop	r28
    1624:	08 95       	ret

00001626 <readADC1>:
 * Date Created: 06/01/2016
 * Input: None
 * Output: uint8_t
 *
 * Description: This function reads the ADC value and sends it to the function addVal (edisonCtrl) returning what addVal returns. */
void readADC1(uint8_t *value) {
    1626:	1f 93       	push	r17
    1628:	cf 93       	push	r28
    162a:	df 93       	push	r29
    162c:	ec 01       	movw	r28, r24
    uint8_t temp = 1, i = 0;
    
    while (i++ < 2 && temp != 0) {
    162e:	13 e0       	ldi	r17, 0x03	; 3
 * Input: None
 * Output: uint8_t
 *
 * Description: This function reads the ADC value and sends it to the function addVal (edisonCtrl) returning what addVal returns. */
void readADC1(uint8_t *value) {
    uint8_t temp = 1, i = 0;
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	11 50       	subi	r17, 0x01	; 1
    
    while (i++ < 2 && temp != 0) {
    1634:	b9 f0       	breq	.+46     	; 0x1664 <readADC1+0x3e>
    1636:	88 23       	and	r24, r24
    1638:	a9 f0       	breq	.+42     	; 0x1664 <readADC1+0x3e>
        SPI_txrx(READ_ADC1);
    163a:	82 e1       	ldi	r24, 0x12	; 18
    163c:	2c d1       	rcall	.+600    	; 0x1896 <SPI_txrx>
    163e:	80 e0       	ldi	r24, 0x00	; 0
    
        value[0] = SPI_txrx(0);
    1640:	2a d1       	rcall	.+596    	; 0x1896 <SPI_txrx>
    1642:	88 83       	st	Y, r24
    1644:	80 e0       	ldi	r24, 0x00	; 0
    1646:	27 d1       	rcall	.+590    	; 0x1896 <SPI_txrx>
        value[1] = SPI_txrx(0);
    1648:	89 83       	std	Y+1, r24	; 0x01
    164a:	80 e0       	ldi	r24, 0x00	; 0
    164c:	24 d1       	rcall	.+584    	; 0x1896 <SPI_txrx>
    164e:	8a 83       	std	Y+2, r24	; 0x02
        value[2] = SPI_txrx(0);
    1650:	80 e0       	ldi	r24, 0x00	; 0
    1652:	21 d1       	rcall	.+578    	; 0x1896 <SPI_txrx>
    1654:	8b 83       	std	Y+3, r24	; 0x03
    1656:	80 e0       	ldi	r24, 0x00	; 0
        value[3] = SPI_txrx(0);
    1658:	1e d1       	rcall	.+572    	; 0x1896 <SPI_txrx>
    165a:	8c 83       	std	Y+4, r24	; 0x04
    165c:	65 e0       	ldi	r22, 0x05	; 5
    165e:	ce 01       	movw	r24, r28
        value[4] = SPI_txrx(0);
    1660:	1a df       	rcall	.-460    	; 0x1496 <crc8>
    1662:	e7 cf       	rjmp	.-50     	; 0x1632 <readADC1+0xc>
    1664:	df 91       	pop	r29
    1666:	cf 91       	pop	r28
        
        temp = crc8(value,5);
    1668:	1f 91       	pop	r17
    166a:	08 95       	ret

0000166c <initGPIO>:
    166c:	84 b1       	in	r24, 0x04	; 4
    166e:	14 b8       	out	0x04, r1	; 4
    1670:	08 95       	ret

00001672 <turnOnOff>:
   }
}
    1672:	88 23       	and	r24, r24
    1674:	11 f0       	breq	.+4      	; 0x167a <turnOnOff+0x8>
    1676:	2d 9a       	sbi	0x05, 5	; 5
    1678:	08 95       	ret
 * Input: val
 * Output: None
 *
 * Description: This function toggles the powerdown/reset pin on the ADC dependent on the input variable val. */
void turnOnOff(uint8_t val) {
    (val) ? (PORTB |= _BV(PWDN_PIN)) : (PORTB &= ~_BV(PWDN_PIN));
    167a:	2d 98       	cbi	0x05, 5	; 5
    167c:	08 95       	ret

0000167e <startStop>:
 * Input: val
 * Output: None
 *
 * Description: This function toggles the start pin on the ADC dependent on the input variable val. */
void startStop(uint8_t val) {
    (val) ? (PORTB |= _BV(START_PIN)) : (PORTB &= ~_BV(START_PIN));
    167e:	88 23       	and	r24, r24
    1680:	11 f0       	breq	.+4      	; 0x1686 <startStop+0x8>
    1682:	2e 9a       	sbi	0x05, 6	; 5
    1684:	08 95       	ret
    1686:	2e 98       	cbi	0x05, 6	; 5
    1688:	08 95       	ret

0000168a <readReg>:
 * Input: reg
 * Output: uint8_t
 *
 * Description: This function reads from the ADC register (reg) and returns the value. */
uint8_t readReg(uint8_t reg) {
    SPI_txrx(READ_REG + reg);
    168a:	80 5e       	subi	r24, 0xE0	; 224
    168c:	04 d1       	rcall	.+520    	; 0x1896 <SPI_txrx>
    168e:	80 e0       	ldi	r24, 0x00	; 0
    SPI_txrx(0);
    1690:	02 d1       	rcall	.+516    	; 0x1896 <SPI_txrx>
    1692:	80 e0       	ldi	r24, 0x00	; 0
    1694:	00 c1       	rjmp	.+512    	; 0x1896 <SPI_txrx>

00001696 <writeReg>:
    return SPI_txrx(0);
    1696:	1f 93       	push	r17
    1698:	cf 93       	push	r28
    169a:	df 93       	push	r29
 * Date Created: 06/01/2016
 * Input: reg, value
 * Output: None
 *
 * Description: This function writes the ADC register (reg) with the data from the variable (value). */
void writeReg(uint8_t reg, uint8_t value) {
    169c:	d8 2f       	mov	r29, r24
    169e:	c6 2f       	mov	r28, r22
    while (value != readReg(reg)) {
        SPI_txrx(WRITE_REG + reg);
    16a0:	10 e4       	ldi	r17, 0x40	; 64
    16a2:	18 0f       	add	r17, r24
 * Input: reg, value
 * Output: None
 *
 * Description: This function writes the ADC register (reg) with the data from the variable (value). */
void writeReg(uint8_t reg, uint8_t value) {
    while (value != readReg(reg)) {
    16a4:	8d 2f       	mov	r24, r29
    16a6:	f1 df       	rcall	.-30     	; 0x168a <readReg>
    16a8:	c8 17       	cp	r28, r24
    16aa:	39 f0       	breq	.+14     	; 0x16ba <writeReg+0x24>
    16ac:	81 2f       	mov	r24, r17
        SPI_txrx(WRITE_REG + reg);
    16ae:	f3 d0       	rcall	.+486    	; 0x1896 <SPI_txrx>
    16b0:	80 e0       	ldi	r24, 0x00	; 0
    16b2:	f1 d0       	rcall	.+482    	; 0x1896 <SPI_txrx>
        SPI_txrx(0);
    16b4:	8c 2f       	mov	r24, r28
    16b6:	ef d0       	rcall	.+478    	; 0x1896 <SPI_txrx>
    16b8:	f5 cf       	rjmp	.-22     	; 0x16a4 <writeReg+0xe>
        SPI_txrx(value);
    16ba:	df 91       	pop	r29
    16bc:	cf 91       	pop	r28
    16be:	1f 91       	pop	r17
    16c0:	08 95       	ret

000016c2 <changeChannel>:
    }
}
    16c2:	60 91 5c 04 	lds	r22, 0x045C
    16c6:	6f 70       	andi	r22, 0x0F	; 15
    16c8:	90 e1       	ldi	r25, 0x10	; 16
 * Output: None
 *
 * Description: This function changes the channel on the ADC to the input channel. */
void changeChannel (uint8_t channel) {
    inmux &= 0x0F;
    inmux += channel*16;
    16ca:	89 9f       	mul	r24, r25
    16cc:	60 0d       	add	r22, r0
    16ce:	11 24       	eor	r1, r1
    16d0:	60 93 5c 04 	sts	0x045C, r22
    writeReg(INMUX_REG, inmux);
    16d4:	86 e0       	ldi	r24, 0x06	; 6
    16d6:	df cf       	rjmp	.-66     	; 0x1696 <writeReg>

000016d8 <changeSampleRate>:
    16d8:	60 91 5b 04 	lds	r22, 0x045B
 * Output: None
 *
 * Description: This function sets the ADC to the sample rate given by the input rate. */
void changeSampleRate (uint8_t rate) {
    mode2 &= 0xF0;
    mode2 += 15;
    16dc:	6f 60       	ori	r22, 0x0F	; 15
    16de:	60 93 5b 04 	sts	0x045B, r22
    writeReg(MODE2_REG, mode2);
    16e2:	85 e0       	ldi	r24, 0x05	; 5
    16e4:	d8 cf       	rjmp	.-80     	; 0x1696 <writeReg>

000016e6 <initReg>:
    16e6:	cf 93       	push	r28
 * Date Created: 06/01/2016
 * Input: rate, channel
 * Output: None
 *
 * Description: This function initializes the ADC with the given rate and channel. */
void initReg(uint8_t rate, uint8_t channel) {
    16e8:	df 93       	push	r29
    16ea:	d8 2f       	mov	r29, r24
    16ec:	c6 2f       	mov	r28, r22
    inmux = INMUX_REG_INIT;
    16ee:	8a e0       	ldi	r24, 0x0A	; 10
    16f0:	80 93 5c 04 	sts	0x045C, r24
    mode2 = MODE2_REG_INIT;
    16f4:	8f e8       	ldi	r24, 0x8F	; 143
    16f6:	80 93 5b 04 	sts	0x045B, r24
    
    writeReg(INTERFACE_REG, INTERFACE_REG_INIT);
    16fa:	68 e0       	ldi	r22, 0x08	; 8
    16fc:	82 e0       	ldi	r24, 0x02	; 2
    16fe:	cb df       	rcall	.-106    	; 0x1696 <writeReg>
    1700:	60 e9       	ldi	r22, 0x90	; 144
    //writeReg(MODE0_REG, MODE0_REG_INIT);
    writeReg(MODE1_REG, MODE1_REG_INIT);
    1702:	84 e0       	ldi	r24, 0x04	; 4
    1704:	c8 df       	rcall	.-112    	; 0x1696 <writeReg>
    1706:	8d 2f       	mov	r24, r29
    1708:	e7 df       	rcall	.-50     	; 0x16d8 <changeSampleRate>
    
    changeSampleRate(rate);
    170a:	8c 2f       	mov	r24, r28
    170c:	df 91       	pop	r29
    170e:	cf 91       	pop	r28
    changeChannel(channel);
    1710:	d8 cf       	rjmp	.-80     	; 0x16c2 <changeChannel>

00001712 <initADC>:
}
    1712:	ac df       	rcall	.-168    	; 0x166c <initGPIO>
    1714:	81 e0       	ldi	r24, 0x01	; 1
    writeReg(INTERFACE_REG, INTERFACE_REG_INIT);
    //writeReg(MODE0_REG, MODE0_REG_INIT);
    writeReg(MODE1_REG, MODE1_REG_INIT);
    
    changeSampleRate(rate);
    changeChannel(channel);
    1716:	ad df       	rcall	.-166    	; 0x1672 <turnOnOff>
    1718:	80 e0       	ldi	r24, 0x00	; 0
 * Output: None
 *
 * Description: This function initializes the ADC. */
void initADC() {
    initGPIO();
    turnOnOff(1);
    171a:	b1 df       	rcall	.-158    	; 0x167e <startStop>
    startStop(0);
    171c:	b3 d0       	rcall	.+358    	; 0x1884 <SPI_init>
    171e:	8f e3       	ldi	r24, 0x3F	; 63
    1720:	9c e9       	ldi	r25, 0x9C	; 156
    SPI_init();
    1722:	01 97       	sbiw	r24, 0x01	; 1
    1724:	f1 f7       	brne	.-4      	; 0x1722 <initADC+0x10>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1726:	00 c0       	rjmp	.+0      	; 0x1728 <initADC+0x16>
    1728:	00 00       	nop
    172a:	60 e0       	ldi	r22, 0x00	; 0
    172c:	8f e0       	ldi	r24, 0x0F	; 15
    172e:	db cf       	rjmp	.-74     	; 0x16e6 <initReg>

00001730 <determineADCRate>:
    1730:	cf 92       	push	r12
    _delay_ms(10);
    initReg(15,0);
    1732:	df 92       	push	r13
    1734:	ef 92       	push	r14
    1736:	ff 92       	push	r15
    1738:	6b 01       	movw	r12, r22
}

uint8_t determineADCRate(float rate) {
    173a:	7c 01       	movw	r14, r24
    if (rate < (float) RATE_100) {
    173c:	20 e0       	ldi	r18, 0x00	; 0
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	48 ec       	ldi	r20, 0xC8	; 200
    1742:	52 e4       	ldi	r21, 0x42	; 66
    1744:	ca d6       	rcall	.+3476   	; 0x24da <__cmpsf2>
    1746:	87 ff       	sbrs	r24, 7
    1748:	4c c0       	rjmp	.+152    	; 0x17e2 <determineADCRate+0xb2>
    174a:	28 ef       	ldi	r18, 0xF8	; 248
        if (rate < (float) RATE_16_6) {
    174c:	33 e5       	ldi	r19, 0x53	; 83
    174e:	45 e8       	ldi	r20, 0x85	; 133
    1750:	51 e4       	ldi	r21, 0x41	; 65
    1752:	c7 01       	movw	r24, r14
    1754:	b6 01       	movw	r22, r12
    1756:	c1 d6       	rcall	.+3458   	; 0x24da <__cmpsf2>
    1758:	87 ff       	sbrs	r24, 7
    175a:	22 c0       	rjmp	.+68     	; 0x17a0 <determineADCRate+0x70>
    175c:	20 e0       	ldi	r18, 0x00	; 0
    175e:	30 e0       	ldi	r19, 0x00	; 0
            if (rate < (float) RATE_5) return (rate < (float) RATE_2_5) ? DATA_RATE_2_5 : DATA_RATE_5;
    1760:	40 ea       	ldi	r20, 0xA0	; 160
    1762:	50 e4       	ldi	r21, 0x40	; 64
    1764:	c7 01       	movw	r24, r14
    1766:	b6 01       	movw	r22, r12
    1768:	b8 d6       	rcall	.+3440   	; 0x24da <__cmpsf2>
    176a:	87 ff       	sbrs	r24, 7
    176c:	0d c0       	rjmp	.+26     	; 0x1788 <determineADCRate+0x58>
    176e:	20 e0       	ldi	r18, 0x00	; 0
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	40 e2       	ldi	r20, 0x20	; 32
    1774:	50 e4       	ldi	r21, 0x40	; 64
    1776:	c7 01       	movw	r24, r14
    1778:	b6 01       	movw	r22, r12
    177a:	af d6       	rcall	.+3422   	; 0x24da <__cmpsf2>
    177c:	88 1f       	adc	r24, r24
    177e:	88 27       	eor	r24, r24
    1780:	88 1f       	adc	r24, r24
    1782:	91 e0       	ldi	r25, 0x01	; 1
    1784:	89 27       	eor	r24, r25
    1786:	79 c0       	rjmp	.+242    	; 0x187a <determineADCRate+0x14a>
    1788:	20 e0       	ldi	r18, 0x00	; 0
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	40 e2       	ldi	r20, 0x20	; 32
    178e:	51 e4       	ldi	r21, 0x41	; 65
            else return (rate < (float) RATE_10) ? DATA_RATE_10 : DATA_RATE_16_6;
    1790:	c7 01       	movw	r24, r14
    1792:	b6 01       	movw	r22, r12
    1794:	a2 d6       	rcall	.+3396   	; 0x24da <__cmpsf2>
    1796:	88 1f       	adc	r24, r24
    1798:	88 27       	eor	r24, r24
    179a:	88 1f       	adc	r24, r24
    179c:	93 e0       	ldi	r25, 0x03	; 3
    179e:	6b c0       	rjmp	.+214    	; 0x1876 <determineADCRate+0x146>
    17a0:	20 e0       	ldi	r18, 0x00	; 0
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	48 e4       	ldi	r20, 0x48	; 72
    17a6:	52 e4       	ldi	r21, 0x42	; 66
    17a8:	c7 01       	movw	r24, r14
        }
        else {
            if (rate < (float) RATE_50) return (rate < (float) RATE_20) ? DATA_RATE_20 : DATA_RATE_50;
    17aa:	b6 01       	movw	r22, r12
    17ac:	96 d6       	rcall	.+3372   	; 0x24da <__cmpsf2>
    17ae:	87 ff       	sbrs	r24, 7
    17b0:	0c c0       	rjmp	.+24     	; 0x17ca <determineADCRate+0x9a>
    17b2:	20 e0       	ldi	r18, 0x00	; 0
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	40 ea       	ldi	r20, 0xA0	; 160
    17b8:	51 e4       	ldi	r21, 0x41	; 65
    17ba:	c7 01       	movw	r24, r14
    17bc:	b6 01       	movw	r22, r12
    17be:	8d d6       	rcall	.+3354   	; 0x24da <__cmpsf2>
    17c0:	88 1f       	adc	r24, r24
    17c2:	88 27       	eor	r24, r24
    17c4:	88 1f       	adc	r24, r24
    17c6:	95 e0       	ldi	r25, 0x05	; 5
    17c8:	56 c0       	rjmp	.+172    	; 0x1876 <determineADCRate+0x146>
    17ca:	20 e0       	ldi	r18, 0x00	; 0
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	40 e7       	ldi	r20, 0x70	; 112
    17d0:	52 e4       	ldi	r21, 0x42	; 66
    17d2:	c7 01       	movw	r24, r14
    17d4:	b6 01       	movw	r22, r12
    17d6:	81 d6       	rcall	.+3330   	; 0x24da <__cmpsf2>
            else return (rate < (float) RATE_60) ? DATA_RATE_60 : DATA_RATE_100;
    17d8:	88 1f       	adc	r24, r24
    17da:	88 27       	eor	r24, r24
    17dc:	88 1f       	adc	r24, r24
    17de:	97 e0       	ldi	r25, 0x07	; 7
    17e0:	4a c0       	rjmp	.+148    	; 0x1876 <determineADCRate+0x146>
    17e2:	20 e0       	ldi	r18, 0x00	; 0
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	46 e9       	ldi	r20, 0x96	; 150
    17e8:	55 e4       	ldi	r21, 0x45	; 69
    17ea:	c7 01       	movw	r24, r14
    17ec:	b6 01       	movw	r22, r12
    17ee:	75 d6       	rcall	.+3306   	; 0x24da <__cmpsf2>
    17f0:	87 ff       	sbrs	r24, 7
        }
    }
    else {
        if (rate < (float) RATE_4800) {
    17f2:	21 c0       	rjmp	.+66     	; 0x1836 <determineADCRate+0x106>
    17f4:	20 e0       	ldi	r18, 0x00	; 0
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	46 e9       	ldi	r20, 0x96	; 150
    17fa:	54 e4       	ldi	r21, 0x44	; 68
    17fc:	c7 01       	movw	r24, r14
    17fe:	b6 01       	movw	r22, r12
    1800:	6c d6       	rcall	.+3288   	; 0x24da <__cmpsf2>
    1802:	87 ff       	sbrs	r24, 7
    1804:	0c c0       	rjmp	.+24     	; 0x181e <determineADCRate+0xee>
            if (rate < (float) RATE_1200) return (rate < (float) RATE_400) ? DATA_RATE_400 : DATA_RATE_1200;
    1806:	20 e0       	ldi	r18, 0x00	; 0
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	48 ec       	ldi	r20, 0xC8	; 200
    180c:	53 e4       	ldi	r21, 0x43	; 67
    180e:	c7 01       	movw	r24, r14
    1810:	b6 01       	movw	r22, r12
    1812:	63 d6       	rcall	.+3270   	; 0x24da <__cmpsf2>
    1814:	88 1f       	adc	r24, r24
    1816:	88 27       	eor	r24, r24
    1818:	88 1f       	adc	r24, r24
    181a:	99 e0       	ldi	r25, 0x09	; 9
    181c:	2c c0       	rjmp	.+88     	; 0x1876 <determineADCRate+0x146>
    181e:	20 e0       	ldi	r18, 0x00	; 0
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	46 e1       	ldi	r20, 0x16	; 22
    1824:	55 e4       	ldi	r21, 0x45	; 69
    1826:	c7 01       	movw	r24, r14
    1828:	b6 01       	movw	r22, r12
    182a:	57 d6       	rcall	.+3246   	; 0x24da <__cmpsf2>
    182c:	88 1f       	adc	r24, r24
    182e:	88 27       	eor	r24, r24
    1830:	88 1f       	adc	r24, r24
    1832:	9b e0       	ldi	r25, 0x0B	; 11
            else return (rate < (float) RATE_2400) ? DATA_RATE_2400 : DATA_RATE_4800;
    1834:	20 c0       	rjmp	.+64     	; 0x1876 <determineADCRate+0x146>
    1836:	20 e0       	ldi	r18, 0x00	; 0
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	41 e6       	ldi	r20, 0x61	; 97
    183c:	56 e4       	ldi	r21, 0x46	; 70
    183e:	c7 01       	movw	r24, r14
    1840:	b6 01       	movw	r22, r12
    1842:	4b d6       	rcall	.+3222   	; 0x24da <__cmpsf2>
    1844:	87 ff       	sbrs	r24, 7
    1846:	0c c0       	rjmp	.+24     	; 0x1860 <determineADCRate+0x130>
    1848:	20 e0       	ldi	r18, 0x00	; 0
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	41 ee       	ldi	r20, 0xE1	; 225
        }
        else {
            if (rate < (float) RATE_14400) return (rate < (float) RATE_7200) ? DATA_RATE_7200 : DATA_RATE_14400;
    184e:	55 e4       	ldi	r21, 0x45	; 69
    1850:	c7 01       	movw	r24, r14
    1852:	b6 01       	movw	r22, r12
    1854:	42 d6       	rcall	.+3204   	; 0x24da <__cmpsf2>
    1856:	88 1f       	adc	r24, r24
    1858:	88 27       	eor	r24, r24
    185a:	88 1f       	adc	r24, r24
    185c:	9d e0       	ldi	r25, 0x0D	; 13
    185e:	0b c0       	rjmp	.+22     	; 0x1876 <determineADCRate+0x146>
    1860:	20 e0       	ldi	r18, 0x00	; 0
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	46 e9       	ldi	r20, 0x96	; 150
    1866:	56 e4       	ldi	r21, 0x46	; 70
    1868:	c7 01       	movw	r24, r14
    186a:	b6 01       	movw	r22, r12
    186c:	36 d6       	rcall	.+3180   	; 0x24da <__cmpsf2>
    186e:	88 1f       	adc	r24, r24
    1870:	88 27       	eor	r24, r24
    1872:	88 1f       	adc	r24, r24
    1874:	9f e0       	ldi	r25, 0x0F	; 15
    1876:	98 1b       	sub	r25, r24
    1878:	89 2f       	mov	r24, r25
    187a:	ff 90       	pop	r15
            else return (rate < (float) RATE_19200) ? DATA_RATE_19200 : DATA_RATE_38400;
    187c:	ef 90       	pop	r14
    187e:	df 90       	pop	r13
    1880:	cf 90       	pop	r12
    1882:	08 95       	ret

00001884 <SPI_init>:
 * Output: None
 *
 * Description: This function initializes the SPI. */
void SPI_init(void) {
    /* Set MOSI and SCK output, all others input */
    DDRB = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_SS);
    1884:	87 e0       	ldi	r24, 0x07	; 7
    1886:	84 b9       	out	0x04, r24	; 4
    PORTB |= SS;
    1888:	85 b1       	in	r24, 0x05	; 5
    188a:	85 b9       	out	0x05, r24	; 5
    /* Enable SPI, Master, set clock rate fck/2 */
    SPCR = (1<<SPE)|(1<<MSTR)|(1<<CPHA);
    188c:	84 e5       	ldi	r24, 0x54	; 84
    188e:	8c bd       	out	0x2c, r24	; 44
    SPSR = (1<<SPI2X);
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	8d bd       	out	0x2d, r24	; 45
    1894:	08 95       	ret

00001896 <SPI_txrx>:
 * Input: cData
 * Output: uint8_t
 *
 * Description: This function reads and writes to the SPI bus, returning any data received. */
uint8_t SPI_txrx(uint8_t cData) {
    PORTB &= ~_BV(SS);
    1896:	28 98       	cbi	0x05, 0	; 5
    SPDR = cData;
    1898:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1<<SPIF)));
    189a:	0d b4       	in	r0, 0x2d	; 45
    189c:	07 fe       	sbrs	r0, 7
    189e:	fd cf       	rjmp	.-6      	; 0x189a <SPI_txrx+0x4>
    PORTB |= _BV(SS);
    18a0:	28 9a       	sbi	0x05, 0	; 5
    return SPDR;
    18a2:	8e b5       	in	r24, 0x2e	; 46
}
    18a4:	08 95       	ret

000018a6 <findNext>:
}

uint8_t findNext(uint8_t cur) {
    uint8_t n;
    
    for (n = cur+1; (((uint8_t) (1 << n) & (uint8_t) queue->channels) == 0) && (n <= HIGHEST_CHANNEL); n++);
    18a6:	8f 5f       	subi	r24, 0xFF	; 255
    18a8:	e0 91 55 04 	lds	r30, 0x0455
    18ac:	f0 91 56 04 	lds	r31, 0x0456
    18b0:	96 81       	ldd	r25, Z+6	; 0x06
    18b2:	21 e0       	ldi	r18, 0x01	; 1
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	a9 01       	movw	r20, r18
    18b8:	08 2e       	mov	r0, r24
    18ba:	01 c0       	rjmp	.+2      	; 0x18be <findNext+0x18>
    18bc:	44 0f       	add	r20, r20
    18be:	0a 94       	dec	r0
    18c0:	ea f7       	brpl	.-6      	; 0x18bc <findNext+0x16>
    18c2:	49 23       	and	r20, r25
    18c4:	39 f0       	breq	.+14     	; 0x18d4 <findNext+0x2e>
    if (n == HIGHEST_CHANNEL + 1) {
    18c6:	89 30       	cpi	r24, 0x09	; 9
    18c8:	c1 f4       	brne	.+48     	; 0x18fa <findNext+0x54>
    18ca:	20 e0       	ldi	r18, 0x00	; 0
    18cc:	30 e0       	ldi	r19, 0x00	; 0
        for (n = 0; (((uint8_t) (1 << n) & (uint8_t) queue->channels) == 0) && (n <= HIGHEST_CHANNEL); n++);
    18ce:	41 e0       	ldi	r20, 0x01	; 1
    18d0:	50 e0       	ldi	r21, 0x00	; 0
    18d2:	04 c0       	rjmp	.+8      	; 0x18dc <findNext+0x36>
}

uint8_t findNext(uint8_t cur) {
    uint8_t n;
    
    for (n = cur+1; (((uint8_t) (1 << n) & (uint8_t) queue->channels) == 0) && (n <= HIGHEST_CHANNEL); n++);
    18d4:	89 30       	cpi	r24, 0x09	; 9
    18d6:	b8 f7       	brcc	.-18     	; 0x18c6 <findNext+0x20>
    18d8:	8f 5f       	subi	r24, 0xFF	; 255
    18da:	ed cf       	rjmp	.-38     	; 0x18b6 <findNext+0x10>
    18dc:	82 2f       	mov	r24, r18
    if (n == HIGHEST_CHANNEL + 1) {
        for (n = 0; (((uint8_t) (1 << n) & (uint8_t) queue->channels) == 0) && (n <= HIGHEST_CHANNEL); n++);
    18de:	ba 01       	movw	r22, r20
    18e0:	02 2e       	mov	r0, r18
    18e2:	01 c0       	rjmp	.+2      	; 0x18e6 <findNext+0x40>
    18e4:	66 0f       	add	r22, r22
    18e6:	0a 94       	dec	r0
    18e8:	ea f7       	brpl	.-6      	; 0x18e4 <findNext+0x3e>
    18ea:	69 23       	and	r22, r25
    18ec:	31 f4       	brne	.+12     	; 0x18fa <findNext+0x54>
    18ee:	2f 5f       	subi	r18, 0xFF	; 255
    18f0:	3f 4f       	sbci	r19, 0xFF	; 255
    18f2:	2a 30       	cpi	r18, 0x0A	; 10
    18f4:	31 05       	cpc	r19, r1
    18f6:	91 f7       	brne	.-28     	; 0x18dc <findNext+0x36>
    18f8:	89 e0       	ldi	r24, 0x09	; 9
    }
    return n;
}
    18fa:	08 95       	ret

000018fc <stop>:
    }
    return ss;
}

startS stop() {
    return (ss == STOP) ? STOP : (ss = YIELD);
    18fc:	80 91 18 01 	lds	r24, 0x0118
    1900:	81 30       	cpi	r24, 0x01	; 1
    1902:	21 f0       	breq	.+8      	; 0x190c <stop+0x10>
    1904:	82 e0       	ldi	r24, 0x02	; 2
    1906:	80 93 18 01 	sts	0x0118, r24
    190a:	08 95       	ret
    190c:	81 e0       	ldi	r24, 0x01	; 1
}
    190e:	08 95       	ret

00001910 <interruptEnableDisable>:
    
    if (ss != GO) interruptEnableDisable(1);
}

void interruptEnableDisable(uint8_t ed) {
    if(ed) {
    1910:	88 23       	and	r24, r24
    1912:	99 f0       	breq	.+38     	; 0x193a <interruptEnableDisable+0x2a>
        //Pin interrupt
        PCICR |= (1 << PCIE0);
    1914:	80 91 68 00 	lds	r24, 0x0068
    1918:	81 60       	ori	r24, 0x01	; 1
    191a:	80 93 68 00 	sts	0x0068, r24
        PCMSK0 |= (1 << PCINT7);
    191e:	80 91 6b 00 	lds	r24, 0x006B
    1922:	80 68       	ori	r24, 0x80	; 128
    1924:	80 93 6b 00 	sts	0x006B, r24
        //Timer interrupt
        TIMSK1 |= (1 << OCIE1A);
    1928:	80 91 6f 00 	lds	r24, 0x006F
    192c:	82 60       	ori	r24, 0x02	; 2
    192e:	80 93 6f 00 	sts	0x006F, r24
        ss = GO;
    1932:	83 e0       	ldi	r24, 0x03	; 3
    1934:	80 93 18 01 	sts	0x0118, r24
    1938:	08 95       	ret
    }
    else {
        ss = STOP;
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	80 93 18 01 	sts	0x0118, r24
        PCICR &= (0 << PCIE0);
    1940:	80 91 68 00 	lds	r24, 0x0068
    1944:	10 92 68 00 	sts	0x0068, r1
        PCMSK0 &= (0 << PCINT7);
    1948:	80 91 6b 00 	lds	r24, 0x006B
    194c:	10 92 6b 00 	sts	0x006B, r1
        TIMSK1 &= (0 << OCIE1A);
    1950:	80 91 6f 00 	lds	r24, 0x006F
    1954:	10 92 6f 00 	sts	0x006F, r1
    1958:	08 95       	ret

0000195a <setRate>:

startS stop() {
    return (ss == STOP) ? STOP : (ss = YIELD);
}

void setRate(uint8_t adcRate, uint8_t prescale, uint8_t compareH, uint8_t compareL) {
    195a:	cf 93       	push	r28
    195c:	df 93       	push	r29
    195e:	00 d0       	rcall	.+0      	; 0x1960 <setRate+0x6>
    1960:	1f 92       	push	r1
    1962:	cd b7       	in	r28, 0x3d	; 61
    1964:	de b7       	in	r29, 0x3e	; 62
    changeSampleRate(adcRate);
    1966:	2b 83       	std	Y+3, r18	; 0x03
    1968:	4a 83       	std	Y+2, r20	; 0x02
    196a:	69 83       	std	Y+1, r22	; 0x01
    196c:	b5 de       	rcall	.-662    	; 0x16d8 <changeSampleRate>
    196e:	80 91 81 00 	lds	r24, 0x0081
    
    //External pin toggle
    //DDRB |= (1 << DDB5);
    //TCCR1A |= (1 << COM1A0);
    
    TCCR1B |= (1 << WGM12) + prescale;
    1972:	69 81       	ldd	r22, Y+1	; 0x01
    1974:	68 5f       	subi	r22, 0xF8	; 248
    1976:	68 2b       	or	r22, r24
    1978:	60 93 81 00 	sts	0x0081, r22
    197c:	4a 81       	ldd	r20, Y+2	; 0x02
    
    // set compare value for interrupt
    OCR1AH = compareH;
    197e:	40 93 89 00 	sts	0x0089, r20
    1982:	2b 81       	ldd	r18, Y+3	; 0x03
    OCR1AL = compareL;
    1984:	20 93 88 00 	sts	0x0088, r18
    1988:	10 92 85 00 	sts	0x0085, r1
    TCNT1 = 0;
    198c:	10 92 84 00 	sts	0x0084, r1
    1990:	80 91 18 01 	lds	r24, 0x0118
    
    if (ss != GO) interruptEnableDisable(1);
    1994:	83 30       	cpi	r24, 0x03	; 3
    1996:	39 f0       	breq	.+14     	; 0x19a6 <setRate+0x4c>
    1998:	81 e0       	ldi	r24, 0x01	; 1
    199a:	0f 90       	pop	r0
}
    199c:	0f 90       	pop	r0
    199e:	0f 90       	pop	r0
    19a0:	df 91       	pop	r29
    19a2:	cf 91       	pop	r28
    19a4:	b5 cf       	rjmp	.-150    	; 0x1910 <interruptEnableDisable>
    // set compare value for interrupt
    OCR1AH = compareH;
    OCR1AL = compareL;
    TCNT1 = 0;
    
    if (ss != GO) interruptEnableDisable(1);
    19a6:	0f 90       	pop	r0
    19a8:	0f 90       	pop	r0
}
    19aa:	0f 90       	pop	r0
    19ac:	df 91       	pop	r29
    19ae:	cf 91       	pop	r28
    19b0:	08 95       	ret

000019b2 <nextChannel>:
    19b2:	cf 93       	push	r28
    19b4:	df 93       	push	r29
uint8_t buf1[255];

void nextChannel() {
    uint8_t n, temp;
    
    switch (ss) {
    19b6:	80 91 18 01 	lds	r24, 0x0118
    19ba:	82 30       	cpi	r24, 0x02	; 2
    19bc:	59 f1       	breq	.+86     	; 0x1a14 <nextChannel+0x62>
    19be:	83 30       	cpi	r24, 0x03	; 3
    19c0:	99 f0       	breq	.+38     	; 0x19e8 <nextChannel+0x36>
    19c2:	81 11       	cpse	r24, r1
    19c4:	31 c0       	rjmp	.+98     	; 0x1a28 <nextChannel+0x76>
        case START:
            n = findNext((cur_channel = HIGHEST_CHANNEL));
    19c6:	88 e0       	ldi	r24, 0x08	; 8
    19c8:	80 93 5c 05 	sts	0x055C, r24
    19cc:	6c df       	rcall	.-296    	; 0x18a6 <findNext>
    19ce:	c8 2f       	mov	r28, r24
    19d0:	e0 91 55 04 	lds	r30, 0x0455
            setRate(queue->adcRate, queue->prescale, queue->compareH, queue->compareL);
    19d4:	f0 91 56 04 	lds	r31, 0x0456
    19d8:	25 81       	ldd	r18, Z+5	; 0x05
    19da:	44 81       	ldd	r20, Z+4	; 0x04
    19dc:	63 81       	ldd	r22, Z+3	; 0x03
    19de:	82 81       	ldd	r24, Z+2	; 0x02
    19e0:	bc df       	rcall	.-136    	; 0x195a <setRate>
    19e2:	10 92 5d 05 	sts	0x055D, r1
            read = 0;
    19e6:	20 c0       	rjmp	.+64     	; 0x1a28 <nextChannel+0x76>
    19e8:	d0 91 5c 05 	lds	r29, 0x055C
            break;
        case GO:
            if ((n = findNext(cur_channel)) <= cur_channel) {
    19ec:	8d 2f       	mov	r24, r29
    19ee:	5b df       	rcall	.-330    	; 0x18a6 <findNext>
    19f0:	c8 2f       	mov	r28, r24
    19f2:	d8 17       	cp	r29, r24
    19f4:	c8 f0       	brcs	.+50     	; 0x1a28 <nextChannel+0x76>
    19f6:	65 dc       	rcall	.-1846   	; 0x12c2 <dec>
    19f8:	88 23       	and	r24, r24
    19fa:	a9 f0       	breq	.+42     	; 0x1a26 <nextChannel+0x74>
                if ((temp = dec()) == NULL) interruptEnableDisable(0);
    19fc:	82 30       	cpi	r24, 0x02	; 2
    19fe:	a1 f4       	brne	.+40     	; 0x1a28 <nextChannel+0x76>
    1a00:	e0 91 55 04 	lds	r30, 0x0455
                else if (temp == 2) setRate(queue->adcRate, queue->prescale, queue->compareH, queue->compareL);
    1a04:	f0 91 56 04 	lds	r31, 0x0456
    1a08:	25 81       	ldd	r18, Z+5	; 0x05
    1a0a:	44 81       	ldd	r20, Z+4	; 0x04
    1a0c:	63 81       	ldd	r22, Z+3	; 0x03
    1a0e:	82 81       	ldd	r24, Z+2	; 0x02
    1a10:	a4 df       	rcall	.-184    	; 0x195a <setRate>
    1a12:	0a c0       	rjmp	.+20     	; 0x1a28 <nextChannel+0x76>
    1a14:	88 e0       	ldi	r24, 0x08	; 8
    1a16:	47 df       	rcall	.-370    	; 0x18a6 <findNext>
    1a18:	c8 2f       	mov	r28, r24
    1a1a:	80 91 5c 05 	lds	r24, 0x055C
            }
            break;
        case YIELD:
            if ((n = findNext(HIGHEST_CHANNEL)) <= cur_channel) {
    1a1e:	8c 17       	cp	r24, r28
    1a20:	18 f0       	brcs	.+6      	; 0x1a28 <nextChannel+0x76>
    1a22:	4f dc       	rcall	.-1890   	; 0x12c2 <dec>
    1a24:	80 e0       	ldi	r24, 0x00	; 0
    1a26:	74 df       	rcall	.-280    	; 0x1910 <interruptEnableDisable>
    1a28:	80 91 5c 05 	lds	r24, 0x055C
    1a2c:	8c 17       	cp	r24, r28
                temp = dec();
    1a2e:	31 f0       	breq	.+12     	; 0x1a3c <nextChannel+0x8a>
    1a30:	c0 93 5c 05 	sts	0x055C, r28
                interruptEnableDisable(0);
    1a34:	8c 2f       	mov	r24, r28
    1a36:	df 91       	pop	r29
        default:
            break;
    }
    
    //Set channel
    if (cur_channel != n) changeChannel(cur_channel = n);
    1a38:	cf 91       	pop	r28
    1a3a:	43 ce       	rjmp	.-890    	; 0x16c2 <changeChannel>
    1a3c:	df 91       	pop	r29
    1a3e:	cf 91       	pop	r28
    1a40:	08 95       	ret

00001a42 <start>:
    1a42:	80 91 18 01 	lds	r24, 0x0118
}
    1a46:	20 91 55 04 	lds	r18, 0x0455
        default:
            break;
    }
    
    //Set channel
    if (cur_channel != n) changeChannel(cur_channel = n);
    1a4a:	30 91 56 04 	lds	r19, 0x0456
}
    1a4e:	23 2b       	or	r18, r19
    1a50:	41 f0       	breq	.+16     	; 0x1a62 <start+0x20>
    1a52:	81 30       	cpi	r24, 0x01	; 1
    }
    else return NULL;
}

startS start() {
    if (ss == STOP & queue != NULL) {
    1a54:	31 f4       	brne	.+12     	; 0x1a62 <start+0x20>
        ss = START;
    1a56:	10 92 18 01 	sts	0x0118, r1
        nextChannel();
    1a5a:	ab df       	rcall	.-170    	; 0x19b2 <nextChannel>
    1a5c:	88 e0       	ldi	r24, 0x08	; 8
        SPI_txrx(START_ADC1);
    1a5e:	1b df       	rcall	.-458    	; 0x1896 <SPI_txrx>
    1a60:	80 e0       	ldi	r24, 0x00	; 0
    1a62:	08 95       	ret

00001a64 <__vector_17>:
        return START;
    1a64:	1f 92       	push	r1
    }
    return ss;
}
    1a66:	0f 92       	push	r0
        TIMSK1 &= (0 << OCIE1A);
    }
}

//TODO: make sure this isnt going before the interrupt pin
ISR(TIMER1_COMPA_vect, ISR_BLOCK) {
    1a68:	0f b6       	in	r0, 0x3f	; 63
    1a6a:	0f 92       	push	r0
    1a6c:	11 24       	eor	r1, r1
    1a6e:	8f 93       	push	r24
    read |= 1;
    1a70:	80 91 5d 05 	lds	r24, 0x055D
    1a74:	81 60       	ori	r24, 0x01	; 1
    1a76:	80 93 5d 05 	sts	0x055D, r24
}
    1a7a:	8f 91       	pop	r24
    1a7c:	0f 90       	pop	r0
    1a7e:	0f be       	out	0x3f, r0	; 63
    1a80:	0f 90       	pop	r0
    1a82:	1f 90       	pop	r1
    1a84:	18 95       	reti

00001a86 <__vector_9>:

ISR(PCINT0_vect, ISR_BLOCK) {
    1a86:	1f 92       	push	r1
    1a88:	0f 92       	push	r0
    1a8a:	0f b6       	in	r0, 0x3f	; 63
    1a8c:	0f 92       	push	r0
    1a8e:	11 24       	eor	r1, r1
    1a90:	2f 93       	push	r18
    1a92:	3f 93       	push	r19
    1a94:	4f 93       	push	r20
    1a96:	5f 93       	push	r21
    1a98:	6f 93       	push	r22
    1a9a:	7f 93       	push	r23
    1a9c:	8f 93       	push	r24
    1a9e:	9f 93       	push	r25
    1aa0:	af 93       	push	r26
    1aa2:	bf 93       	push	r27
    1aa4:	ef 93       	push	r30
    1aa6:	ff 93       	push	r31
    read |= 2;
    1aa8:	80 91 5d 05 	lds	r24, 0x055D
    1aac:	82 60       	ori	r24, 0x02	; 2
    1aae:	80 93 5d 05 	sts	0x055D, r24
    SPI_txrx(STOP_ADC1);
    1ab2:	8a e0       	ldi	r24, 0x0A	; 10
    1ab4:	f0 de       	rcall	.-544    	; 0x1896 <SPI_txrx>
    1ab6:	ff 91       	pop	r31
}
    1ab8:	ef 91       	pop	r30
    1aba:	bf 91       	pop	r27
    1abc:	af 91       	pop	r26
    1abe:	9f 91       	pop	r25
    1ac0:	8f 91       	pop	r24
    1ac2:	7f 91       	pop	r23
    1ac4:	6f 91       	pop	r22
    1ac6:	5f 91       	pop	r21
    1ac8:	4f 91       	pop	r20
    1aca:	3f 91       	pop	r19
    1acc:	2f 91       	pop	r18
    1ace:	0f 90       	pop	r0
    1ad0:	0f be       	out	0x3f, r0	; 63
    1ad2:	0f 90       	pop	r0
    1ad4:	1f 90       	pop	r1
    1ad6:	18 95       	reti

00001ad8 <readData>:
    1ad8:	80 91 55 04 	lds	r24, 0x0455

unsigned int readData() {
    uint8_t *value;
    
   if (queue != NULL && ss != STOP) {
    1adc:	90 91 56 04 	lds	r25, 0x0456
    1ae0:	89 2b       	or	r24, r25
    1ae2:	19 f4       	brne	.+6      	; 0x1aea <readData+0x12>
            sei();
            if (ss == GO) SPI_txrx(START_ADC1);
        }
        return (queue != NULL) ? queue->num : NULL;
    }
    else return NULL;
    1ae4:	80 e0       	ldi	r24, 0x00	; 0
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	08 95       	ret
}

unsigned int readData() {
    uint8_t *value;
    
   if (queue != NULL && ss != STOP) {
    1aea:	80 91 18 01 	lds	r24, 0x0118
    1aee:	81 30       	cpi	r24, 0x01	; 1
    1af0:	c9 f3       	breq	.-14     	; 0x1ae4 <readData+0xc>
        if (read == 3) {
    1af2:	80 91 5d 05 	lds	r24, 0x055D
    1af6:	83 30       	cpi	r24, 0x03	; 3
    1af8:	b9 f4       	brne	.+46     	; 0x1b28 <readData+0x50>
            cli();
    1afa:	f8 94       	cli
            value = &(buf1[buf1_end]);
    1afc:	20 91 5a 04 	lds	r18, 0x045A
    1b00:	82 2f       	mov	r24, r18
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	83 5a       	subi	r24, 0xA3	; 163
    1b06:	9b 4f       	sbci	r25, 0xFB	; 251
            if (buf1_end < 248) buf1_end += 4;
    1b08:	28 3f       	cpi	r18, 0xF8	; 248
    1b0a:	18 f4       	brcc	.+6      	; 0x1b12 <readData+0x3a>
    1b0c:	2c 5f       	subi	r18, 0xFC	; 252
    1b0e:	20 93 5a 04 	sts	0x045A, r18
            readADC1(value);
    1b12:	89 dd       	rcall	.-1262   	; 0x1626 <readADC1>
    1b14:	4e df       	rcall	.-356    	; 0x19b2 <nextChannel>
            nextChannel();
    1b16:	10 92 5d 05 	sts	0x055D, r1
            read = 0;
    1b1a:	78 94       	sei
    1b1c:	80 91 18 01 	lds	r24, 0x0118
            sei();
            if (ss == GO) SPI_txrx(START_ADC1);
    1b20:	83 30       	cpi	r24, 0x03	; 3
    1b22:	11 f4       	brne	.+4      	; 0x1b28 <readData+0x50>
    1b24:	88 e0       	ldi	r24, 0x08	; 8
    1b26:	b7 de       	rcall	.-658    	; 0x1896 <SPI_txrx>
    1b28:	e0 91 55 04 	lds	r30, 0x0455
    1b2c:	f0 91 56 04 	lds	r31, 0x0456
        }
        return (queue != NULL) ? queue->num : NULL;
    1b30:	30 97       	sbiw	r30, 0x00	; 0
    1b32:	c1 f2       	breq	.-80     	; 0x1ae4 <readData+0xc>
    1b34:	80 81       	ld	r24, Z
    1b36:	91 81       	ldd	r25, Z+1	; 0x01
    1b38:	08 95       	ret

00001b3a <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1b3a:	98 2f       	mov	r25, r24
    1b3c:	97 30       	cpi	r25, 0x07	; 7
    1b3e:	58 f5       	brcc	.+86     	; 0x1b96 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1b40:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    1b44:	98 17       	cp	r25, r24
    1b46:	39 f0       	breq	.+14     	; 0x1b56 <Endpoint_ConfigureEndpoint_Prv+0x1c>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    1b48:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    1b4c:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
    1b50:	50 91 f0 00 	lds	r21, 0x00F0
    1b54:	03 c0       	rjmp	.+6      	; 0x1b5c <Endpoint_ConfigureEndpoint_Prv+0x22>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
    1b56:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
    1b58:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
    1b5a:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    1b5c:	21 ff       	sbrs	r18, 1
    1b5e:	19 c0       	rjmp	.+50     	; 0x1b92 <Endpoint_ConfigureEndpoint_Prv+0x58>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    1b60:	30 91 eb 00 	lds	r19, 0x00EB
    1b64:	3e 7f       	andi	r19, 0xFE	; 254
    1b66:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    1b6a:	30 91 ed 00 	lds	r19, 0x00ED
    1b6e:	3d 7f       	andi	r19, 0xFD	; 253
    1b70:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    1b74:	30 91 eb 00 	lds	r19, 0x00EB
    1b78:	31 60       	ori	r19, 0x01	; 1
    1b7a:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    1b7e:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    1b82:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
    1b86:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1b8a:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
    1b8e:	27 ff       	sbrs	r18, 7
    1b90:	07 c0       	rjmp	.+14     	; 0x1ba0 <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1b92:	9f 5f       	subi	r25, 0xFF	; 255
    1b94:	d3 cf       	rjmp	.-90     	; 0x1b3c <Endpoint_ConfigureEndpoint_Prv+0x2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1b96:	8f 70       	andi	r24, 0x0F	; 15
    1b98:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    1b9c:	81 e0       	ldi	r24, 0x01	; 1
    1b9e:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
    1ba0:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    1ba2:	08 95       	ret

00001ba4 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1ba4:	80 91 63 05 	lds	r24, 0x0563
    1ba8:	87 fd       	sbrc	r24, 7
    1baa:	05 c0       	rjmp	.+10     	; 0x1bb6 <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1bac:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1bb0:	80 ff       	sbrs	r24, 0
    1bb2:	0e c0       	rjmp	.+28     	; 0x1bd0 <Endpoint_ClearStatusStage+0x2c>
    1bb4:	12 c0       	rjmp	.+36     	; 0x1bda <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1bb6:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    1bba:	82 fd       	sbrc	r24, 2
    1bbc:	05 c0       	rjmp	.+10     	; 0x1bc8 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1bbe:	80 91 62 05 	lds	r24, 0x0562
    1bc2:	81 11       	cpse	r24, r1
    1bc4:	f8 cf       	rjmp	.-16     	; 0x1bb6 <Endpoint_ClearStatusStage+0x12>
    1bc6:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1bc8:	80 91 e8 00 	lds	r24, 0x00E8
    1bcc:	8b 77       	andi	r24, 0x7B	; 123
    1bce:	08 c0       	rjmp	.+16     	; 0x1be0 <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1bd0:	80 91 62 05 	lds	r24, 0x0562
    1bd4:	81 11       	cpse	r24, r1
    1bd6:	ea cf       	rjmp	.-44     	; 0x1bac <Endpoint_ClearStatusStage+0x8>
    1bd8:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1bda:	80 91 e8 00 	lds	r24, 0x00E8
    1bde:	8e 77       	andi	r24, 0x7E	; 126
    1be0:	80 93 e8 00 	sts	0x00E8, r24
    1be4:	08 95       	ret

00001be6 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1be6:	80 91 e4 00 	lds	r24, 0x00E4
    1bea:	90 91 e5 00 	lds	r25, 0x00E5
    1bee:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1bf0:	20 91 ec 00 	lds	r18, 0x00EC
    1bf4:	20 ff       	sbrs	r18, 0
    1bf6:	21 c0       	rjmp	.+66     	; 0x1c3a <Endpoint_WaitUntilReady+0x54>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1bf8:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1bfc:	20 fd       	sbrc	r18, 0
    1bfe:	21 c0       	rjmp	.+66     	; 0x1c42 <Endpoint_WaitUntilReady+0x5c>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1c00:	20 91 62 05 	lds	r18, 0x0562

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1c04:	22 23       	and	r18, r18
    1c06:	89 f0       	breq	.+34     	; 0x1c2a <Endpoint_WaitUntilReady+0x44>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1c08:	25 30       	cpi	r18, 0x05	; 5
    1c0a:	89 f0       	breq	.+34     	; 0x1c2e <Endpoint_WaitUntilReady+0x48>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1c0c:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1c10:	25 fd       	sbrc	r18, 5
    1c12:	0f c0       	rjmp	.+30     	; 0x1c32 <Endpoint_WaitUntilReady+0x4c>
    1c14:	20 91 e4 00 	lds	r18, 0x00E4
    1c18:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1c1c:	28 17       	cp	r18, r24
    1c1e:	39 07       	cpc	r19, r25
    1c20:	39 f3       	breq	.-50     	; 0x1bf0 <Endpoint_WaitUntilReady+0xa>
    1c22:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1c24:	41 f0       	breq	.+16     	; 0x1c36 <Endpoint_WaitUntilReady+0x50>
    1c26:	c9 01       	movw	r24, r18
    1c28:	e3 cf       	rjmp	.-58     	; 0x1bf0 <Endpoint_WaitUntilReady+0xa>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1c2a:	82 e0       	ldi	r24, 0x02	; 2
    1c2c:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    1c2e:	83 e0       	ldi	r24, 0x03	; 3
    1c30:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1c32:	81 e0       	ldi	r24, 0x01	; 1
    1c34:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
    1c36:	84 e0       	ldi	r24, 0x04	; 4
    1c38:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1c3a:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1c3e:	22 ff       	sbrs	r18, 2
    1c40:	df cf       	rjmp	.-66     	; 0x1c00 <Endpoint_WaitUntilReady+0x1a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    1c42:	80 e0       	ldi	r24, 0x00	; 0
    1c44:	08 95       	ret

00001c46 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    1c46:	0f 93       	push	r16
    1c48:	1f 93       	push	r17
    1c4a:	cf 93       	push	r28
    1c4c:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1c4e:	46 d0       	rcall	.+140    	; 0x1cdc <USB_INT_DisableAllInterrupts>
    1c50:	4d d0       	rcall	.+154    	; 0x1cec <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1c52:	c8 ed       	ldi	r28, 0xD8	; 216
    1c54:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1c56:	88 81       	ld	r24, Y
    1c58:	8f 77       	andi	r24, 0x7F	; 127
    1c5a:	88 83       	st	Y, r24
    1c5c:	88 81       	ld	r24, Y
    1c5e:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
    1c60:	88 83       	st	Y, r24
    1c62:	88 81       	ld	r24, Y
    1c64:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1c66:	88 83       	st	Y, r24
    1c68:	19 bc       	out	0x29, r1	; 41
    1c6a:	10 92 62 05 	sts	0x0562, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1c6e:	10 92 5e 05 	sts	0x055E, r1
	USB_Device_ConfigurationNumber  = 0;
    1c72:	10 92 60 05 	sts	0x0560, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1c76:	10 92 5f 05 	sts	0x055F, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1c7a:	00 ee       	ldi	r16, 0xE0	; 224
    1c7c:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1c7e:	f8 01       	movw	r30, r16
    1c80:	80 81       	ld	r24, Z
    1c82:	8b 7f       	andi	r24, 0xFB	; 251
    1c84:	80 83       	st	Z, r24
    1c86:	88 81       	ld	r24, Y
    1c88:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    1c8a:	88 83       	st	Y, r24
    1c8c:	42 e0       	ldi	r20, 0x02	; 2
    1c8e:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
    1c90:	80 e0       	ldi	r24, 0x00	; 0
    1c92:	53 df       	rcall	.-346    	; 0x1b3a <Endpoint_ConfigureEndpoint_Prv>
    1c94:	e1 ee       	ldi	r30, 0xE1	; 225
    1c96:	f0 e0       	ldi	r31, 0x00	; 0
    1c98:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1c9a:	8e 7f       	andi	r24, 0xFE	; 254
    1c9c:	80 83       	st	Z, r24
    1c9e:	e2 ee       	ldi	r30, 0xE2	; 226
    1ca0:	f0 e0       	ldi	r31, 0x00	; 0
    1ca2:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1ca4:	81 60       	ori	r24, 0x01	; 1
    1ca6:	80 83       	st	Z, r24
    1ca8:	80 81       	ld	r24, Z
    1caa:	88 60       	ori	r24, 0x08	; 8
    1cac:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    1cae:	f8 01       	movw	r30, r16
    1cb0:	80 81       	ld	r24, Z
    1cb2:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1cb4:	80 83       	st	Z, r24
    1cb6:	88 81       	ld	r24, Y
    1cb8:	80 61       	ori	r24, 0x10	; 16
    1cba:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1cbc:	df 91       	pop	r29
    1cbe:	cf 91       	pop	r28
    1cc0:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1cc2:	0f 91       	pop	r16
    1cc4:	08 95       	ret

00001cc6 <USB_Init>:
    1cc6:	e7 ed       	ldi	r30, 0xD7	; 215
    1cc8:	f0 e0       	ldi	r31, 0x00	; 0
    1cca:	80 81       	ld	r24, Z

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    1ccc:	81 60       	ori	r24, 0x01	; 1
    1cce:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    1cd0:	84 e0       	ldi	r24, 0x04	; 4
    1cd2:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	80 93 61 05 	sts	0x0561, r24

	USB_ResetInterface();
    1cda:	b5 cf       	rjmp	.-150    	; 0x1c46 <USB_ResetInterface>

00001cdc <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    1cdc:	e8 ed       	ldi	r30, 0xD8	; 216
    1cde:	f0 e0       	ldi	r31, 0x00	; 0
    1ce0:	80 81       	ld	r24, Z
    1ce2:	8e 7f       	andi	r24, 0xFE	; 254
    1ce4:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1ce6:	10 92 e2 00 	sts	0x00E2, r1
    1cea:	08 95       	ret

00001cec <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1cec:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1cf0:	10 92 e1 00 	sts	0x00E1, r1
    1cf4:	08 95       	ret

00001cf6 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1cf6:	1f 92       	push	r1
    1cf8:	0f 92       	push	r0
    1cfa:	0f b6       	in	r0, 0x3f	; 63
    1cfc:	0f 92       	push	r0
    1cfe:	11 24       	eor	r1, r1
    1d00:	2f 93       	push	r18
    1d02:	3f 93       	push	r19
    1d04:	4f 93       	push	r20
    1d06:	5f 93       	push	r21
    1d08:	6f 93       	push	r22
    1d0a:	7f 93       	push	r23
    1d0c:	8f 93       	push	r24
    1d0e:	9f 93       	push	r25
    1d10:	af 93       	push	r26
    1d12:	bf 93       	push	r27
    1d14:	ef 93       	push	r30
    1d16:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1d18:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1d1c:	82 ff       	sbrs	r24, 2
    1d1e:	0a c0       	rjmp	.+20     	; 0x1d34 <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    1d20:	80 91 e2 00 	lds	r24, 0x00E2
    1d24:	82 ff       	sbrs	r24, 2
    1d26:	06 c0       	rjmp	.+12     	; 0x1d34 <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    1d28:	80 91 e1 00 	lds	r24, 0x00E1
    1d2c:	8b 7f       	andi	r24, 0xFB	; 251
    1d2e:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1d32:	79 d3       	rcall	.+1778   	; 0x2426 <USB_Event_Stub>
    1d34:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    1d38:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    1d3a:	1f c0       	rjmp	.+62     	; 0x1d7a <__vector_10+0x84>
    1d3c:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    1d40:	80 ff       	sbrs	r24, 0
    1d42:	1b c0       	rjmp	.+54     	; 0x1d7a <__vector_10+0x84>
    1d44:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    1d48:	8e 7f       	andi	r24, 0xFE	; 254
    1d4a:	80 93 da 00 	sts	0x00DA, r24
    1d4e:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1d52:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1d54:	0d c0       	rjmp	.+26     	; 0x1d70 <__vector_10+0x7a>
    1d56:	80 e1       	ldi	r24, 0x10	; 16

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1d58:	89 bd       	out	0x29, r24	; 41
    1d5a:	82 e1       	ldi	r24, 0x12	; 18
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1d5c:	89 bd       	out	0x29, r24	; 41
    1d5e:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1d60:	00 fe       	sbrs	r0, 0
    1d62:	fd cf       	rjmp	.-6      	; 0x1d5e <__vector_10+0x68>
    1d64:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1d66:	80 93 62 05 	sts	0x0562, r24
    1d6a:	0e 94 ef 04 	call	0x9de	; 0x9de <EVENT_USB_Device_Connect>
			EVENT_USB_Device_Connect();
    1d6e:	05 c0       	rjmp	.+10     	; 0x1d7a <__vector_10+0x84>
    1d70:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1d72:	10 92 62 05 	sts	0x0562, r1
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    1d76:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <EVENT_USB_Device_Disconnect>
			EVENT_USB_Device_Disconnect();
    1d7a:	80 91 e1 00 	lds	r24, 0x00E1
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    1d7e:	80 ff       	sbrs	r24, 0
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1d80:	18 c0       	rjmp	.+48     	; 0x1db2 <__vector_10+0xbc>
    1d82:	80 91 e2 00 	lds	r24, 0x00E2
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1d86:	80 ff       	sbrs	r24, 0
    1d88:	14 c0       	rjmp	.+40     	; 0x1db2 <__vector_10+0xbc>
    1d8a:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1d8e:	8e 7f       	andi	r24, 0xFE	; 254
    1d90:	80 93 e2 00 	sts	0x00E2, r24
    1d94:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1d98:	80 61       	ori	r24, 0x10	; 16
    1d9a:	80 93 e2 00 	sts	0x00E2, r24
    1d9e:	80 91 d8 00 	lds	r24, 0x00D8
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1da2:	80 62       	ori	r24, 0x20	; 32
    1da4:	80 93 d8 00 	sts	0x00D8, r24
    1da8:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1daa:	85 e0       	ldi	r24, 0x05	; 5

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    1dac:	80 93 62 05 	sts	0x0562, r24
    1db0:	3a d3       	rcall	.+1652   	; 0x2426 <USB_Event_Stub>
		EVENT_USB_Device_Suspend();
    1db2:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1db6:	84 ff       	sbrs	r24, 4
    1db8:	2d c0       	rjmp	.+90     	; 0x1e14 <__vector_10+0x11e>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1dba:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1dbe:	84 ff       	sbrs	r24, 4
    1dc0:	29 c0       	rjmp	.+82     	; 0x1e14 <__vector_10+0x11e>
    1dc2:	80 e1       	ldi	r24, 0x10	; 16
    1dc4:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1dc6:	82 e1       	ldi	r24, 0x12	; 18
    1dc8:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1dca:	09 b4       	in	r0, 0x29	; 41
    1dcc:	00 fe       	sbrs	r0, 0
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1dce:	fd cf       	rjmp	.-6      	; 0x1dca <__vector_10+0xd4>
    1dd0:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1dd4:	8f 7d       	andi	r24, 0xDF	; 223
    1dd6:	80 93 d8 00 	sts	0x00D8, r24
    1dda:	80 91 e1 00 	lds	r24, 0x00E1
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1dde:	8f 7e       	andi	r24, 0xEF	; 239
    1de0:	80 93 e1 00 	sts	0x00E1, r24
    1de4:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1de8:	8f 7e       	andi	r24, 0xEF	; 239
    1dea:	80 93 e2 00 	sts	0x00E2, r24
    1dee:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1df2:	81 60       	ori	r24, 0x01	; 1
    1df4:	80 93 e2 00 	sts	0x00E2, r24
    1df8:	80 91 5e 05 	lds	r24, 0x055E
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1dfc:	81 11       	cpse	r24, r1
    1dfe:	04 c0       	rjmp	.+8      	; 0x1e08 <__vector_10+0x112>
    1e00:	80 91 e3 00 	lds	r24, 0x00E3
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1e04:	87 ff       	sbrs	r24, 7
    1e06:	02 c0       	rjmp	.+4      	; 0x1e0c <__vector_10+0x116>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1e08:	84 e0       	ldi	r24, 0x04	; 4
    1e0a:	01 c0       	rjmp	.+2      	; 0x1e0e <__vector_10+0x118>
    1e0c:	81 e0       	ldi	r24, 0x01	; 1
    1e0e:	80 93 62 05 	sts	0x0562, r24
    1e12:	09 d3       	rcall	.+1554   	; 0x2426 <USB_Event_Stub>
    1e14:	80 91 e1 00 	lds	r24, 0x00E1

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1e18:	83 ff       	sbrs	r24, 3
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1e1a:	27 c0       	rjmp	.+78     	; 0x1e6a <__vector_10+0x174>
    1e1c:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1e20:	83 ff       	sbrs	r24, 3
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1e22:	23 c0       	rjmp	.+70     	; 0x1e6a <__vector_10+0x174>
    1e24:	80 91 e1 00 	lds	r24, 0x00E1
    1e28:	87 7f       	andi	r24, 0xF7	; 247
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1e2a:	80 93 e1 00 	sts	0x00E1, r24
    1e2e:	82 e0       	ldi	r24, 0x02	; 2
    1e30:	80 93 62 05 	sts	0x0562, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1e34:	10 92 5e 05 	sts	0x055E, r1
    1e38:	80 91 e1 00 	lds	r24, 0x00E1
		USB_Device_ConfigurationNumber = 0;
    1e3c:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1e3e:	80 93 e1 00 	sts	0x00E1, r24
    1e42:	80 91 e2 00 	lds	r24, 0x00E2
    1e46:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1e48:	80 93 e2 00 	sts	0x00E2, r24
    1e4c:	80 91 e2 00 	lds	r24, 0x00E2
    1e50:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1e52:	80 93 e2 00 	sts	0x00E2, r24
    1e56:	42 e0       	ldi	r20, 0x02	; 2
    1e58:	60 e0       	ldi	r22, 0x00	; 0
    1e5a:	80 e0       	ldi	r24, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
    1e5c:	6e de       	rcall	.-804    	; 0x1b3a <Endpoint_ConfigureEndpoint_Prv>
    1e5e:	80 91 f0 00 	lds	r24, 0x00F0
    1e62:	88 60       	ori	r24, 0x08	; 8
    1e64:	80 93 f0 00 	sts	0x00F0, r24
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1e68:	de d2       	rcall	.+1468   	; 0x2426 <USB_Event_Stub>
    1e6a:	ff 91       	pop	r31
    1e6c:	ef 91       	pop	r30
    1e6e:	bf 91       	pop	r27

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1e70:	af 91       	pop	r26
    1e72:	9f 91       	pop	r25
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1e74:	8f 91       	pop	r24
    1e76:	7f 91       	pop	r23
    1e78:	6f 91       	pop	r22
    1e7a:	5f 91       	pop	r21
    1e7c:	4f 91       	pop	r20
    1e7e:	3f 91       	pop	r19
    1e80:	2f 91       	pop	r18
    1e82:	0f 90       	pop	r0
    1e84:	0f be       	out	0x3f, r0	; 63
    1e86:	0f 90       	pop	r0
    1e88:	1f 90       	pop	r1
    1e8a:	18 95       	reti

00001e8c <__vector_11>:
    1e8c:	1f 92       	push	r1
    1e8e:	0f 92       	push	r0
    1e90:	0f b6       	in	r0, 0x3f	; 63
    1e92:	0f 92       	push	r0
    1e94:	11 24       	eor	r1, r1

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    1e96:	2f 93       	push	r18
    1e98:	3f 93       	push	r19
    1e9a:	4f 93       	push	r20
    1e9c:	5f 93       	push	r21
    1e9e:	6f 93       	push	r22
    1ea0:	7f 93       	push	r23
    1ea2:	8f 93       	push	r24
    1ea4:	9f 93       	push	r25
    1ea6:	af 93       	push	r26
    1ea8:	bf 93       	push	r27
    1eaa:	cf 93       	push	r28
    1eac:	ef 93       	push	r30
    1eae:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1eb0:	c0 91 e9 00 	lds	r28, 0x00E9
    1eb4:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1eb6:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1eba:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    1ebe:	80 91 f0 00 	lds	r24, 0x00F0
    1ec2:	87 7f       	andi	r24, 0xF7	; 247
    1ec4:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1ec8:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    1eca:	62 d1       	rcall	.+708    	; 0x2190 <USB_Device_ProcessControlRequest>
    1ecc:	10 92 e9 00 	sts	0x00E9, r1
    1ed0:	80 91 f0 00 	lds	r24, 0x00F0
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1ed4:	88 60       	ori	r24, 0x08	; 8
    1ed6:	80 93 f0 00 	sts	0x00F0, r24
    1eda:	c0 93 e9 00 	sts	0x00E9, r28
    1ede:	ff 91       	pop	r31

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    1ee0:	ef 91       	pop	r30
    1ee2:	cf 91       	pop	r28
    1ee4:	bf 91       	pop	r27
    1ee6:	af 91       	pop	r26
    1ee8:	9f 91       	pop	r25
    1eea:	8f 91       	pop	r24
    1eec:	7f 91       	pop	r23
    1eee:	6f 91       	pop	r22
    1ef0:	5f 91       	pop	r21
    1ef2:	4f 91       	pop	r20
    1ef4:	3f 91       	pop	r19
    1ef6:	2f 91       	pop	r18
    1ef8:	0f 90       	pop	r0
    1efa:	0f be       	out	0x3f, r0	; 63
    1efc:	0f 90       	pop	r0
    1efe:	1f 90       	pop	r1
    1f00:	18 95       	reti

00001f02 <Endpoint_Write_Stream_LE>:

// cppcheck-suppress unusedFunction
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1f02:	cf 92       	push	r12
    1f04:	df 92       	push	r13
    1f06:	ef 92       	push	r14
    1f08:	ff 92       	push	r15
    1f0a:	0f 93       	push	r16
    1f0c:	1f 93       	push	r17
    1f0e:	cf 93       	push	r28
    1f10:	df 93       	push	r29
    1f12:	7c 01       	movw	r14, r24
    1f14:	8b 01       	movw	r16, r22
    1f16:	ea 01       	movw	r28, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1f18:	66 de       	rcall	.-820    	; 0x1be6 <Endpoint_WaitUntilReady>
    1f1a:	81 11       	cpse	r24, r1
    1f1c:	30 c0       	rjmp	.+96     	; 0x1f7e <Endpoint_Write_Stream_LE+0x7c>
    1f1e:	20 97       	sbiw	r28, 0x00	; 0
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1f20:	31 f0       	breq	.+12     	; 0x1f2e <Endpoint_Write_Stream_LE+0x2c>
    1f22:	88 81       	ld	r24, Y
	{
		Length -= *BytesProcessed;
    1f24:	99 81       	ldd	r25, Y+1	; 0x01
    1f26:	08 1b       	sub	r16, r24
    1f28:	19 0b       	sbc	r17, r25
    1f2a:	e8 0e       	add	r14, r24
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1f2c:	f9 1e       	adc	r15, r25
    1f2e:	c1 2c       	mov	r12, r1
// cppcheck-suppress unusedFunction
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1f30:	d1 2c       	mov	r13, r1
    1f32:	01 15       	cp	r16, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1f34:	11 05       	cpc	r17, r1
    1f36:	11 f1       	breq	.+68     	; 0x1f7c <Endpoint_Write_Stream_LE+0x7a>
    1f38:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1f3c:	85 fd       	sbrc	r24, 5
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1f3e:	13 c0       	rjmp	.+38     	; 0x1f66 <Endpoint_Write_Stream_LE+0x64>
    1f40:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1f44:	8e 77       	andi	r24, 0x7E	; 126
    1f46:	80 93 e8 00 	sts	0x00E8, r24
    1f4a:	20 97       	sbiw	r28, 0x00	; 0

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    1f4c:	41 f0       	breq	.+16     	; 0x1f5e <Endpoint_Write_Stream_LE+0x5c>
    1f4e:	88 81       	ld	r24, Y
			{
				*BytesProcessed += BytesInTransfer;
    1f50:	99 81       	ldd	r25, Y+1	; 0x01
    1f52:	8c 0d       	add	r24, r12
    1f54:	9d 1d       	adc	r25, r13
    1f56:	99 83       	std	Y+1, r25	; 0x01
    1f58:	88 83       	st	Y, r24
    1f5a:	85 e0       	ldi	r24, 0x05	; 5
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    1f5c:	10 c0       	rjmp	.+32     	; 0x1f7e <Endpoint_Write_Stream_LE+0x7c>
    1f5e:	43 de       	rcall	.-890    	; 0x1be6 <Endpoint_WaitUntilReady>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1f60:	88 23       	and	r24, r24
    1f62:	39 f3       	breq	.-50     	; 0x1f32 <Endpoint_Write_Stream_LE+0x30>
    1f64:	0c c0       	rjmp	.+24     	; 0x1f7e <Endpoint_Write_Stream_LE+0x7c>
    1f66:	f7 01       	movw	r30, r14
    1f68:	81 91       	ld	r24, Z+
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1f6a:	7f 01       	movw	r14, r30
    1f6c:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1f70:	01 50       	subi	r16, 0x01	; 1
    1f72:	11 09       	sbc	r17, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1f74:	ff ef       	ldi	r31, 0xFF	; 255
    1f76:	cf 1a       	sub	r12, r31
			BytesInTransfer++;
    1f78:	df 0a       	sbc	r13, r31
    1f7a:	db cf       	rjmp	.-74     	; 0x1f32 <Endpoint_Write_Stream_LE+0x30>
    1f7c:	80 e0       	ldi	r24, 0x00	; 0
    1f7e:	df 91       	pop	r29
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
    1f80:	cf 91       	pop	r28
}
    1f82:	1f 91       	pop	r17
    1f84:	0f 91       	pop	r16
    1f86:	ff 90       	pop	r15
    1f88:	ef 90       	pop	r14
    1f8a:	df 90       	pop	r13
    1f8c:	cf 90       	pop	r12
    1f8e:	08 95       	ret

00001f90 <Endpoint_Read_Stream_LE>:
    1f90:	cf 92       	push	r12
    1f92:	df 92       	push	r13

// cppcheck-suppress unusedFunction
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1f94:	ef 92       	push	r14
    1f96:	ff 92       	push	r15
    1f98:	0f 93       	push	r16
    1f9a:	1f 93       	push	r17
    1f9c:	cf 93       	push	r28
    1f9e:	df 93       	push	r29
    1fa0:	7c 01       	movw	r14, r24
    1fa2:	8b 01       	movw	r16, r22
    1fa4:	ea 01       	movw	r28, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1fa6:	1f de       	rcall	.-962    	; 0x1be6 <Endpoint_WaitUntilReady>
    1fa8:	81 11       	cpse	r24, r1
    1faa:	30 c0       	rjmp	.+96     	; 0x200c <Endpoint_Read_Stream_LE+0x7c>
    1fac:	20 97       	sbiw	r28, 0x00	; 0
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1fae:	31 f0       	breq	.+12     	; 0x1fbc <Endpoint_Read_Stream_LE+0x2c>
    1fb0:	88 81       	ld	r24, Y
	{
		Length -= *BytesProcessed;
    1fb2:	99 81       	ldd	r25, Y+1	; 0x01
    1fb4:	08 1b       	sub	r16, r24
    1fb6:	19 0b       	sbc	r17, r25
    1fb8:	e8 0e       	add	r14, r24
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1fba:	f9 1e       	adc	r15, r25
    1fbc:	c1 2c       	mov	r12, r1
// cppcheck-suppress unusedFunction
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1fbe:	d1 2c       	mov	r13, r1
    1fc0:	01 15       	cp	r16, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1fc2:	11 05       	cpc	r17, r1
    1fc4:	11 f1       	breq	.+68     	; 0x200a <Endpoint_Read_Stream_LE+0x7a>
    1fc6:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1fca:	85 fd       	sbrc	r24, 5
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1fcc:	13 c0       	rjmp	.+38     	; 0x1ff4 <Endpoint_Read_Stream_LE+0x64>
    1fce:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1fd2:	8b 77       	andi	r24, 0x7B	; 123
    1fd4:	80 93 e8 00 	sts	0x00E8, r24
    1fd8:	20 97       	sbiw	r28, 0x00	; 0

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    1fda:	41 f0       	breq	.+16     	; 0x1fec <Endpoint_Read_Stream_LE+0x5c>
    1fdc:	88 81       	ld	r24, Y
			{
				*BytesProcessed += BytesInTransfer;
    1fde:	99 81       	ldd	r25, Y+1	; 0x01
    1fe0:	8c 0d       	add	r24, r12
    1fe2:	9d 1d       	adc	r25, r13
    1fe4:	99 83       	std	Y+1, r25	; 0x01
    1fe6:	88 83       	st	Y, r24
    1fe8:	85 e0       	ldi	r24, 0x05	; 5
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    1fea:	10 c0       	rjmp	.+32     	; 0x200c <Endpoint_Read_Stream_LE+0x7c>
    1fec:	fc dd       	rcall	.-1032   	; 0x1be6 <Endpoint_WaitUntilReady>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1fee:	88 23       	and	r24, r24
    1ff0:	39 f3       	breq	.-50     	; 0x1fc0 <Endpoint_Read_Stream_LE+0x30>
    1ff2:	0c c0       	rjmp	.+24     	; 0x200c <Endpoint_Read_Stream_LE+0x7c>
    1ff4:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1ff8:	f7 01       	movw	r30, r14
    1ffa:	81 93       	st	Z+, r24
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1ffc:	7f 01       	movw	r14, r30
    1ffe:	01 50       	subi	r16, 0x01	; 1
    2000:	11 09       	sbc	r17, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    2002:	ff ef       	ldi	r31, 0xFF	; 255
    2004:	cf 1a       	sub	r12, r31
			BytesInTransfer++;
    2006:	df 0a       	sbc	r13, r31
    2008:	db cf       	rjmp	.-74     	; 0x1fc0 <Endpoint_Read_Stream_LE+0x30>
    200a:	80 e0       	ldi	r24, 0x00	; 0
    200c:	df 91       	pop	r29
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
    200e:	cf 91       	pop	r28
}
    2010:	1f 91       	pop	r17
    2012:	0f 91       	pop	r16
    2014:	ff 90       	pop	r15
    2016:	ef 90       	pop	r14
    2018:	df 90       	pop	r13
    201a:	cf 90       	pop	r12
    201c:	08 95       	ret

0000201e <Endpoint_Write_Control_Stream_LE>:
    201e:	20 91 69 05 	lds	r18, 0x0569
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    2022:	30 91 6a 05 	lds	r19, 0x056A
    2026:	26 17       	cp	r18, r22
    2028:	37 07       	cpc	r19, r23
    202a:	48 f0       	brcs	.+18     	; 0x203e <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    202c:	61 15       	cp	r22, r1
    202e:	71 05       	cpc	r23, r1
    2030:	39 f4       	brne	.+14     	; 0x2040 <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2032:	20 91 e8 00 	lds	r18, 0x00E8
    2036:	2e 77       	andi	r18, 0x7E	; 126
    2038:	20 93 e8 00 	sts	0x00E8, r18
    203c:	01 c0       	rjmp	.+2      	; 0x2040 <Endpoint_Write_Control_Stream_LE+0x22>
    203e:	b9 01       	movw	r22, r18
    2040:	fc 01       	movw	r30, r24
    2042:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    2044:	61 15       	cp	r22, r1
    2046:	71 05       	cpc	r23, r1
    2048:	a9 f1       	breq	.+106    	; 0x20b4 <Endpoint_Write_Control_Stream_LE+0x96>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    204a:	80 91 62 05 	lds	r24, 0x0562

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    204e:	88 23       	and	r24, r24
    2050:	e9 f1       	breq	.+122    	; 0x20cc <Endpoint_Write_Control_Stream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2052:	85 30       	cpi	r24, 0x05	; 5
    2054:	e9 f1       	breq	.+122    	; 0x20d0 <Endpoint_Write_Control_Stream_LE+0xb2>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2056:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    205a:	83 fd       	sbrc	r24, 3
    205c:	35 c0       	rjmp	.+106    	; 0x20c8 <Endpoint_Write_Control_Stream_LE+0xaa>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    205e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    2062:	82 ff       	sbrs	r24, 2
    2064:	06 c0       	rjmp	.+12     	; 0x2072 <Endpoint_Write_Control_Stream_LE+0x54>
    2066:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    206a:	82 ff       	sbrs	r24, 2
    206c:	26 c0       	rjmp	.+76     	; 0x20ba <Endpoint_Write_Control_Stream_LE+0x9c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    206e:	80 e0       	ldi	r24, 0x00	; 0
    2070:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2072:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
    2076:	80 ff       	sbrs	r24, 0
    2078:	e5 cf       	rjmp	.-54     	; 0x2044 <Endpoint_Write_Control_Stream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    207a:	20 91 f3 00 	lds	r18, 0x00F3
    207e:	80 91 f2 00 	lds	r24, 0x00F2
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    2086:	61 15       	cp	r22, r1
    2088:	71 05       	cpc	r23, r1
    208a:	51 f0       	breq	.+20     	; 0x20a0 <Endpoint_Write_Control_Stream_LE+0x82>
    208c:	88 30       	cpi	r24, 0x08	; 8
    208e:	91 05       	cpc	r25, r1
    2090:	38 f4       	brcc	.+14     	; 0x20a0 <Endpoint_Write_Control_Stream_LE+0x82>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    2092:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2094:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    2098:	61 50       	subi	r22, 0x01	; 1
    209a:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    209c:	01 96       	adiw	r24, 0x01	; 1
    209e:	f3 cf       	rjmp	.-26     	; 0x2086 <Endpoint_Write_Control_Stream_LE+0x68>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    20a0:	21 e0       	ldi	r18, 0x01	; 1
    20a2:	08 97       	sbiw	r24, 0x08	; 8
    20a4:	09 f0       	breq	.+2      	; 0x20a8 <Endpoint_Write_Control_Stream_LE+0x8a>
    20a6:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    20a8:	80 91 e8 00 	lds	r24, 0x00E8
    20ac:	8e 77       	andi	r24, 0x7E	; 126
    20ae:	80 93 e8 00 	sts	0x00E8, r24
    20b2:	c8 cf       	rjmp	.-112    	; 0x2044 <Endpoint_Write_Control_Stream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    20b4:	21 11       	cpse	r18, r1
    20b6:	c9 cf       	rjmp	.-110    	; 0x204a <Endpoint_Write_Control_Stream_LE+0x2c>
    20b8:	d6 cf       	rjmp	.-84     	; 0x2066 <Endpoint_Write_Control_Stream_LE+0x48>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    20ba:	80 91 62 05 	lds	r24, 0x0562

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    20be:	88 23       	and	r24, r24
    20c0:	29 f0       	breq	.+10     	; 0x20cc <Endpoint_Write_Control_Stream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    20c2:	85 30       	cpi	r24, 0x05	; 5
    20c4:	81 f6       	brne	.-96     	; 0x2066 <Endpoint_Write_Control_Stream_LE+0x48>
    20c6:	04 c0       	rjmp	.+8      	; 0x20d0 <Endpoint_Write_Control_Stream_LE+0xb2>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    20c8:	81 e0       	ldi	r24, 0x01	; 1
    20ca:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    20cc:	82 e0       	ldi	r24, 0x02	; 2
    20ce:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    20d0:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    20d2:	08 95       	ret

000020d4 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    20d4:	20 91 69 05 	lds	r18, 0x0569
    20d8:	30 91 6a 05 	lds	r19, 0x056A
    20dc:	26 17       	cp	r18, r22
    20de:	37 07       	cpc	r19, r23
    20e0:	48 f0       	brcs	.+18     	; 0x20f4 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    20e2:	61 15       	cp	r22, r1
    20e4:	71 05       	cpc	r23, r1
    20e6:	39 f4       	brne	.+14     	; 0x20f6 <Endpoint_Write_Control_PStream_LE+0x22>
    20e8:	20 91 e8 00 	lds	r18, 0x00E8
    20ec:	2e 77       	andi	r18, 0x7E	; 126
    20ee:	20 93 e8 00 	sts	0x00E8, r18
    20f2:	01 c0       	rjmp	.+2      	; 0x20f6 <Endpoint_Write_Control_PStream_LE+0x22>
    20f4:	b9 01       	movw	r22, r18
    20f6:	fc 01       	movw	r30, r24
    20f8:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    20fa:	61 15       	cp	r22, r1
    20fc:	71 05       	cpc	r23, r1
    20fe:	c1 f1       	breq	.+112    	; 0x2170 <Endpoint_Write_Control_PStream_LE+0x9c>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2100:	80 91 62 05 	lds	r24, 0x0562

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2104:	88 23       	and	r24, r24
    2106:	09 f4       	brne	.+2      	; 0x210a <Endpoint_Write_Control_PStream_LE+0x36>
    2108:	3f c0       	rjmp	.+126    	; 0x2188 <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    210a:	85 30       	cpi	r24, 0x05	; 5
    210c:	09 f4       	brne	.+2      	; 0x2110 <Endpoint_Write_Control_PStream_LE+0x3c>
    210e:	3e c0       	rjmp	.+124    	; 0x218c <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2110:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    2114:	83 fd       	sbrc	r24, 3
    2116:	36 c0       	rjmp	.+108    	; 0x2184 <Endpoint_Write_Control_PStream_LE+0xb0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2118:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    211c:	82 ff       	sbrs	r24, 2
    211e:	06 c0       	rjmp	.+12     	; 0x212c <Endpoint_Write_Control_PStream_LE+0x58>
    2120:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    2124:	82 ff       	sbrs	r24, 2
    2126:	27 c0       	rjmp	.+78     	; 0x2176 <Endpoint_Write_Control_PStream_LE+0xa2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    2128:	80 e0       	ldi	r24, 0x00	; 0
    212a:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    212c:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
    2130:	80 ff       	sbrs	r24, 0
    2132:	e3 cf       	rjmp	.-58     	; 0x20fa <Endpoint_Write_Control_PStream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    2134:	20 91 f3 00 	lds	r18, 0x00F3
    2138:	80 91 f2 00 	lds	r24, 0x00F2
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    2140:	61 15       	cp	r22, r1
    2142:	71 05       	cpc	r23, r1
    2144:	59 f0       	breq	.+22     	; 0x215c <Endpoint_Write_Control_PStream_LE+0x88>
    2146:	88 30       	cpi	r24, 0x08	; 8
    2148:	91 05       	cpc	r25, r1
    214a:	40 f4       	brcc	.+16     	; 0x215c <Endpoint_Write_Control_PStream_LE+0x88>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    214c:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    214e:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    2152:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    2154:	61 50       	subi	r22, 0x01	; 1
    2156:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    2158:	01 96       	adiw	r24, 0x01	; 1
    215a:	f2 cf       	rjmp	.-28     	; 0x2140 <Endpoint_Write_Control_PStream_LE+0x6c>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    215c:	21 e0       	ldi	r18, 0x01	; 1
    215e:	08 97       	sbiw	r24, 0x08	; 8
    2160:	09 f0       	breq	.+2      	; 0x2164 <Endpoint_Write_Control_PStream_LE+0x90>
    2162:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2164:	80 91 e8 00 	lds	r24, 0x00E8
    2168:	8e 77       	andi	r24, 0x7E	; 126
    216a:	80 93 e8 00 	sts	0x00E8, r24
    216e:	c5 cf       	rjmp	.-118    	; 0x20fa <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    2170:	21 11       	cpse	r18, r1
    2172:	c6 cf       	rjmp	.-116    	; 0x2100 <Endpoint_Write_Control_PStream_LE+0x2c>
    2174:	d5 cf       	rjmp	.-86     	; 0x2120 <Endpoint_Write_Control_PStream_LE+0x4c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2176:	80 91 62 05 	lds	r24, 0x0562

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    217a:	88 23       	and	r24, r24
    217c:	29 f0       	breq	.+10     	; 0x2188 <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    217e:	85 30       	cpi	r24, 0x05	; 5
    2180:	79 f6       	brne	.-98     	; 0x2120 <Endpoint_Write_Control_PStream_LE+0x4c>
    2182:	04 c0       	rjmp	.+8      	; 0x218c <Endpoint_Write_Control_PStream_LE+0xb8>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    2184:	81 e0       	ldi	r24, 0x01	; 1
    2186:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    2188:	82 e0       	ldi	r24, 0x02	; 2
    218a:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    218c:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    218e:	08 95       	ret

00002190 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    2190:	0f 93       	push	r16
    2192:	1f 93       	push	r17
    2194:	cf 93       	push	r28
    2196:	df 93       	push	r29
    2198:	cd b7       	in	r28, 0x3d	; 61
    219a:	de b7       	in	r29, 0x3e	; 62
    219c:	aa 97       	sbiw	r28, 0x2a	; 42
    219e:	0f b6       	in	r0, 0x3f	; 63
    21a0:	f8 94       	cli
    21a2:	de bf       	out	0x3e, r29	; 62
    21a4:	0f be       	out	0x3f, r0	; 63
    21a6:	cd bf       	out	0x3d, r28	; 61
    21a8:	e3 e6       	ldi	r30, 0x63	; 99
    21aa:	f5 e0       	ldi	r31, 0x05	; 5
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    21ac:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    21b0:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    21b2:	25 e0       	ldi	r18, 0x05	; 5
    21b4:	eb 36       	cpi	r30, 0x6B	; 107
    21b6:	f2 07       	cpc	r31, r18
    21b8:	c9 f7       	brne	.-14     	; 0x21ac <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    21ba:	0e 94 00 05 	call	0xa00	; 0xa00 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    21be:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    21c2:	83 ff       	sbrs	r24, 3
    21c4:	17 c1       	rjmp	.+558    	; 0x23f4 <USB_Device_ProcessControlRequest+0x264>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    21c6:	20 91 63 05 	lds	r18, 0x0563

		switch (USB_ControlRequest.bRequest)
    21ca:	30 91 64 05 	lds	r19, 0x0564
    21ce:	83 2f       	mov	r24, r19
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	8a 30       	cpi	r24, 0x0A	; 10
    21d4:	91 05       	cpc	r25, r1
    21d6:	08 f0       	brcs	.+2      	; 0x21da <USB_Device_ProcessControlRequest+0x4a>
    21d8:	0d c1       	rjmp	.+538    	; 0x23f4 <USB_Device_ProcessControlRequest+0x264>
    21da:	fc 01       	movw	r30, r24
    21dc:	ec 59       	subi	r30, 0x9C	; 156
    21de:	ff 4f       	sbci	r31, 0xFF	; 255
    21e0:	3f c1       	rjmp	.+638    	; 0x2460 <__tablejump2__>
    21e2:	20 38       	cpi	r18, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    21e4:	81 f0       	breq	.+32     	; 0x2206 <USB_Device_ProcessControlRequest+0x76>
    21e6:	22 38       	cpi	r18, 0x82	; 130
    21e8:	09 f0       	breq	.+2      	; 0x21ec <USB_Device_ProcessControlRequest+0x5c>
    21ea:	04 c1       	rjmp	.+520    	; 0x23f4 <USB_Device_ProcessControlRequest+0x264>
    21ec:	80 91 67 05 	lds	r24, 0x0567
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    21f0:	8f 70       	andi	r24, 0x0F	; 15
    21f2:	80 93 e9 00 	sts	0x00E9, r24
    21f6:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    21fa:	85 fb       	bst	r24, 5
    21fc:	88 27       	eor	r24, r24
    21fe:	80 f9       	bld	r24, 0
    2200:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2204:	06 c0       	rjmp	.+12     	; 0x2212 <USB_Device_ProcessControlRequest+0x82>
    2206:	80 91 5f 05 	lds	r24, 0x055F
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    220a:	90 91 60 05 	lds	r25, 0x0560
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    220e:	91 11       	cpse	r25, r1
    2210:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    2212:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2216:	97 7f       	andi	r25, 0xF7	; 247
    2218:	90 93 e8 00 	sts	0x00E8, r25
    221c:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    2220:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
    2224:	c3 c0       	rjmp	.+390    	; 0x23ac <USB_Device_ProcessControlRequest+0x21c>
    2226:	82 2f       	mov	r24, r18
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2228:	8d 7f       	andi	r24, 0xFD	; 253
    222a:	09 f0       	breq	.+2      	; 0x222e <USB_Device_ProcessControlRequest+0x9e>
    222c:	e3 c0       	rjmp	.+454    	; 0x23f4 <USB_Device_ProcessControlRequest+0x264>
    222e:	22 23       	and	r18, r18
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    2230:	19 f0       	breq	.+6      	; 0x2238 <USB_Device_ProcessControlRequest+0xa8>
    2232:	22 30       	cpi	r18, 0x02	; 2
    2234:	61 f0       	breq	.+24     	; 0x224e <USB_Device_ProcessControlRequest+0xbe>
    2236:	de c0       	rjmp	.+444    	; 0x23f4 <USB_Device_ProcessControlRequest+0x264>
    2238:	80 91 65 05 	lds	r24, 0x0565
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    223c:	81 30       	cpi	r24, 0x01	; 1
    223e:	09 f0       	breq	.+2      	; 0x2242 <USB_Device_ProcessControlRequest+0xb2>
    2240:	d9 c0       	rjmp	.+434    	; 0x23f4 <USB_Device_ProcessControlRequest+0x264>
    2242:	33 30       	cpi	r19, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    2244:	09 f0       	breq	.+2      	; 0x2248 <USB_Device_ProcessControlRequest+0xb8>
    2246:	80 e0       	ldi	r24, 0x00	; 0
    2248:	80 93 60 05 	sts	0x0560, r24
    224c:	28 c0       	rjmp	.+80     	; 0x229e <USB_Device_ProcessControlRequest+0x10e>
    224e:	80 91 65 05 	lds	r24, 0x0565

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    2252:	81 11       	cpse	r24, r1
    2254:	24 c0       	rjmp	.+72     	; 0x229e <USB_Device_ProcessControlRequest+0x10e>
    2256:	20 91 67 05 	lds	r18, 0x0567
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    225a:	2f 70       	andi	r18, 0x0F	; 15
    225c:	09 f4       	brne	.+2      	; 0x2260 <USB_Device_ProcessControlRequest+0xd0>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    225e:	ca c0       	rjmp	.+404    	; 0x23f4 <USB_Device_ProcessControlRequest+0x264>
    2260:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2264:	80 91 eb 00 	lds	r24, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    2268:	80 ff       	sbrs	r24, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    226a:	19 c0       	rjmp	.+50     	; 0x229e <USB_Device_ProcessControlRequest+0x10e>
    226c:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    2270:	33 30       	cpi	r19, 0x03	; 3
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    2272:	11 f4       	brne	.+4      	; 0x2278 <USB_Device_ProcessControlRequest+0xe8>
    2274:	80 62       	ori	r24, 0x20	; 32
    2276:	11 c0       	rjmp	.+34     	; 0x229a <USB_Device_ProcessControlRequest+0x10a>
    2278:	80 61       	ori	r24, 0x10	; 16
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    227a:	80 93 eb 00 	sts	0x00EB, r24
    227e:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	02 2e       	mov	r0, r18
    2284:	01 c0       	rjmp	.+2      	; 0x2288 <USB_Device_ProcessControlRequest+0xf8>
    2286:	88 0f       	add	r24, r24
    2288:	0a 94       	dec	r0
    228a:	ea f7       	brpl	.-6      	; 0x2286 <USB_Device_ProcessControlRequest+0xf6>
    228c:	80 93 ea 00 	sts	0x00EA, r24
    2290:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
    2294:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    2298:	88 60       	ori	r24, 0x08	; 8
    229a:	80 93 eb 00 	sts	0x00EB, r24
    229e:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    22a2:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    22a6:	87 7f       	andi	r24, 0xF7	; 247
    22a8:	84 c0       	rjmp	.+264    	; 0x23b2 <USB_Device_ProcessControlRequest+0x222>
    22aa:	21 11       	cpse	r18, r1
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    22ac:	a3 c0       	rjmp	.+326    	; 0x23f4 <USB_Device_ProcessControlRequest+0x264>
    22ae:	10 91 65 05 	lds	r17, 0x0565
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
    22b2:	1f 77       	andi	r17, 0x7F	; 127
    22b4:	0f b7       	in	r16, 0x3f	; 63
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    22b6:	f8 94       	cli
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    22b8:	80 91 e8 00 	lds	r24, 0x00E8
    22bc:	87 7f       	andi	r24, 0xF7	; 247
    22be:	80 93 e8 00 	sts	0x00E8, r24
    22c2:	70 dc       	rcall	.-1824   	; 0x1ba4 <Endpoint_ClearStatusStage>
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    22c4:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    22c8:	80 ff       	sbrs	r24, 0
    22ca:	fc cf       	rjmp	.-8      	; 0x22c4 <USB_Device_ProcessControlRequest+0x134>

	while (!(Endpoint_IsINReady()));
    22cc:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    22d0:	80 78       	andi	r24, 0x80	; 128
    22d2:	81 2b       	or	r24, r17
    22d4:	80 93 e3 00 	sts	0x00E3, r24

				UDADDR = Temp;
    22d8:	80 68       	ori	r24, 0x80	; 128
    22da:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
    22de:	11 23       	and	r17, r17
    22e0:	11 f0       	breq	.+4      	; 0x22e6 <USB_Device_ProcessControlRequest+0x156>

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    22e2:	83 e0       	ldi	r24, 0x03	; 3
    22e4:	01 c0       	rjmp	.+2      	; 0x22e8 <USB_Device_ProcessControlRequest+0x158>
    22e6:	82 e0       	ldi	r24, 0x02	; 2
    22e8:	80 93 62 05 	sts	0x0562, r24
    22ec:	0f bf       	out	0x3f, r16	; 63
    22ee:	82 c0       	rjmp	.+260    	; 0x23f4 <USB_Device_ProcessControlRequest+0x264>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    22f0:	20 58       	subi	r18, 0x80	; 128
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
				#endif

				GCC_MEMORY_BARRIER();
    22f2:	22 30       	cpi	r18, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    22f4:	08 f0       	brcs	.+2      	; 0x22f8 <USB_Device_ProcessControlRequest+0x168>
    22f6:	7e c0       	rjmp	.+252    	; 0x23f4 <USB_Device_ProcessControlRequest+0x264>
    22f8:	80 91 65 05 	lds	r24, 0x0565
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    22fc:	90 91 66 05 	lds	r25, 0x0566
    2300:	8c 3d       	cpi	r24, 0xDC	; 220
    2302:	23 e0       	ldi	r18, 0x03	; 3
    2304:	92 07       	cpc	r25, r18
    2306:	71 f5       	brne	.+92     	; 0x2364 <USB_Device_ProcessControlRequest+0x1d4>
    2308:	83 e0       	ldi	r24, 0x03	; 3
    230a:	8a 83       	std	Y+2, r24	; 0x02
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    230c:	8a e2       	ldi	r24, 0x2A	; 42
    230e:	89 83       	std	Y+1, r24	; 0x01
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    2310:	4f b7       	in	r20, 0x3f	; 63
    2312:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    2314:	de 01       	movw	r26, r28
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    2316:	13 96       	adiw	r26, 0x03	; 3
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    2318:	20 e0       	ldi	r18, 0x00	; 0
    231a:	3e e0       	ldi	r19, 0x0E	; 14
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    231c:	51 e2       	ldi	r21, 0x21	; 33
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    231e:	e3 2f       	mov	r30, r19

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    2320:	f0 e0       	ldi	r31, 0x00	; 0
    2322:	50 93 57 00 	sts	0x0057, r21
    2326:	e4 91       	lpm	r30, Z
    2328:	20 ff       	sbrs	r18, 0
    232a:	03 c0       	rjmp	.+6      	; 0x2332 <USB_Device_ProcessControlRequest+0x1a2>

					if (SerialCharNum & 0x01)
    232c:	e2 95       	swap	r30
    232e:	ef 70       	andi	r30, 0x0F	; 15
					{
						SerialByte >>= 4;
    2330:	3f 5f       	subi	r19, 0xFF	; 255
    2332:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    2334:	8e 2f       	mov	r24, r30
					}

					SerialByte &= 0x0F;
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	ea 30       	cpi	r30, 0x0A	; 10
    233a:	10 f0       	brcs	.+4      	; 0x2340 <USB_Device_ProcessControlRequest+0x1b0>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    233c:	c7 96       	adiw	r24, 0x37	; 55
    233e:	01 c0       	rjmp	.+2      	; 0x2342 <USB_Device_ProcessControlRequest+0x1b2>
    2340:	c0 96       	adiw	r24, 0x30	; 48
    2342:	8d 93       	st	X+, r24
    2344:	9d 93       	st	X+, r25
    2346:	2f 5f       	subi	r18, 0xFF	; 255
    2348:	24 31       	cpi	r18, 0x14	; 20
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    234a:	49 f7       	brne	.-46     	; 0x231e <USB_Device_ProcessControlRequest+0x18e>
    234c:	4f bf       	out	0x3f, r20	; 63
    234e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2352:	87 7f       	andi	r24, 0xF7	; 247
    2354:	80 93 e8 00 	sts	0x00E8, r24
    2358:	6a e2       	ldi	r22, 0x2A	; 42
    235a:	70 e0       	ldi	r23, 0x00	; 0

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    235c:	ce 01       	movw	r24, r28
    235e:	01 96       	adiw	r24, 0x01	; 1
    2360:	5e de       	rcall	.-836    	; 0x201e <Endpoint_Write_Control_Stream_LE>
    2362:	13 c0       	rjmp	.+38     	; 0x238a <USB_Device_ProcessControlRequest+0x1fa>
    2364:	ae 01       	movw	r20, r28
    2366:	4f 5f       	subi	r20, 0xFF	; 255
    2368:	5f 4f       	sbci	r21, 0xFF	; 255
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    236a:	60 91 67 05 	lds	r22, 0x0567
    236e:	0e 94 c3 08 	call	0x1186	; 0x1186 <CALLBACK_USB_GetDescriptor>
    2372:	00 97       	sbiw	r24, 0x00	; 0
    2374:	09 f4       	brne	.+2      	; 0x2378 <USB_Device_ProcessControlRequest+0x1e8>
    2376:	3e c0       	rjmp	.+124    	; 0x23f4 <USB_Device_ProcessControlRequest+0x264>
    2378:	20 91 e8 00 	lds	r18, 0x00E8
    237c:	27 7f       	andi	r18, 0xF7	; 247
    237e:	20 93 e8 00 	sts	0x00E8, r18
    2382:	bc 01       	movw	r22, r24
    2384:	89 81       	ldd	r24, Y+1	; 0x01
    2386:	9a 81       	ldd	r25, Y+2	; 0x02
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    2388:	a5 de       	rcall	.-694    	; 0x20d4 <Endpoint_Write_Control_PStream_LE>
    238a:	80 91 e8 00 	lds	r24, 0x00E8
    238e:	8b 77       	andi	r24, 0x7B	; 123
    2390:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2394:	2f c0       	rjmp	.+94     	; 0x23f4 <USB_Device_ProcessControlRequest+0x264>
    2396:	20 38       	cpi	r18, 0x80	; 128
    2398:	69 f5       	brne	.+90     	; 0x23f4 <USB_Device_ProcessControlRequest+0x264>
    239a:	80 91 e8 00 	lds	r24, 0x00E8
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    239e:	87 7f       	andi	r24, 0xF7	; 247
    23a0:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    23a4:	80 91 5e 05 	lds	r24, 0x055E
    23a8:	80 93 f1 00 	sts	0x00F1, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    23ac:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    23b0:	8e 77       	andi	r24, 0x7E	; 126
    23b2:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    23b6:	f6 db       	rcall	.-2068   	; 0x1ba4 <Endpoint_ClearStatusStage>
    23b8:	1d c0       	rjmp	.+58     	; 0x23f4 <USB_Device_ProcessControlRequest+0x264>
    23ba:	21 11       	cpse	r18, r1
    23bc:	1b c0       	rjmp	.+54     	; 0x23f4 <USB_Device_ProcessControlRequest+0x264>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    23be:	90 91 65 05 	lds	r25, 0x0565
    23c2:	92 30       	cpi	r25, 0x02	; 2
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    23c4:	b8 f4       	brcc	.+46     	; 0x23f4 <USB_Device_ProcessControlRequest+0x264>
    23c6:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    23ca:	87 7f       	andi	r24, 0xF7	; 247
    23cc:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    23d0:	90 93 5e 05 	sts	0x055E, r25
    23d4:	e7 db       	rcall	.-2098   	; 0x1ba4 <Endpoint_ClearStatusStage>
    23d6:	80 91 5e 05 	lds	r24, 0x055E
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    23da:	81 11       	cpse	r24, r1
    23dc:	04 c0       	rjmp	.+8      	; 0x23e6 <USB_Device_ProcessControlRequest+0x256>

	Endpoint_ClearStatusStage();
    23de:	80 91 e3 00 	lds	r24, 0x00E3

	if (USB_Device_ConfigurationNumber)
    23e2:	87 ff       	sbrs	r24, 7
    23e4:	02 c0       	rjmp	.+4      	; 0x23ea <USB_Device_ProcessControlRequest+0x25a>
    23e6:	84 e0       	ldi	r24, 0x04	; 4
    23e8:	01 c0       	rjmp	.+2      	; 0x23ec <USB_Device_ProcessControlRequest+0x25c>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    23ea:	81 e0       	ldi	r24, 0x01	; 1
    23ec:	80 93 62 05 	sts	0x0562, r24
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    23f0:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <EVENT_USB_Device_ConfigurationChanged>
    23f4:	80 91 e8 00 	lds	r24, 0x00E8
    23f8:	83 ff       	sbrs	r24, 3
    23fa:	0a c0       	rjmp	.+20     	; 0x2410 <USB_Device_ProcessControlRequest+0x280>

	EVENT_USB_Device_ConfigurationChanged();
    23fc:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2400:	80 62       	ori	r24, 0x20	; 32
    2402:	80 93 eb 00 	sts	0x00EB, r24

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    2406:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    240a:	87 7f       	andi	r24, 0xF7	; 247
    240c:	80 93 e8 00 	sts	0x00E8, r24
    2410:	aa 96       	adiw	r28, 0x2a	; 42
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2412:	0f b6       	in	r0, 0x3f	; 63
    2414:	f8 94       	cli
    2416:	de bf       	out	0x3e, r29	; 62
    2418:	0f be       	out	0x3f, r0	; 63
    241a:	cd bf       	out	0x3d, r28	; 61
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
    241c:	df 91       	pop	r29
    241e:	cf 91       	pop	r28
    2420:	1f 91       	pop	r17
    2422:	0f 91       	pop	r16
    2424:	08 95       	ret

00002426 <USB_Event_Stub>:
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

// cppcheck-suppress unusedFunction
void USB_Event_Stub(void)
{
    2426:	08 95       	ret

00002428 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    2428:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
    242a:	80 91 62 05 	lds	r24, 0x0562
    242e:	88 23       	and	r24, r24
    2430:	a9 f0       	breq	.+42     	; 0x245c <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    2432:	80 91 e9 00 	lds	r24, 0x00E9
    2436:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    2438:	90 91 ec 00 	lds	r25, 0x00EC
    243c:	90 ff       	sbrs	r25, 0
    243e:	02 c0       	rjmp	.+4      	; 0x2444 <USB_USBTask+0x1c>
    2440:	90 e8       	ldi	r25, 0x80	; 128
    2442:	01 c0       	rjmp	.+2      	; 0x2446 <USB_USBTask+0x1e>
    2444:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    2446:	c9 2f       	mov	r28, r25
    2448:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    244a:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    244e:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
    2452:	83 fd       	sbrc	r24, 3
		  USB_Device_ProcessControlRequest();
    2454:	9d de       	rcall	.-710    	; 0x2190 <USB_Device_ProcessControlRequest>
    2456:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2458:	c0 93 e9 00 	sts	0x00E9, r28
    245c:	cf 91       	pop	r28
		#if defined(USB_CAN_BE_HOST)
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
		#endif
	#endif
}
    245e:	08 95       	ret

00002460 <__tablejump2__>:
    2460:	ee 0f       	add	r30, r30
    2462:	ff 1f       	adc	r31, r31

00002464 <__tablejump__>:
    2464:	05 90       	lpm	r0, Z+
    2466:	f4 91       	lpm	r31, Z
    2468:	e0 2d       	mov	r30, r0
    246a:	09 94       	ijmp

0000246c <__prologue_saves__>:
    246c:	2f 92       	push	r2
    246e:	3f 92       	push	r3
    2470:	4f 92       	push	r4
    2472:	5f 92       	push	r5
    2474:	6f 92       	push	r6
    2476:	7f 92       	push	r7
    2478:	8f 92       	push	r8
    247a:	9f 92       	push	r9
    247c:	af 92       	push	r10
    247e:	bf 92       	push	r11
    2480:	cf 92       	push	r12
    2482:	df 92       	push	r13
    2484:	ef 92       	push	r14
    2486:	ff 92       	push	r15
    2488:	0f 93       	push	r16
    248a:	1f 93       	push	r17
    248c:	cf 93       	push	r28
    248e:	df 93       	push	r29
    2490:	cd b7       	in	r28, 0x3d	; 61
    2492:	de b7       	in	r29, 0x3e	; 62
    2494:	ca 1b       	sub	r28, r26
    2496:	db 0b       	sbc	r29, r27
    2498:	0f b6       	in	r0, 0x3f	; 63
    249a:	f8 94       	cli
    249c:	de bf       	out	0x3e, r29	; 62
    249e:	0f be       	out	0x3f, r0	; 63
    24a0:	cd bf       	out	0x3d, r28	; 61
    24a2:	09 94       	ijmp

000024a4 <__epilogue_restores__>:
    24a4:	2a 88       	ldd	r2, Y+18	; 0x12
    24a6:	39 88       	ldd	r3, Y+17	; 0x11
    24a8:	48 88       	ldd	r4, Y+16	; 0x10
    24aa:	5f 84       	ldd	r5, Y+15	; 0x0f
    24ac:	6e 84       	ldd	r6, Y+14	; 0x0e
    24ae:	7d 84       	ldd	r7, Y+13	; 0x0d
    24b0:	8c 84       	ldd	r8, Y+12	; 0x0c
    24b2:	9b 84       	ldd	r9, Y+11	; 0x0b
    24b4:	aa 84       	ldd	r10, Y+10	; 0x0a
    24b6:	b9 84       	ldd	r11, Y+9	; 0x09
    24b8:	c8 84       	ldd	r12, Y+8	; 0x08
    24ba:	df 80       	ldd	r13, Y+7	; 0x07
    24bc:	ee 80       	ldd	r14, Y+6	; 0x06
    24be:	fd 80       	ldd	r15, Y+5	; 0x05
    24c0:	0c 81       	ldd	r16, Y+4	; 0x04
    24c2:	1b 81       	ldd	r17, Y+3	; 0x03
    24c4:	aa 81       	ldd	r26, Y+2	; 0x02
    24c6:	b9 81       	ldd	r27, Y+1	; 0x01
    24c8:	ce 0f       	add	r28, r30
    24ca:	d1 1d       	adc	r29, r1
    24cc:	0f b6       	in	r0, 0x3f	; 63
    24ce:	f8 94       	cli
    24d0:	de bf       	out	0x3e, r29	; 62
    24d2:	0f be       	out	0x3f, r0	; 63
    24d4:	cd bf       	out	0x3d, r28	; 61
    24d6:	ed 01       	movw	r28, r26
    24d8:	08 95       	ret

000024da <__cmpsf2>:
    24da:	d4 d0       	rcall	.+424    	; 0x2684 <__fp_cmp>
    24dc:	08 f4       	brcc	.+2      	; 0x24e0 <__cmpsf2+0x6>
    24de:	81 e0       	ldi	r24, 0x01	; 1
    24e0:	08 95       	ret

000024e2 <__divsf3>:
    24e2:	0c d0       	rcall	.+24     	; 0x24fc <__divsf3x>
    24e4:	0a c1       	rjmp	.+532    	; 0x26fa <__fp_round>
    24e6:	02 d1       	rcall	.+516    	; 0x26ec <__fp_pscB>
    24e8:	40 f0       	brcs	.+16     	; 0x24fa <__divsf3+0x18>
    24ea:	f9 d0       	rcall	.+498    	; 0x26de <__fp_pscA>
    24ec:	30 f0       	brcs	.+12     	; 0x24fa <__divsf3+0x18>
    24ee:	21 f4       	brne	.+8      	; 0x24f8 <__divsf3+0x16>
    24f0:	5f 3f       	cpi	r21, 0xFF	; 255
    24f2:	19 f0       	breq	.+6      	; 0x24fa <__divsf3+0x18>
    24f4:	eb c0       	rjmp	.+470    	; 0x26cc <__fp_inf>
    24f6:	51 11       	cpse	r21, r1
    24f8:	34 c1       	rjmp	.+616    	; 0x2762 <__fp_szero>
    24fa:	ee c0       	rjmp	.+476    	; 0x26d8 <__fp_nan>

000024fc <__divsf3x>:
    24fc:	0f d1       	rcall	.+542    	; 0x271c <__fp_split3>
    24fe:	98 f3       	brcs	.-26     	; 0x24e6 <__divsf3+0x4>

00002500 <__divsf3_pse>:
    2500:	99 23       	and	r25, r25
    2502:	c9 f3       	breq	.-14     	; 0x24f6 <__divsf3+0x14>
    2504:	55 23       	and	r21, r21
    2506:	b1 f3       	breq	.-20     	; 0x24f4 <__divsf3+0x12>
    2508:	95 1b       	sub	r25, r21
    250a:	55 0b       	sbc	r21, r21
    250c:	bb 27       	eor	r27, r27
    250e:	aa 27       	eor	r26, r26
    2510:	62 17       	cp	r22, r18
    2512:	73 07       	cpc	r23, r19
    2514:	84 07       	cpc	r24, r20
    2516:	38 f0       	brcs	.+14     	; 0x2526 <__divsf3_pse+0x26>
    2518:	9f 5f       	subi	r25, 0xFF	; 255
    251a:	5f 4f       	sbci	r21, 0xFF	; 255
    251c:	22 0f       	add	r18, r18
    251e:	33 1f       	adc	r19, r19
    2520:	44 1f       	adc	r20, r20
    2522:	aa 1f       	adc	r26, r26
    2524:	a9 f3       	breq	.-22     	; 0x2510 <__divsf3_pse+0x10>
    2526:	33 d0       	rcall	.+102    	; 0x258e <__divsf3_pse+0x8e>
    2528:	0e 2e       	mov	r0, r30
    252a:	3a f0       	brmi	.+14     	; 0x253a <__divsf3_pse+0x3a>
    252c:	e0 e8       	ldi	r30, 0x80	; 128
    252e:	30 d0       	rcall	.+96     	; 0x2590 <__divsf3_pse+0x90>
    2530:	91 50       	subi	r25, 0x01	; 1
    2532:	50 40       	sbci	r21, 0x00	; 0
    2534:	e6 95       	lsr	r30
    2536:	00 1c       	adc	r0, r0
    2538:	ca f7       	brpl	.-14     	; 0x252c <__divsf3_pse+0x2c>
    253a:	29 d0       	rcall	.+82     	; 0x258e <__divsf3_pse+0x8e>
    253c:	fe 2f       	mov	r31, r30
    253e:	27 d0       	rcall	.+78     	; 0x258e <__divsf3_pse+0x8e>
    2540:	66 0f       	add	r22, r22
    2542:	77 1f       	adc	r23, r23
    2544:	88 1f       	adc	r24, r24
    2546:	bb 1f       	adc	r27, r27
    2548:	26 17       	cp	r18, r22
    254a:	37 07       	cpc	r19, r23
    254c:	48 07       	cpc	r20, r24
    254e:	ab 07       	cpc	r26, r27
    2550:	b0 e8       	ldi	r27, 0x80	; 128
    2552:	09 f0       	breq	.+2      	; 0x2556 <__divsf3_pse+0x56>
    2554:	bb 0b       	sbc	r27, r27
    2556:	80 2d       	mov	r24, r0
    2558:	bf 01       	movw	r22, r30
    255a:	ff 27       	eor	r31, r31
    255c:	93 58       	subi	r25, 0x83	; 131
    255e:	5f 4f       	sbci	r21, 0xFF	; 255
    2560:	2a f0       	brmi	.+10     	; 0x256c <__divsf3_pse+0x6c>
    2562:	9e 3f       	cpi	r25, 0xFE	; 254
    2564:	51 05       	cpc	r21, r1
    2566:	68 f0       	brcs	.+26     	; 0x2582 <__divsf3_pse+0x82>
    2568:	b1 c0       	rjmp	.+354    	; 0x26cc <__fp_inf>
    256a:	fb c0       	rjmp	.+502    	; 0x2762 <__fp_szero>
    256c:	5f 3f       	cpi	r21, 0xFF	; 255
    256e:	ec f3       	brlt	.-6      	; 0x256a <__divsf3_pse+0x6a>
    2570:	98 3e       	cpi	r25, 0xE8	; 232
    2572:	dc f3       	brlt	.-10     	; 0x256a <__divsf3_pse+0x6a>
    2574:	86 95       	lsr	r24
    2576:	77 95       	ror	r23
    2578:	67 95       	ror	r22
    257a:	b7 95       	ror	r27
    257c:	f7 95       	ror	r31
    257e:	9f 5f       	subi	r25, 0xFF	; 255
    2580:	c9 f7       	brne	.-14     	; 0x2574 <__divsf3_pse+0x74>
    2582:	88 0f       	add	r24, r24
    2584:	91 1d       	adc	r25, r1
    2586:	96 95       	lsr	r25
    2588:	87 95       	ror	r24
    258a:	97 f9       	bld	r25, 7
    258c:	08 95       	ret
    258e:	e1 e0       	ldi	r30, 0x01	; 1
    2590:	66 0f       	add	r22, r22
    2592:	77 1f       	adc	r23, r23
    2594:	88 1f       	adc	r24, r24
    2596:	bb 1f       	adc	r27, r27
    2598:	62 17       	cp	r22, r18
    259a:	73 07       	cpc	r23, r19
    259c:	84 07       	cpc	r24, r20
    259e:	ba 07       	cpc	r27, r26
    25a0:	20 f0       	brcs	.+8      	; 0x25aa <__divsf3_pse+0xaa>
    25a2:	62 1b       	sub	r22, r18
    25a4:	73 0b       	sbc	r23, r19
    25a6:	84 0b       	sbc	r24, r20
    25a8:	ba 0b       	sbc	r27, r26
    25aa:	ee 1f       	adc	r30, r30
    25ac:	88 f7       	brcc	.-30     	; 0x2590 <__divsf3_pse+0x90>
    25ae:	e0 95       	com	r30
    25b0:	08 95       	ret

000025b2 <__fixunssfsi>:
    25b2:	bc d0       	rcall	.+376    	; 0x272c <__fp_splitA>
    25b4:	88 f0       	brcs	.+34     	; 0x25d8 <__fixunssfsi+0x26>
    25b6:	9f 57       	subi	r25, 0x7F	; 127
    25b8:	90 f0       	brcs	.+36     	; 0x25de <__fixunssfsi+0x2c>
    25ba:	b9 2f       	mov	r27, r25
    25bc:	99 27       	eor	r25, r25
    25be:	b7 51       	subi	r27, 0x17	; 23
    25c0:	a0 f0       	brcs	.+40     	; 0x25ea <__fixunssfsi+0x38>
    25c2:	d1 f0       	breq	.+52     	; 0x25f8 <__fixunssfsi+0x46>
    25c4:	66 0f       	add	r22, r22
    25c6:	77 1f       	adc	r23, r23
    25c8:	88 1f       	adc	r24, r24
    25ca:	99 1f       	adc	r25, r25
    25cc:	1a f0       	brmi	.+6      	; 0x25d4 <__fixunssfsi+0x22>
    25ce:	ba 95       	dec	r27
    25d0:	c9 f7       	brne	.-14     	; 0x25c4 <__fixunssfsi+0x12>
    25d2:	12 c0       	rjmp	.+36     	; 0x25f8 <__fixunssfsi+0x46>
    25d4:	b1 30       	cpi	r27, 0x01	; 1
    25d6:	81 f0       	breq	.+32     	; 0x25f8 <__fixunssfsi+0x46>
    25d8:	c3 d0       	rcall	.+390    	; 0x2760 <__fp_zero>
    25da:	b1 e0       	ldi	r27, 0x01	; 1
    25dc:	08 95       	ret
    25de:	c0 c0       	rjmp	.+384    	; 0x2760 <__fp_zero>
    25e0:	67 2f       	mov	r22, r23
    25e2:	78 2f       	mov	r23, r24
    25e4:	88 27       	eor	r24, r24
    25e6:	b8 5f       	subi	r27, 0xF8	; 248
    25e8:	39 f0       	breq	.+14     	; 0x25f8 <__fixunssfsi+0x46>
    25ea:	b9 3f       	cpi	r27, 0xF9	; 249
    25ec:	cc f3       	brlt	.-14     	; 0x25e0 <__fixunssfsi+0x2e>
    25ee:	86 95       	lsr	r24
    25f0:	77 95       	ror	r23
    25f2:	67 95       	ror	r22
    25f4:	b3 95       	inc	r27
    25f6:	d9 f7       	brne	.-10     	; 0x25ee <__fixunssfsi+0x3c>
    25f8:	3e f4       	brtc	.+14     	; 0x2608 <__fixunssfsi+0x56>
    25fa:	90 95       	com	r25
    25fc:	80 95       	com	r24
    25fe:	70 95       	com	r23
    2600:	61 95       	neg	r22
    2602:	7f 4f       	sbci	r23, 0xFF	; 255
    2604:	8f 4f       	sbci	r24, 0xFF	; 255
    2606:	9f 4f       	sbci	r25, 0xFF	; 255
    2608:	08 95       	ret

0000260a <__floatunsisf>:
    260a:	e8 94       	clt
    260c:	09 c0       	rjmp	.+18     	; 0x2620 <__floatsisf+0x12>

0000260e <__floatsisf>:
    260e:	97 fb       	bst	r25, 7
    2610:	3e f4       	brtc	.+14     	; 0x2620 <__floatsisf+0x12>
    2612:	90 95       	com	r25
    2614:	80 95       	com	r24
    2616:	70 95       	com	r23
    2618:	61 95       	neg	r22
    261a:	7f 4f       	sbci	r23, 0xFF	; 255
    261c:	8f 4f       	sbci	r24, 0xFF	; 255
    261e:	9f 4f       	sbci	r25, 0xFF	; 255
    2620:	99 23       	and	r25, r25
    2622:	a9 f0       	breq	.+42     	; 0x264e <__floatsisf+0x40>
    2624:	f9 2f       	mov	r31, r25
    2626:	96 e9       	ldi	r25, 0x96	; 150
    2628:	bb 27       	eor	r27, r27
    262a:	93 95       	inc	r25
    262c:	f6 95       	lsr	r31
    262e:	87 95       	ror	r24
    2630:	77 95       	ror	r23
    2632:	67 95       	ror	r22
    2634:	b7 95       	ror	r27
    2636:	f1 11       	cpse	r31, r1
    2638:	f8 cf       	rjmp	.-16     	; 0x262a <__floatsisf+0x1c>
    263a:	fa f4       	brpl	.+62     	; 0x267a <__floatsisf+0x6c>
    263c:	bb 0f       	add	r27, r27
    263e:	11 f4       	brne	.+4      	; 0x2644 <__floatsisf+0x36>
    2640:	60 ff       	sbrs	r22, 0
    2642:	1b c0       	rjmp	.+54     	; 0x267a <__floatsisf+0x6c>
    2644:	6f 5f       	subi	r22, 0xFF	; 255
    2646:	7f 4f       	sbci	r23, 0xFF	; 255
    2648:	8f 4f       	sbci	r24, 0xFF	; 255
    264a:	9f 4f       	sbci	r25, 0xFF	; 255
    264c:	16 c0       	rjmp	.+44     	; 0x267a <__floatsisf+0x6c>
    264e:	88 23       	and	r24, r24
    2650:	11 f0       	breq	.+4      	; 0x2656 <__floatsisf+0x48>
    2652:	96 e9       	ldi	r25, 0x96	; 150
    2654:	11 c0       	rjmp	.+34     	; 0x2678 <__floatsisf+0x6a>
    2656:	77 23       	and	r23, r23
    2658:	21 f0       	breq	.+8      	; 0x2662 <__floatsisf+0x54>
    265a:	9e e8       	ldi	r25, 0x8E	; 142
    265c:	87 2f       	mov	r24, r23
    265e:	76 2f       	mov	r23, r22
    2660:	05 c0       	rjmp	.+10     	; 0x266c <__floatsisf+0x5e>
    2662:	66 23       	and	r22, r22
    2664:	71 f0       	breq	.+28     	; 0x2682 <__floatsisf+0x74>
    2666:	96 e8       	ldi	r25, 0x86	; 134
    2668:	86 2f       	mov	r24, r22
    266a:	70 e0       	ldi	r23, 0x00	; 0
    266c:	60 e0       	ldi	r22, 0x00	; 0
    266e:	2a f0       	brmi	.+10     	; 0x267a <__floatsisf+0x6c>
    2670:	9a 95       	dec	r25
    2672:	66 0f       	add	r22, r22
    2674:	77 1f       	adc	r23, r23
    2676:	88 1f       	adc	r24, r24
    2678:	da f7       	brpl	.-10     	; 0x2670 <__floatsisf+0x62>
    267a:	88 0f       	add	r24, r24
    267c:	96 95       	lsr	r25
    267e:	87 95       	ror	r24
    2680:	97 f9       	bld	r25, 7
    2682:	08 95       	ret

00002684 <__fp_cmp>:
    2684:	99 0f       	add	r25, r25
    2686:	00 08       	sbc	r0, r0
    2688:	55 0f       	add	r21, r21
    268a:	aa 0b       	sbc	r26, r26
    268c:	e0 e8       	ldi	r30, 0x80	; 128
    268e:	fe ef       	ldi	r31, 0xFE	; 254
    2690:	16 16       	cp	r1, r22
    2692:	17 06       	cpc	r1, r23
    2694:	e8 07       	cpc	r30, r24
    2696:	f9 07       	cpc	r31, r25
    2698:	c0 f0       	brcs	.+48     	; 0x26ca <__fp_cmp+0x46>
    269a:	12 16       	cp	r1, r18
    269c:	13 06       	cpc	r1, r19
    269e:	e4 07       	cpc	r30, r20
    26a0:	f5 07       	cpc	r31, r21
    26a2:	98 f0       	brcs	.+38     	; 0x26ca <__fp_cmp+0x46>
    26a4:	62 1b       	sub	r22, r18
    26a6:	73 0b       	sbc	r23, r19
    26a8:	84 0b       	sbc	r24, r20
    26aa:	95 0b       	sbc	r25, r21
    26ac:	39 f4       	brne	.+14     	; 0x26bc <__fp_cmp+0x38>
    26ae:	0a 26       	eor	r0, r26
    26b0:	61 f0       	breq	.+24     	; 0x26ca <__fp_cmp+0x46>
    26b2:	23 2b       	or	r18, r19
    26b4:	24 2b       	or	r18, r20
    26b6:	25 2b       	or	r18, r21
    26b8:	21 f4       	brne	.+8      	; 0x26c2 <__fp_cmp+0x3e>
    26ba:	08 95       	ret
    26bc:	0a 26       	eor	r0, r26
    26be:	09 f4       	brne	.+2      	; 0x26c2 <__fp_cmp+0x3e>
    26c0:	a1 40       	sbci	r26, 0x01	; 1
    26c2:	a6 95       	lsr	r26
    26c4:	8f ef       	ldi	r24, 0xFF	; 255
    26c6:	81 1d       	adc	r24, r1
    26c8:	81 1d       	adc	r24, r1
    26ca:	08 95       	ret

000026cc <__fp_inf>:
    26cc:	97 f9       	bld	r25, 7
    26ce:	9f 67       	ori	r25, 0x7F	; 127
    26d0:	80 e8       	ldi	r24, 0x80	; 128
    26d2:	70 e0       	ldi	r23, 0x00	; 0
    26d4:	60 e0       	ldi	r22, 0x00	; 0
    26d6:	08 95       	ret

000026d8 <__fp_nan>:
    26d8:	9f ef       	ldi	r25, 0xFF	; 255
    26da:	80 ec       	ldi	r24, 0xC0	; 192
    26dc:	08 95       	ret

000026de <__fp_pscA>:
    26de:	00 24       	eor	r0, r0
    26e0:	0a 94       	dec	r0
    26e2:	16 16       	cp	r1, r22
    26e4:	17 06       	cpc	r1, r23
    26e6:	18 06       	cpc	r1, r24
    26e8:	09 06       	cpc	r0, r25
    26ea:	08 95       	ret

000026ec <__fp_pscB>:
    26ec:	00 24       	eor	r0, r0
    26ee:	0a 94       	dec	r0
    26f0:	12 16       	cp	r1, r18
    26f2:	13 06       	cpc	r1, r19
    26f4:	14 06       	cpc	r1, r20
    26f6:	05 06       	cpc	r0, r21
    26f8:	08 95       	ret

000026fa <__fp_round>:
    26fa:	09 2e       	mov	r0, r25
    26fc:	03 94       	inc	r0
    26fe:	00 0c       	add	r0, r0
    2700:	11 f4       	brne	.+4      	; 0x2706 <__fp_round+0xc>
    2702:	88 23       	and	r24, r24
    2704:	52 f0       	brmi	.+20     	; 0x271a <__fp_round+0x20>
    2706:	bb 0f       	add	r27, r27
    2708:	40 f4       	brcc	.+16     	; 0x271a <__fp_round+0x20>
    270a:	bf 2b       	or	r27, r31
    270c:	11 f4       	brne	.+4      	; 0x2712 <__fp_round+0x18>
    270e:	60 ff       	sbrs	r22, 0
    2710:	04 c0       	rjmp	.+8      	; 0x271a <__fp_round+0x20>
    2712:	6f 5f       	subi	r22, 0xFF	; 255
    2714:	7f 4f       	sbci	r23, 0xFF	; 255
    2716:	8f 4f       	sbci	r24, 0xFF	; 255
    2718:	9f 4f       	sbci	r25, 0xFF	; 255
    271a:	08 95       	ret

0000271c <__fp_split3>:
    271c:	57 fd       	sbrc	r21, 7
    271e:	90 58       	subi	r25, 0x80	; 128
    2720:	44 0f       	add	r20, r20
    2722:	55 1f       	adc	r21, r21
    2724:	59 f0       	breq	.+22     	; 0x273c <__fp_splitA+0x10>
    2726:	5f 3f       	cpi	r21, 0xFF	; 255
    2728:	71 f0       	breq	.+28     	; 0x2746 <__fp_splitA+0x1a>
    272a:	47 95       	ror	r20

0000272c <__fp_splitA>:
    272c:	88 0f       	add	r24, r24
    272e:	97 fb       	bst	r25, 7
    2730:	99 1f       	adc	r25, r25
    2732:	61 f0       	breq	.+24     	; 0x274c <__fp_splitA+0x20>
    2734:	9f 3f       	cpi	r25, 0xFF	; 255
    2736:	79 f0       	breq	.+30     	; 0x2756 <__fp_splitA+0x2a>
    2738:	87 95       	ror	r24
    273a:	08 95       	ret
    273c:	12 16       	cp	r1, r18
    273e:	13 06       	cpc	r1, r19
    2740:	14 06       	cpc	r1, r20
    2742:	55 1f       	adc	r21, r21
    2744:	f2 cf       	rjmp	.-28     	; 0x272a <__fp_split3+0xe>
    2746:	46 95       	lsr	r20
    2748:	f1 df       	rcall	.-30     	; 0x272c <__fp_splitA>
    274a:	08 c0       	rjmp	.+16     	; 0x275c <__fp_splitA+0x30>
    274c:	16 16       	cp	r1, r22
    274e:	17 06       	cpc	r1, r23
    2750:	18 06       	cpc	r1, r24
    2752:	99 1f       	adc	r25, r25
    2754:	f1 cf       	rjmp	.-30     	; 0x2738 <__fp_splitA+0xc>
    2756:	86 95       	lsr	r24
    2758:	71 05       	cpc	r23, r1
    275a:	61 05       	cpc	r22, r1
    275c:	08 94       	sec
    275e:	08 95       	ret

00002760 <__fp_zero>:
    2760:	e8 94       	clt

00002762 <__fp_szero>:
    2762:	bb 27       	eor	r27, r27
    2764:	66 27       	eor	r22, r22
    2766:	77 27       	eor	r23, r23
    2768:	cb 01       	movw	r24, r22
    276a:	97 f9       	bld	r25, 7
    276c:	08 95       	ret

0000276e <__gesf2>:
    276e:	8a df       	rcall	.-236    	; 0x2684 <__fp_cmp>
    2770:	08 f4       	brcc	.+2      	; 0x2774 <__gesf2+0x6>
    2772:	8f ef       	ldi	r24, 0xFF	; 255
    2774:	08 95       	ret

00002776 <__mulsf3>:
    2776:	0b d0       	rcall	.+22     	; 0x278e <__mulsf3x>
    2778:	c0 cf       	rjmp	.-128    	; 0x26fa <__fp_round>
    277a:	b1 df       	rcall	.-158    	; 0x26de <__fp_pscA>
    277c:	28 f0       	brcs	.+10     	; 0x2788 <__mulsf3+0x12>
    277e:	b6 df       	rcall	.-148    	; 0x26ec <__fp_pscB>
    2780:	18 f0       	brcs	.+6      	; 0x2788 <__mulsf3+0x12>
    2782:	95 23       	and	r25, r21
    2784:	09 f0       	breq	.+2      	; 0x2788 <__mulsf3+0x12>
    2786:	a2 cf       	rjmp	.-188    	; 0x26cc <__fp_inf>
    2788:	a7 cf       	rjmp	.-178    	; 0x26d8 <__fp_nan>
    278a:	11 24       	eor	r1, r1
    278c:	ea cf       	rjmp	.-44     	; 0x2762 <__fp_szero>

0000278e <__mulsf3x>:
    278e:	c6 df       	rcall	.-116    	; 0x271c <__fp_split3>
    2790:	a0 f3       	brcs	.-24     	; 0x277a <__mulsf3+0x4>

00002792 <__mulsf3_pse>:
    2792:	95 9f       	mul	r25, r21
    2794:	d1 f3       	breq	.-12     	; 0x278a <__mulsf3+0x14>
    2796:	95 0f       	add	r25, r21
    2798:	50 e0       	ldi	r21, 0x00	; 0
    279a:	55 1f       	adc	r21, r21
    279c:	62 9f       	mul	r22, r18
    279e:	f0 01       	movw	r30, r0
    27a0:	72 9f       	mul	r23, r18
    27a2:	bb 27       	eor	r27, r27
    27a4:	f0 0d       	add	r31, r0
    27a6:	b1 1d       	adc	r27, r1
    27a8:	63 9f       	mul	r22, r19
    27aa:	aa 27       	eor	r26, r26
    27ac:	f0 0d       	add	r31, r0
    27ae:	b1 1d       	adc	r27, r1
    27b0:	aa 1f       	adc	r26, r26
    27b2:	64 9f       	mul	r22, r20
    27b4:	66 27       	eor	r22, r22
    27b6:	b0 0d       	add	r27, r0
    27b8:	a1 1d       	adc	r26, r1
    27ba:	66 1f       	adc	r22, r22
    27bc:	82 9f       	mul	r24, r18
    27be:	22 27       	eor	r18, r18
    27c0:	b0 0d       	add	r27, r0
    27c2:	a1 1d       	adc	r26, r1
    27c4:	62 1f       	adc	r22, r18
    27c6:	73 9f       	mul	r23, r19
    27c8:	b0 0d       	add	r27, r0
    27ca:	a1 1d       	adc	r26, r1
    27cc:	62 1f       	adc	r22, r18
    27ce:	83 9f       	mul	r24, r19
    27d0:	a0 0d       	add	r26, r0
    27d2:	61 1d       	adc	r22, r1
    27d4:	22 1f       	adc	r18, r18
    27d6:	74 9f       	mul	r23, r20
    27d8:	33 27       	eor	r19, r19
    27da:	a0 0d       	add	r26, r0
    27dc:	61 1d       	adc	r22, r1
    27de:	23 1f       	adc	r18, r19
    27e0:	84 9f       	mul	r24, r20
    27e2:	60 0d       	add	r22, r0
    27e4:	21 1d       	adc	r18, r1
    27e6:	82 2f       	mov	r24, r18
    27e8:	76 2f       	mov	r23, r22
    27ea:	6a 2f       	mov	r22, r26
    27ec:	11 24       	eor	r1, r1
    27ee:	9f 57       	subi	r25, 0x7F	; 127
    27f0:	50 40       	sbci	r21, 0x00	; 0
    27f2:	8a f0       	brmi	.+34     	; 0x2816 <__mulsf3_pse+0x84>
    27f4:	e1 f0       	breq	.+56     	; 0x282e <__mulsf3_pse+0x9c>
    27f6:	88 23       	and	r24, r24
    27f8:	4a f0       	brmi	.+18     	; 0x280c <__mulsf3_pse+0x7a>
    27fa:	ee 0f       	add	r30, r30
    27fc:	ff 1f       	adc	r31, r31
    27fe:	bb 1f       	adc	r27, r27
    2800:	66 1f       	adc	r22, r22
    2802:	77 1f       	adc	r23, r23
    2804:	88 1f       	adc	r24, r24
    2806:	91 50       	subi	r25, 0x01	; 1
    2808:	50 40       	sbci	r21, 0x00	; 0
    280a:	a9 f7       	brne	.-22     	; 0x27f6 <__mulsf3_pse+0x64>
    280c:	9e 3f       	cpi	r25, 0xFE	; 254
    280e:	51 05       	cpc	r21, r1
    2810:	70 f0       	brcs	.+28     	; 0x282e <__mulsf3_pse+0x9c>
    2812:	5c cf       	rjmp	.-328    	; 0x26cc <__fp_inf>
    2814:	a6 cf       	rjmp	.-180    	; 0x2762 <__fp_szero>
    2816:	5f 3f       	cpi	r21, 0xFF	; 255
    2818:	ec f3       	brlt	.-6      	; 0x2814 <__mulsf3_pse+0x82>
    281a:	98 3e       	cpi	r25, 0xE8	; 232
    281c:	dc f3       	brlt	.-10     	; 0x2814 <__mulsf3_pse+0x82>
    281e:	86 95       	lsr	r24
    2820:	77 95       	ror	r23
    2822:	67 95       	ror	r22
    2824:	b7 95       	ror	r27
    2826:	f7 95       	ror	r31
    2828:	e7 95       	ror	r30
    282a:	9f 5f       	subi	r25, 0xFF	; 255
    282c:	c1 f7       	brne	.-16     	; 0x281e <__mulsf3_pse+0x8c>
    282e:	fe 2b       	or	r31, r30
    2830:	88 0f       	add	r24, r24
    2832:	91 1d       	adc	r25, r1
    2834:	96 95       	lsr	r25
    2836:	87 95       	ror	r24
    2838:	97 f9       	bld	r25, 7
    283a:	08 95       	ret

0000283c <malloc>:
    283c:	cf 93       	push	r28
    283e:	df 93       	push	r29
    2840:	82 30       	cpi	r24, 0x02	; 2
    2842:	91 05       	cpc	r25, r1
    2844:	10 f4       	brcc	.+4      	; 0x284a <malloc+0xe>
    2846:	82 e0       	ldi	r24, 0x02	; 2
    2848:	90 e0       	ldi	r25, 0x00	; 0
    284a:	e0 91 6d 05 	lds	r30, 0x056D
    284e:	f0 91 6e 05 	lds	r31, 0x056E
    2852:	20 e0       	ldi	r18, 0x00	; 0
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	a0 e0       	ldi	r26, 0x00	; 0
    2858:	b0 e0       	ldi	r27, 0x00	; 0
    285a:	30 97       	sbiw	r30, 0x00	; 0
    285c:	39 f1       	breq	.+78     	; 0x28ac <malloc+0x70>
    285e:	40 81       	ld	r20, Z
    2860:	51 81       	ldd	r21, Z+1	; 0x01
    2862:	48 17       	cp	r20, r24
    2864:	59 07       	cpc	r21, r25
    2866:	b8 f0       	brcs	.+46     	; 0x2896 <malloc+0x5a>
    2868:	48 17       	cp	r20, r24
    286a:	59 07       	cpc	r21, r25
    286c:	71 f4       	brne	.+28     	; 0x288a <malloc+0x4e>
    286e:	82 81       	ldd	r24, Z+2	; 0x02
    2870:	93 81       	ldd	r25, Z+3	; 0x03
    2872:	10 97       	sbiw	r26, 0x00	; 0
    2874:	29 f0       	breq	.+10     	; 0x2880 <malloc+0x44>
    2876:	13 96       	adiw	r26, 0x03	; 3
    2878:	9c 93       	st	X, r25
    287a:	8e 93       	st	-X, r24
    287c:	12 97       	sbiw	r26, 0x02	; 2
    287e:	2c c0       	rjmp	.+88     	; 0x28d8 <malloc+0x9c>
    2880:	90 93 6e 05 	sts	0x056E, r25
    2884:	80 93 6d 05 	sts	0x056D, r24
    2888:	27 c0       	rjmp	.+78     	; 0x28d8 <malloc+0x9c>
    288a:	21 15       	cp	r18, r1
    288c:	31 05       	cpc	r19, r1
    288e:	31 f0       	breq	.+12     	; 0x289c <malloc+0x60>
    2890:	42 17       	cp	r20, r18
    2892:	53 07       	cpc	r21, r19
    2894:	18 f0       	brcs	.+6      	; 0x289c <malloc+0x60>
    2896:	a9 01       	movw	r20, r18
    2898:	db 01       	movw	r26, r22
    289a:	01 c0       	rjmp	.+2      	; 0x289e <malloc+0x62>
    289c:	ef 01       	movw	r28, r30
    289e:	9a 01       	movw	r18, r20
    28a0:	bd 01       	movw	r22, r26
    28a2:	df 01       	movw	r26, r30
    28a4:	02 80       	ldd	r0, Z+2	; 0x02
    28a6:	f3 81       	ldd	r31, Z+3	; 0x03
    28a8:	e0 2d       	mov	r30, r0
    28aa:	d7 cf       	rjmp	.-82     	; 0x285a <malloc+0x1e>
    28ac:	21 15       	cp	r18, r1
    28ae:	31 05       	cpc	r19, r1
    28b0:	f9 f0       	breq	.+62     	; 0x28f0 <malloc+0xb4>
    28b2:	28 1b       	sub	r18, r24
    28b4:	39 0b       	sbc	r19, r25
    28b6:	24 30       	cpi	r18, 0x04	; 4
    28b8:	31 05       	cpc	r19, r1
    28ba:	80 f4       	brcc	.+32     	; 0x28dc <malloc+0xa0>
    28bc:	8a 81       	ldd	r24, Y+2	; 0x02
    28be:	9b 81       	ldd	r25, Y+3	; 0x03
    28c0:	61 15       	cp	r22, r1
    28c2:	71 05       	cpc	r23, r1
    28c4:	21 f0       	breq	.+8      	; 0x28ce <malloc+0x92>
    28c6:	fb 01       	movw	r30, r22
    28c8:	93 83       	std	Z+3, r25	; 0x03
    28ca:	82 83       	std	Z+2, r24	; 0x02
    28cc:	04 c0       	rjmp	.+8      	; 0x28d6 <malloc+0x9a>
    28ce:	90 93 6e 05 	sts	0x056E, r25
    28d2:	80 93 6d 05 	sts	0x056D, r24
    28d6:	fe 01       	movw	r30, r28
    28d8:	32 96       	adiw	r30, 0x02	; 2
    28da:	44 c0       	rjmp	.+136    	; 0x2964 <malloc+0x128>
    28dc:	fe 01       	movw	r30, r28
    28de:	e2 0f       	add	r30, r18
    28e0:	f3 1f       	adc	r31, r19
    28e2:	81 93       	st	Z+, r24
    28e4:	91 93       	st	Z+, r25
    28e6:	22 50       	subi	r18, 0x02	; 2
    28e8:	31 09       	sbc	r19, r1
    28ea:	39 83       	std	Y+1, r19	; 0x01
    28ec:	28 83       	st	Y, r18
    28ee:	3a c0       	rjmp	.+116    	; 0x2964 <malloc+0x128>
    28f0:	20 91 6b 05 	lds	r18, 0x056B
    28f4:	30 91 6c 05 	lds	r19, 0x056C
    28f8:	23 2b       	or	r18, r19
    28fa:	41 f4       	brne	.+16     	; 0x290c <malloc+0xd0>
    28fc:	20 91 1b 01 	lds	r18, 0x011B
    2900:	30 91 1c 01 	lds	r19, 0x011C
    2904:	30 93 6c 05 	sts	0x056C, r19
    2908:	20 93 6b 05 	sts	0x056B, r18
    290c:	20 91 19 01 	lds	r18, 0x0119
    2910:	30 91 1a 01 	lds	r19, 0x011A
    2914:	21 15       	cp	r18, r1
    2916:	31 05       	cpc	r19, r1
    2918:	41 f4       	brne	.+16     	; 0x292a <malloc+0xee>
    291a:	2d b7       	in	r18, 0x3d	; 61
    291c:	3e b7       	in	r19, 0x3e	; 62
    291e:	40 91 1d 01 	lds	r20, 0x011D
    2922:	50 91 1e 01 	lds	r21, 0x011E
    2926:	24 1b       	sub	r18, r20
    2928:	35 0b       	sbc	r19, r21
    292a:	e0 91 6b 05 	lds	r30, 0x056B
    292e:	f0 91 6c 05 	lds	r31, 0x056C
    2932:	e2 17       	cp	r30, r18
    2934:	f3 07       	cpc	r31, r19
    2936:	a0 f4       	brcc	.+40     	; 0x2960 <malloc+0x124>
    2938:	2e 1b       	sub	r18, r30
    293a:	3f 0b       	sbc	r19, r31
    293c:	28 17       	cp	r18, r24
    293e:	39 07       	cpc	r19, r25
    2940:	78 f0       	brcs	.+30     	; 0x2960 <malloc+0x124>
    2942:	ac 01       	movw	r20, r24
    2944:	4e 5f       	subi	r20, 0xFE	; 254
    2946:	5f 4f       	sbci	r21, 0xFF	; 255
    2948:	24 17       	cp	r18, r20
    294a:	35 07       	cpc	r19, r21
    294c:	48 f0       	brcs	.+18     	; 0x2960 <malloc+0x124>
    294e:	4e 0f       	add	r20, r30
    2950:	5f 1f       	adc	r21, r31
    2952:	50 93 6c 05 	sts	0x056C, r21
    2956:	40 93 6b 05 	sts	0x056B, r20
    295a:	81 93       	st	Z+, r24
    295c:	91 93       	st	Z+, r25
    295e:	02 c0       	rjmp	.+4      	; 0x2964 <malloc+0x128>
    2960:	e0 e0       	ldi	r30, 0x00	; 0
    2962:	f0 e0       	ldi	r31, 0x00	; 0
    2964:	cf 01       	movw	r24, r30
    2966:	df 91       	pop	r29
    2968:	cf 91       	pop	r28
    296a:	08 95       	ret

0000296c <free>:
    296c:	cf 93       	push	r28
    296e:	df 93       	push	r29
    2970:	00 97       	sbiw	r24, 0x00	; 0
    2972:	09 f4       	brne	.+2      	; 0x2976 <free+0xa>
    2974:	87 c0       	rjmp	.+270    	; 0x2a84 <free+0x118>
    2976:	fc 01       	movw	r30, r24
    2978:	32 97       	sbiw	r30, 0x02	; 2
    297a:	13 82       	std	Z+3, r1	; 0x03
    297c:	12 82       	std	Z+2, r1	; 0x02
    297e:	c0 91 6d 05 	lds	r28, 0x056D
    2982:	d0 91 6e 05 	lds	r29, 0x056E
    2986:	20 97       	sbiw	r28, 0x00	; 0
    2988:	81 f4       	brne	.+32     	; 0x29aa <free+0x3e>
    298a:	20 81       	ld	r18, Z
    298c:	31 81       	ldd	r19, Z+1	; 0x01
    298e:	28 0f       	add	r18, r24
    2990:	39 1f       	adc	r19, r25
    2992:	80 91 6b 05 	lds	r24, 0x056B
    2996:	90 91 6c 05 	lds	r25, 0x056C
    299a:	82 17       	cp	r24, r18
    299c:	93 07       	cpc	r25, r19
    299e:	79 f5       	brne	.+94     	; 0x29fe <free+0x92>
    29a0:	f0 93 6c 05 	sts	0x056C, r31
    29a4:	e0 93 6b 05 	sts	0x056B, r30
    29a8:	6d c0       	rjmp	.+218    	; 0x2a84 <free+0x118>
    29aa:	de 01       	movw	r26, r28
    29ac:	20 e0       	ldi	r18, 0x00	; 0
    29ae:	30 e0       	ldi	r19, 0x00	; 0
    29b0:	ae 17       	cp	r26, r30
    29b2:	bf 07       	cpc	r27, r31
    29b4:	50 f4       	brcc	.+20     	; 0x29ca <free+0x5e>
    29b6:	12 96       	adiw	r26, 0x02	; 2
    29b8:	4d 91       	ld	r20, X+
    29ba:	5c 91       	ld	r21, X
    29bc:	13 97       	sbiw	r26, 0x03	; 3
    29be:	9d 01       	movw	r18, r26
    29c0:	41 15       	cp	r20, r1
    29c2:	51 05       	cpc	r21, r1
    29c4:	09 f1       	breq	.+66     	; 0x2a08 <free+0x9c>
    29c6:	da 01       	movw	r26, r20
    29c8:	f3 cf       	rjmp	.-26     	; 0x29b0 <free+0x44>
    29ca:	b3 83       	std	Z+3, r27	; 0x03
    29cc:	a2 83       	std	Z+2, r26	; 0x02
    29ce:	40 81       	ld	r20, Z
    29d0:	51 81       	ldd	r21, Z+1	; 0x01
    29d2:	84 0f       	add	r24, r20
    29d4:	95 1f       	adc	r25, r21
    29d6:	8a 17       	cp	r24, r26
    29d8:	9b 07       	cpc	r25, r27
    29da:	71 f4       	brne	.+28     	; 0x29f8 <free+0x8c>
    29dc:	8d 91       	ld	r24, X+
    29de:	9c 91       	ld	r25, X
    29e0:	11 97       	sbiw	r26, 0x01	; 1
    29e2:	84 0f       	add	r24, r20
    29e4:	95 1f       	adc	r25, r21
    29e6:	02 96       	adiw	r24, 0x02	; 2
    29e8:	91 83       	std	Z+1, r25	; 0x01
    29ea:	80 83       	st	Z, r24
    29ec:	12 96       	adiw	r26, 0x02	; 2
    29ee:	8d 91       	ld	r24, X+
    29f0:	9c 91       	ld	r25, X
    29f2:	13 97       	sbiw	r26, 0x03	; 3
    29f4:	93 83       	std	Z+3, r25	; 0x03
    29f6:	82 83       	std	Z+2, r24	; 0x02
    29f8:	21 15       	cp	r18, r1
    29fa:	31 05       	cpc	r19, r1
    29fc:	29 f4       	brne	.+10     	; 0x2a08 <free+0x9c>
    29fe:	f0 93 6e 05 	sts	0x056E, r31
    2a02:	e0 93 6d 05 	sts	0x056D, r30
    2a06:	3e c0       	rjmp	.+124    	; 0x2a84 <free+0x118>
    2a08:	d9 01       	movw	r26, r18
    2a0a:	13 96       	adiw	r26, 0x03	; 3
    2a0c:	fc 93       	st	X, r31
    2a0e:	ee 93       	st	-X, r30
    2a10:	12 97       	sbiw	r26, 0x02	; 2
    2a12:	4d 91       	ld	r20, X+
    2a14:	5d 91       	ld	r21, X+
    2a16:	a4 0f       	add	r26, r20
    2a18:	b5 1f       	adc	r27, r21
    2a1a:	ea 17       	cp	r30, r26
    2a1c:	fb 07       	cpc	r31, r27
    2a1e:	79 f4       	brne	.+30     	; 0x2a3e <free+0xd2>
    2a20:	80 81       	ld	r24, Z
    2a22:	91 81       	ldd	r25, Z+1	; 0x01
    2a24:	84 0f       	add	r24, r20
    2a26:	95 1f       	adc	r25, r21
    2a28:	02 96       	adiw	r24, 0x02	; 2
    2a2a:	d9 01       	movw	r26, r18
    2a2c:	11 96       	adiw	r26, 0x01	; 1
    2a2e:	9c 93       	st	X, r25
    2a30:	8e 93       	st	-X, r24
    2a32:	82 81       	ldd	r24, Z+2	; 0x02
    2a34:	93 81       	ldd	r25, Z+3	; 0x03
    2a36:	13 96       	adiw	r26, 0x03	; 3
    2a38:	9c 93       	st	X, r25
    2a3a:	8e 93       	st	-X, r24
    2a3c:	12 97       	sbiw	r26, 0x02	; 2
    2a3e:	e0 e0       	ldi	r30, 0x00	; 0
    2a40:	f0 e0       	ldi	r31, 0x00	; 0
    2a42:	8a 81       	ldd	r24, Y+2	; 0x02
    2a44:	9b 81       	ldd	r25, Y+3	; 0x03
    2a46:	00 97       	sbiw	r24, 0x00	; 0
    2a48:	19 f0       	breq	.+6      	; 0x2a50 <free+0xe4>
    2a4a:	fe 01       	movw	r30, r28
    2a4c:	ec 01       	movw	r28, r24
    2a4e:	f9 cf       	rjmp	.-14     	; 0x2a42 <free+0xd6>
    2a50:	ce 01       	movw	r24, r28
    2a52:	02 96       	adiw	r24, 0x02	; 2
    2a54:	28 81       	ld	r18, Y
    2a56:	39 81       	ldd	r19, Y+1	; 0x01
    2a58:	82 0f       	add	r24, r18
    2a5a:	93 1f       	adc	r25, r19
    2a5c:	20 91 6b 05 	lds	r18, 0x056B
    2a60:	30 91 6c 05 	lds	r19, 0x056C
    2a64:	28 17       	cp	r18, r24
    2a66:	39 07       	cpc	r19, r25
    2a68:	69 f4       	brne	.+26     	; 0x2a84 <free+0x118>
    2a6a:	30 97       	sbiw	r30, 0x00	; 0
    2a6c:	29 f4       	brne	.+10     	; 0x2a78 <free+0x10c>
    2a6e:	10 92 6e 05 	sts	0x056E, r1
    2a72:	10 92 6d 05 	sts	0x056D, r1
    2a76:	02 c0       	rjmp	.+4      	; 0x2a7c <free+0x110>
    2a78:	13 82       	std	Z+3, r1	; 0x03
    2a7a:	12 82       	std	Z+2, r1	; 0x02
    2a7c:	d0 93 6c 05 	sts	0x056C, r29
    2a80:	c0 93 6b 05 	sts	0x056B, r28
    2a84:	df 91       	pop	r29
    2a86:	cf 91       	pop	r28
    2a88:	08 95       	ret

00002a8a <atof>:
    2a8a:	66 27       	eor	r22, r22
    2a8c:	77 27       	eor	r23, r23
    2a8e:	a5 c1       	rjmp	.+842    	; 0x2dda <strtod>

00002a90 <__ftoa_engine>:
    2a90:	28 30       	cpi	r18, 0x08	; 8
    2a92:	08 f0       	brcs	.+2      	; 0x2a96 <__ftoa_engine+0x6>
    2a94:	27 e0       	ldi	r18, 0x07	; 7
    2a96:	33 27       	eor	r19, r19
    2a98:	da 01       	movw	r26, r20
    2a9a:	99 0f       	add	r25, r25
    2a9c:	31 1d       	adc	r19, r1
    2a9e:	87 fd       	sbrc	r24, 7
    2aa0:	91 60       	ori	r25, 0x01	; 1
    2aa2:	00 96       	adiw	r24, 0x00	; 0
    2aa4:	61 05       	cpc	r22, r1
    2aa6:	71 05       	cpc	r23, r1
    2aa8:	39 f4       	brne	.+14     	; 0x2ab8 <__ftoa_engine+0x28>
    2aaa:	32 60       	ori	r19, 0x02	; 2
    2aac:	2e 5f       	subi	r18, 0xFE	; 254
    2aae:	3d 93       	st	X+, r19
    2ab0:	30 e3       	ldi	r19, 0x30	; 48
    2ab2:	2a 95       	dec	r18
    2ab4:	e1 f7       	brne	.-8      	; 0x2aae <__ftoa_engine+0x1e>
    2ab6:	08 95       	ret
    2ab8:	9f 3f       	cpi	r25, 0xFF	; 255
    2aba:	30 f0       	brcs	.+12     	; 0x2ac8 <__ftoa_engine+0x38>
    2abc:	80 38       	cpi	r24, 0x80	; 128
    2abe:	71 05       	cpc	r23, r1
    2ac0:	61 05       	cpc	r22, r1
    2ac2:	09 f0       	breq	.+2      	; 0x2ac6 <__ftoa_engine+0x36>
    2ac4:	3c 5f       	subi	r19, 0xFC	; 252
    2ac6:	3c 5f       	subi	r19, 0xFC	; 252
    2ac8:	3d 93       	st	X+, r19
    2aca:	91 30       	cpi	r25, 0x01	; 1
    2acc:	08 f0       	brcs	.+2      	; 0x2ad0 <__ftoa_engine+0x40>
    2ace:	80 68       	ori	r24, 0x80	; 128
    2ad0:	91 1d       	adc	r25, r1
    2ad2:	df 93       	push	r29
    2ad4:	cf 93       	push	r28
    2ad6:	1f 93       	push	r17
    2ad8:	0f 93       	push	r16
    2ada:	ff 92       	push	r15
    2adc:	ef 92       	push	r14
    2ade:	19 2f       	mov	r17, r25
    2ae0:	98 7f       	andi	r25, 0xF8	; 248
    2ae2:	96 95       	lsr	r25
    2ae4:	e9 2f       	mov	r30, r25
    2ae6:	96 95       	lsr	r25
    2ae8:	96 95       	lsr	r25
    2aea:	e9 0f       	add	r30, r25
    2aec:	ff 27       	eor	r31, r31
    2aee:	eb 55       	subi	r30, 0x5B	; 91
    2af0:	fe 4f       	sbci	r31, 0xFE	; 254
    2af2:	99 27       	eor	r25, r25
    2af4:	33 27       	eor	r19, r19
    2af6:	ee 24       	eor	r14, r14
    2af8:	ff 24       	eor	r15, r15
    2afa:	a7 01       	movw	r20, r14
    2afc:	e7 01       	movw	r28, r14
    2afe:	05 90       	lpm	r0, Z+
    2b00:	08 94       	sec
    2b02:	07 94       	ror	r0
    2b04:	28 f4       	brcc	.+10     	; 0x2b10 <__ftoa_engine+0x80>
    2b06:	36 0f       	add	r19, r22
    2b08:	e7 1e       	adc	r14, r23
    2b0a:	f8 1e       	adc	r15, r24
    2b0c:	49 1f       	adc	r20, r25
    2b0e:	51 1d       	adc	r21, r1
    2b10:	66 0f       	add	r22, r22
    2b12:	77 1f       	adc	r23, r23
    2b14:	88 1f       	adc	r24, r24
    2b16:	99 1f       	adc	r25, r25
    2b18:	06 94       	lsr	r0
    2b1a:	a1 f7       	brne	.-24     	; 0x2b04 <__ftoa_engine+0x74>
    2b1c:	05 90       	lpm	r0, Z+
    2b1e:	07 94       	ror	r0
    2b20:	28 f4       	brcc	.+10     	; 0x2b2c <__ftoa_engine+0x9c>
    2b22:	e7 0e       	add	r14, r23
    2b24:	f8 1e       	adc	r15, r24
    2b26:	49 1f       	adc	r20, r25
    2b28:	56 1f       	adc	r21, r22
    2b2a:	c1 1d       	adc	r28, r1
    2b2c:	77 0f       	add	r23, r23
    2b2e:	88 1f       	adc	r24, r24
    2b30:	99 1f       	adc	r25, r25
    2b32:	66 1f       	adc	r22, r22
    2b34:	06 94       	lsr	r0
    2b36:	a1 f7       	brne	.-24     	; 0x2b20 <__ftoa_engine+0x90>
    2b38:	05 90       	lpm	r0, Z+
    2b3a:	07 94       	ror	r0
    2b3c:	28 f4       	brcc	.+10     	; 0x2b48 <__ftoa_engine+0xb8>
    2b3e:	f8 0e       	add	r15, r24
    2b40:	49 1f       	adc	r20, r25
    2b42:	56 1f       	adc	r21, r22
    2b44:	c7 1f       	adc	r28, r23
    2b46:	d1 1d       	adc	r29, r1
    2b48:	88 0f       	add	r24, r24
    2b4a:	99 1f       	adc	r25, r25
    2b4c:	66 1f       	adc	r22, r22
    2b4e:	77 1f       	adc	r23, r23
    2b50:	06 94       	lsr	r0
    2b52:	a1 f7       	brne	.-24     	; 0x2b3c <__ftoa_engine+0xac>
    2b54:	05 90       	lpm	r0, Z+
    2b56:	07 94       	ror	r0
    2b58:	20 f4       	brcc	.+8      	; 0x2b62 <__ftoa_engine+0xd2>
    2b5a:	49 0f       	add	r20, r25
    2b5c:	56 1f       	adc	r21, r22
    2b5e:	c7 1f       	adc	r28, r23
    2b60:	d8 1f       	adc	r29, r24
    2b62:	99 0f       	add	r25, r25
    2b64:	66 1f       	adc	r22, r22
    2b66:	77 1f       	adc	r23, r23
    2b68:	88 1f       	adc	r24, r24
    2b6a:	06 94       	lsr	r0
    2b6c:	a9 f7       	brne	.-22     	; 0x2b58 <__ftoa_engine+0xc8>
    2b6e:	84 91       	lpm	r24, Z
    2b70:	10 95       	com	r17
    2b72:	17 70       	andi	r17, 0x07	; 7
    2b74:	41 f0       	breq	.+16     	; 0x2b86 <__ftoa_engine+0xf6>
    2b76:	d6 95       	lsr	r29
    2b78:	c7 95       	ror	r28
    2b7a:	57 95       	ror	r21
    2b7c:	47 95       	ror	r20
    2b7e:	f7 94       	ror	r15
    2b80:	e7 94       	ror	r14
    2b82:	1a 95       	dec	r17
    2b84:	c1 f7       	brne	.-16     	; 0x2b76 <__ftoa_engine+0xe6>
    2b86:	eb e4       	ldi	r30, 0x4B	; 75
    2b88:	f1 e0       	ldi	r31, 0x01	; 1
    2b8a:	68 94       	set
    2b8c:	15 90       	lpm	r1, Z+
    2b8e:	15 91       	lpm	r17, Z+
    2b90:	35 91       	lpm	r19, Z+
    2b92:	65 91       	lpm	r22, Z+
    2b94:	95 91       	lpm	r25, Z+
    2b96:	05 90       	lpm	r0, Z+
    2b98:	7f e2       	ldi	r23, 0x2F	; 47
    2b9a:	73 95       	inc	r23
    2b9c:	e1 18       	sub	r14, r1
    2b9e:	f1 0a       	sbc	r15, r17
    2ba0:	43 0b       	sbc	r20, r19
    2ba2:	56 0b       	sbc	r21, r22
    2ba4:	c9 0b       	sbc	r28, r25
    2ba6:	d0 09       	sbc	r29, r0
    2ba8:	c0 f7       	brcc	.-16     	; 0x2b9a <__ftoa_engine+0x10a>
    2baa:	e1 0c       	add	r14, r1
    2bac:	f1 1e       	adc	r15, r17
    2bae:	43 1f       	adc	r20, r19
    2bb0:	56 1f       	adc	r21, r22
    2bb2:	c9 1f       	adc	r28, r25
    2bb4:	d0 1d       	adc	r29, r0
    2bb6:	7e f4       	brtc	.+30     	; 0x2bd6 <__ftoa_engine+0x146>
    2bb8:	70 33       	cpi	r23, 0x30	; 48
    2bba:	11 f4       	brne	.+4      	; 0x2bc0 <__ftoa_engine+0x130>
    2bbc:	8a 95       	dec	r24
    2bbe:	e6 cf       	rjmp	.-52     	; 0x2b8c <__ftoa_engine+0xfc>
    2bc0:	e8 94       	clt
    2bc2:	01 50       	subi	r16, 0x01	; 1
    2bc4:	30 f0       	brcs	.+12     	; 0x2bd2 <__ftoa_engine+0x142>
    2bc6:	08 0f       	add	r16, r24
    2bc8:	0a f4       	brpl	.+2      	; 0x2bcc <__ftoa_engine+0x13c>
    2bca:	00 27       	eor	r16, r16
    2bcc:	02 17       	cp	r16, r18
    2bce:	08 f4       	brcc	.+2      	; 0x2bd2 <__ftoa_engine+0x142>
    2bd0:	20 2f       	mov	r18, r16
    2bd2:	23 95       	inc	r18
    2bd4:	02 2f       	mov	r16, r18
    2bd6:	7a 33       	cpi	r23, 0x3A	; 58
    2bd8:	28 f0       	brcs	.+10     	; 0x2be4 <__ftoa_engine+0x154>
    2bda:	79 e3       	ldi	r23, 0x39	; 57
    2bdc:	7d 93       	st	X+, r23
    2bde:	2a 95       	dec	r18
    2be0:	e9 f7       	brne	.-6      	; 0x2bdc <__ftoa_engine+0x14c>
    2be2:	10 c0       	rjmp	.+32     	; 0x2c04 <__ftoa_engine+0x174>
    2be4:	7d 93       	st	X+, r23
    2be6:	2a 95       	dec	r18
    2be8:	89 f6       	brne	.-94     	; 0x2b8c <__ftoa_engine+0xfc>
    2bea:	06 94       	lsr	r0
    2bec:	97 95       	ror	r25
    2bee:	67 95       	ror	r22
    2bf0:	37 95       	ror	r19
    2bf2:	17 95       	ror	r17
    2bf4:	17 94       	ror	r1
    2bf6:	e1 18       	sub	r14, r1
    2bf8:	f1 0a       	sbc	r15, r17
    2bfa:	43 0b       	sbc	r20, r19
    2bfc:	56 0b       	sbc	r21, r22
    2bfe:	c9 0b       	sbc	r28, r25
    2c00:	d0 09       	sbc	r29, r0
    2c02:	98 f0       	brcs	.+38     	; 0x2c2a <__ftoa_engine+0x19a>
    2c04:	23 95       	inc	r18
    2c06:	7e 91       	ld	r23, -X
    2c08:	73 95       	inc	r23
    2c0a:	7a 33       	cpi	r23, 0x3A	; 58
    2c0c:	08 f0       	brcs	.+2      	; 0x2c10 <__ftoa_engine+0x180>
    2c0e:	70 e3       	ldi	r23, 0x30	; 48
    2c10:	7c 93       	st	X, r23
    2c12:	20 13       	cpse	r18, r16
    2c14:	b8 f7       	brcc	.-18     	; 0x2c04 <__ftoa_engine+0x174>
    2c16:	7e 91       	ld	r23, -X
    2c18:	70 61       	ori	r23, 0x10	; 16
    2c1a:	7d 93       	st	X+, r23
    2c1c:	30 f0       	brcs	.+12     	; 0x2c2a <__ftoa_engine+0x19a>
    2c1e:	83 95       	inc	r24
    2c20:	71 e3       	ldi	r23, 0x31	; 49
    2c22:	7d 93       	st	X+, r23
    2c24:	70 e3       	ldi	r23, 0x30	; 48
    2c26:	2a 95       	dec	r18
    2c28:	e1 f7       	brne	.-8      	; 0x2c22 <__ftoa_engine+0x192>
    2c2a:	11 24       	eor	r1, r1
    2c2c:	ef 90       	pop	r14
    2c2e:	ff 90       	pop	r15
    2c30:	0f 91       	pop	r16
    2c32:	1f 91       	pop	r17
    2c34:	cf 91       	pop	r28
    2c36:	df 91       	pop	r29
    2c38:	99 27       	eor	r25, r25
    2c3a:	87 fd       	sbrc	r24, 7
    2c3c:	90 95       	com	r25
    2c3e:	08 95       	ret

00002c40 <strnlen_P>:
    2c40:	fc 01       	movw	r30, r24
    2c42:	05 90       	lpm	r0, Z+
    2c44:	61 50       	subi	r22, 0x01	; 1
    2c46:	70 40       	sbci	r23, 0x00	; 0
    2c48:	01 10       	cpse	r0, r1
    2c4a:	d8 f7       	brcc	.-10     	; 0x2c42 <strnlen_P+0x2>
    2c4c:	80 95       	com	r24
    2c4e:	90 95       	com	r25
    2c50:	8e 0f       	add	r24, r30
    2c52:	9f 1f       	adc	r25, r31
    2c54:	08 95       	ret

00002c56 <strcpy>:
    2c56:	fb 01       	movw	r30, r22
    2c58:	dc 01       	movw	r26, r24
    2c5a:	01 90       	ld	r0, Z+
    2c5c:	0d 92       	st	X+, r0
    2c5e:	00 20       	and	r0, r0
    2c60:	e1 f7       	brne	.-8      	; 0x2c5a <strcpy+0x4>
    2c62:	08 95       	ret

00002c64 <strnlen>:
    2c64:	fc 01       	movw	r30, r24
    2c66:	61 50       	subi	r22, 0x01	; 1
    2c68:	70 40       	sbci	r23, 0x00	; 0
    2c6a:	01 90       	ld	r0, Z+
    2c6c:	01 10       	cpse	r0, r1
    2c6e:	d8 f7       	brcc	.-10     	; 0x2c66 <strnlen+0x2>
    2c70:	80 95       	com	r24
    2c72:	90 95       	com	r25
    2c74:	8e 0f       	add	r24, r30
    2c76:	9f 1f       	adc	r25, r31
    2c78:	08 95       	ret

00002c7a <fputc>:
    2c7a:	0f 93       	push	r16
    2c7c:	1f 93       	push	r17
    2c7e:	cf 93       	push	r28
    2c80:	df 93       	push	r29
    2c82:	18 2f       	mov	r17, r24
    2c84:	09 2f       	mov	r16, r25
    2c86:	eb 01       	movw	r28, r22
    2c88:	8b 81       	ldd	r24, Y+3	; 0x03
    2c8a:	81 fd       	sbrc	r24, 1
    2c8c:	03 c0       	rjmp	.+6      	; 0x2c94 <fputc+0x1a>
    2c8e:	8f ef       	ldi	r24, 0xFF	; 255
    2c90:	9f ef       	ldi	r25, 0xFF	; 255
    2c92:	20 c0       	rjmp	.+64     	; 0x2cd4 <fputc+0x5a>
    2c94:	82 ff       	sbrs	r24, 2
    2c96:	10 c0       	rjmp	.+32     	; 0x2cb8 <fputc+0x3e>
    2c98:	4e 81       	ldd	r20, Y+6	; 0x06
    2c9a:	5f 81       	ldd	r21, Y+7	; 0x07
    2c9c:	2c 81       	ldd	r18, Y+4	; 0x04
    2c9e:	3d 81       	ldd	r19, Y+5	; 0x05
    2ca0:	42 17       	cp	r20, r18
    2ca2:	53 07       	cpc	r21, r19
    2ca4:	7c f4       	brge	.+30     	; 0x2cc4 <fputc+0x4a>
    2ca6:	e8 81       	ld	r30, Y
    2ca8:	f9 81       	ldd	r31, Y+1	; 0x01
    2caa:	9f 01       	movw	r18, r30
    2cac:	2f 5f       	subi	r18, 0xFF	; 255
    2cae:	3f 4f       	sbci	r19, 0xFF	; 255
    2cb0:	39 83       	std	Y+1, r19	; 0x01
    2cb2:	28 83       	st	Y, r18
    2cb4:	10 83       	st	Z, r17
    2cb6:	06 c0       	rjmp	.+12     	; 0x2cc4 <fputc+0x4a>
    2cb8:	e8 85       	ldd	r30, Y+8	; 0x08
    2cba:	f9 85       	ldd	r31, Y+9	; 0x09
    2cbc:	81 2f       	mov	r24, r17
    2cbe:	09 95       	icall
    2cc0:	89 2b       	or	r24, r25
    2cc2:	29 f7       	brne	.-54     	; 0x2c8e <fputc+0x14>
    2cc4:	2e 81       	ldd	r18, Y+6	; 0x06
    2cc6:	3f 81       	ldd	r19, Y+7	; 0x07
    2cc8:	2f 5f       	subi	r18, 0xFF	; 255
    2cca:	3f 4f       	sbci	r19, 0xFF	; 255
    2ccc:	3f 83       	std	Y+7, r19	; 0x07
    2cce:	2e 83       	std	Y+6, r18	; 0x06
    2cd0:	81 2f       	mov	r24, r17
    2cd2:	90 2f       	mov	r25, r16
    2cd4:	df 91       	pop	r29
    2cd6:	cf 91       	pop	r28
    2cd8:	1f 91       	pop	r17
    2cda:	0f 91       	pop	r16
    2cdc:	08 95       	ret

00002cde <sprintf>:
    2cde:	ae e0       	ldi	r26, 0x0E	; 14
    2ce0:	b0 e0       	ldi	r27, 0x00	; 0
    2ce2:	e4 e7       	ldi	r30, 0x74	; 116
    2ce4:	f6 e1       	ldi	r31, 0x16	; 22
    2ce6:	d0 cb       	rjmp	.-2144   	; 0x2488 <__prologue_saves__+0x1c>
    2ce8:	0d 89       	ldd	r16, Y+21	; 0x15
    2cea:	1e 89       	ldd	r17, Y+22	; 0x16
    2cec:	86 e0       	ldi	r24, 0x06	; 6
    2cee:	8c 83       	std	Y+4, r24	; 0x04
    2cf0:	1a 83       	std	Y+2, r17	; 0x02
    2cf2:	09 83       	std	Y+1, r16	; 0x01
    2cf4:	8f ef       	ldi	r24, 0xFF	; 255
    2cf6:	9f e7       	ldi	r25, 0x7F	; 127
    2cf8:	9e 83       	std	Y+6, r25	; 0x06
    2cfa:	8d 83       	std	Y+5, r24	; 0x05
    2cfc:	ae 01       	movw	r20, r28
    2cfe:	47 5e       	subi	r20, 0xE7	; 231
    2d00:	5f 4f       	sbci	r21, 0xFF	; 255
    2d02:	6f 89       	ldd	r22, Y+23	; 0x17
    2d04:	78 8d       	ldd	r23, Y+24	; 0x18
    2d06:	ce 01       	movw	r24, r28
    2d08:	01 96       	adiw	r24, 0x01	; 1
    2d0a:	0e 94 5d 01 	call	0x2ba	; 0x2ba <vfprintf>
    2d0e:	ef 81       	ldd	r30, Y+7	; 0x07
    2d10:	f8 85       	ldd	r31, Y+8	; 0x08
    2d12:	e0 0f       	add	r30, r16
    2d14:	f1 1f       	adc	r31, r17
    2d16:	10 82       	st	Z, r1
    2d18:	2e 96       	adiw	r28, 0x0e	; 14
    2d1a:	e4 e0       	ldi	r30, 0x04	; 4
    2d1c:	d1 cb       	rjmp	.-2142   	; 0x24c0 <__epilogue_restores__+0x1c>

00002d1e <__ultoa_invert>:
    2d1e:	fa 01       	movw	r30, r20
    2d20:	aa 27       	eor	r26, r26
    2d22:	28 30       	cpi	r18, 0x08	; 8
    2d24:	51 f1       	breq	.+84     	; 0x2d7a <__ultoa_invert+0x5c>
    2d26:	20 31       	cpi	r18, 0x10	; 16
    2d28:	81 f1       	breq	.+96     	; 0x2d8a <__ultoa_invert+0x6c>
    2d2a:	e8 94       	clt
    2d2c:	6f 93       	push	r22
    2d2e:	6e 7f       	andi	r22, 0xFE	; 254
    2d30:	6e 5f       	subi	r22, 0xFE	; 254
    2d32:	7f 4f       	sbci	r23, 0xFF	; 255
    2d34:	8f 4f       	sbci	r24, 0xFF	; 255
    2d36:	9f 4f       	sbci	r25, 0xFF	; 255
    2d38:	af 4f       	sbci	r26, 0xFF	; 255
    2d3a:	b1 e0       	ldi	r27, 0x01	; 1
    2d3c:	3e d0       	rcall	.+124    	; 0x2dba <__ultoa_invert+0x9c>
    2d3e:	b4 e0       	ldi	r27, 0x04	; 4
    2d40:	3c d0       	rcall	.+120    	; 0x2dba <__ultoa_invert+0x9c>
    2d42:	67 0f       	add	r22, r23
    2d44:	78 1f       	adc	r23, r24
    2d46:	89 1f       	adc	r24, r25
    2d48:	9a 1f       	adc	r25, r26
    2d4a:	a1 1d       	adc	r26, r1
    2d4c:	68 0f       	add	r22, r24
    2d4e:	79 1f       	adc	r23, r25
    2d50:	8a 1f       	adc	r24, r26
    2d52:	91 1d       	adc	r25, r1
    2d54:	a1 1d       	adc	r26, r1
    2d56:	6a 0f       	add	r22, r26
    2d58:	71 1d       	adc	r23, r1
    2d5a:	81 1d       	adc	r24, r1
    2d5c:	91 1d       	adc	r25, r1
    2d5e:	a1 1d       	adc	r26, r1
    2d60:	20 d0       	rcall	.+64     	; 0x2da2 <__ultoa_invert+0x84>
    2d62:	09 f4       	brne	.+2      	; 0x2d66 <__ultoa_invert+0x48>
    2d64:	68 94       	set
    2d66:	3f 91       	pop	r19
    2d68:	2a e0       	ldi	r18, 0x0A	; 10
    2d6a:	26 9f       	mul	r18, r22
    2d6c:	11 24       	eor	r1, r1
    2d6e:	30 19       	sub	r19, r0
    2d70:	30 5d       	subi	r19, 0xD0	; 208
    2d72:	31 93       	st	Z+, r19
    2d74:	de f6       	brtc	.-74     	; 0x2d2c <__ultoa_invert+0xe>
    2d76:	cf 01       	movw	r24, r30
    2d78:	08 95       	ret
    2d7a:	46 2f       	mov	r20, r22
    2d7c:	47 70       	andi	r20, 0x07	; 7
    2d7e:	40 5d       	subi	r20, 0xD0	; 208
    2d80:	41 93       	st	Z+, r20
    2d82:	b3 e0       	ldi	r27, 0x03	; 3
    2d84:	0f d0       	rcall	.+30     	; 0x2da4 <__ultoa_invert+0x86>
    2d86:	c9 f7       	brne	.-14     	; 0x2d7a <__ultoa_invert+0x5c>
    2d88:	f6 cf       	rjmp	.-20     	; 0x2d76 <__ultoa_invert+0x58>
    2d8a:	46 2f       	mov	r20, r22
    2d8c:	4f 70       	andi	r20, 0x0F	; 15
    2d8e:	40 5d       	subi	r20, 0xD0	; 208
    2d90:	4a 33       	cpi	r20, 0x3A	; 58
    2d92:	18 f0       	brcs	.+6      	; 0x2d9a <__ultoa_invert+0x7c>
    2d94:	49 5d       	subi	r20, 0xD9	; 217
    2d96:	31 fd       	sbrc	r19, 1
    2d98:	40 52       	subi	r20, 0x20	; 32
    2d9a:	41 93       	st	Z+, r20
    2d9c:	02 d0       	rcall	.+4      	; 0x2da2 <__ultoa_invert+0x84>
    2d9e:	a9 f7       	brne	.-22     	; 0x2d8a <__ultoa_invert+0x6c>
    2da0:	ea cf       	rjmp	.-44     	; 0x2d76 <__ultoa_invert+0x58>
    2da2:	b4 e0       	ldi	r27, 0x04	; 4
    2da4:	a6 95       	lsr	r26
    2da6:	97 95       	ror	r25
    2da8:	87 95       	ror	r24
    2daa:	77 95       	ror	r23
    2dac:	67 95       	ror	r22
    2dae:	ba 95       	dec	r27
    2db0:	c9 f7       	brne	.-14     	; 0x2da4 <__ultoa_invert+0x86>
    2db2:	00 97       	sbiw	r24, 0x00	; 0
    2db4:	61 05       	cpc	r22, r1
    2db6:	71 05       	cpc	r23, r1
    2db8:	08 95       	ret
    2dba:	9b 01       	movw	r18, r22
    2dbc:	ac 01       	movw	r20, r24
    2dbe:	0a 2e       	mov	r0, r26
    2dc0:	06 94       	lsr	r0
    2dc2:	57 95       	ror	r21
    2dc4:	47 95       	ror	r20
    2dc6:	37 95       	ror	r19
    2dc8:	27 95       	ror	r18
    2dca:	ba 95       	dec	r27
    2dcc:	c9 f7       	brne	.-14     	; 0x2dc0 <__ultoa_invert+0xa2>
    2dce:	62 0f       	add	r22, r18
    2dd0:	73 1f       	adc	r23, r19
    2dd2:	84 1f       	adc	r24, r20
    2dd4:	95 1f       	adc	r25, r21
    2dd6:	a0 1d       	adc	r26, r0
    2dd8:	08 95       	ret

00002dda <strtod>:
    2dda:	a0 e0       	ldi	r26, 0x00	; 0
    2ddc:	b0 e0       	ldi	r27, 0x00	; 0
    2dde:	e2 ef       	ldi	r30, 0xF2	; 242
    2de0:	f6 e1       	ldi	r31, 0x16	; 22
    2de2:	4a cb       	rjmp	.-2412   	; 0x2478 <__prologue_saves__+0xc>
    2de4:	8b 01       	movw	r16, r22
    2de6:	61 15       	cp	r22, r1
    2de8:	71 05       	cpc	r23, r1
    2dea:	21 f0       	breq	.+8      	; 0x2df4 <strtod+0x1a>
    2dec:	db 01       	movw	r26, r22
    2dee:	8c 93       	st	X, r24
    2df0:	11 96       	adiw	r26, 0x01	; 1
    2df2:	9c 93       	st	X, r25
    2df4:	ec 01       	movw	r28, r24
    2df6:	5e 01       	movw	r10, r28
    2df8:	bf ef       	ldi	r27, 0xFF	; 255
    2dfa:	ab 1a       	sub	r10, r27
    2dfc:	bb 0a       	sbc	r11, r27
    2dfe:	75 01       	movw	r14, r10
    2e00:	c8 80       	ld	r12, Y
    2e02:	8c 2d       	mov	r24, r12
    2e04:	90 e0       	ldi	r25, 0x00	; 0
    2e06:	41 d1       	rcall	.+642    	; 0x308a <isspace>
    2e08:	89 2b       	or	r24, r25
    2e0a:	11 f0       	breq	.+4      	; 0x2e10 <strtod+0x36>
    2e0c:	e5 01       	movw	r28, r10
    2e0e:	f3 cf       	rjmp	.-26     	; 0x2df6 <strtod+0x1c>
    2e10:	ed e2       	ldi	r30, 0x2D	; 45
    2e12:	ce 12       	cpse	r12, r30
    2e14:	08 c0       	rjmp	.+16     	; 0x2e26 <strtod+0x4c>
    2e16:	7e 01       	movw	r14, r28
    2e18:	f2 e0       	ldi	r31, 0x02	; 2
    2e1a:	ef 0e       	add	r14, r31
    2e1c:	f1 1c       	adc	r15, r1
    2e1e:	c9 80       	ldd	r12, Y+1	; 0x01
    2e20:	dd 24       	eor	r13, r13
    2e22:	d3 94       	inc	r13
    2e24:	09 c0       	rjmp	.+18     	; 0x2e38 <strtod+0x5e>
    2e26:	2b e2       	ldi	r18, 0x2B	; 43
    2e28:	c2 12       	cpse	r12, r18
    2e2a:	05 c0       	rjmp	.+10     	; 0x2e36 <strtod+0x5c>
    2e2c:	7e 01       	movw	r14, r28
    2e2e:	42 e0       	ldi	r20, 0x02	; 2
    2e30:	e4 0e       	add	r14, r20
    2e32:	f1 1c       	adc	r15, r1
    2e34:	c9 80       	ldd	r12, Y+1	; 0x01
    2e36:	d1 2c       	mov	r13, r1
    2e38:	e7 01       	movw	r28, r14
    2e3a:	21 97       	sbiw	r28, 0x01	; 1
    2e3c:	43 e0       	ldi	r20, 0x03	; 3
    2e3e:	50 e0       	ldi	r21, 0x00	; 0
    2e40:	6d e4       	ldi	r22, 0x4D	; 77
    2e42:	72 e0       	ldi	r23, 0x02	; 2
    2e44:	ce 01       	movw	r24, r28
    2e46:	29 d1       	rcall	.+594    	; 0x309a <strncasecmp_P>
    2e48:	89 2b       	or	r24, r25
    2e4a:	b9 f4       	brne	.+46     	; 0x2e7a <strtod+0xa0>
    2e4c:	23 96       	adiw	r28, 0x03	; 3
    2e4e:	45 e0       	ldi	r20, 0x05	; 5
    2e50:	50 e0       	ldi	r21, 0x00	; 0
    2e52:	68 e4       	ldi	r22, 0x48	; 72
    2e54:	72 e0       	ldi	r23, 0x02	; 2
    2e56:	ce 01       	movw	r24, r28
    2e58:	20 d1       	rcall	.+576    	; 0x309a <strncasecmp_P>
    2e5a:	89 2b       	or	r24, r25
    2e5c:	09 f4       	brne	.+2      	; 0x2e60 <strtod+0x86>
    2e5e:	25 96       	adiw	r28, 0x05	; 5
    2e60:	01 15       	cp	r16, r1
    2e62:	11 05       	cpc	r17, r1
    2e64:	19 f0       	breq	.+6      	; 0x2e6c <strtod+0x92>
    2e66:	d8 01       	movw	r26, r16
    2e68:	cd 93       	st	X+, r28
    2e6a:	dc 93       	st	X, r29
    2e6c:	d1 10       	cpse	r13, r1
    2e6e:	00 c1       	rjmp	.+512    	; 0x3070 <strtod+0x296>
    2e70:	60 e0       	ldi	r22, 0x00	; 0
    2e72:	70 e0       	ldi	r23, 0x00	; 0
    2e74:	80 e8       	ldi	r24, 0x80	; 128
    2e76:	9f e7       	ldi	r25, 0x7F	; 127
    2e78:	04 c1       	rjmp	.+520    	; 0x3082 <strtod+0x2a8>
    2e7a:	43 e0       	ldi	r20, 0x03	; 3
    2e7c:	50 e0       	ldi	r21, 0x00	; 0
    2e7e:	65 e4       	ldi	r22, 0x45	; 69
    2e80:	72 e0       	ldi	r23, 0x02	; 2
    2e82:	ce 01       	movw	r24, r28
    2e84:	0a d1       	rcall	.+532    	; 0x309a <strncasecmp_P>
    2e86:	89 2b       	or	r24, r25
    2e88:	59 f4       	brne	.+22     	; 0x2ea0 <strtod+0xc6>
    2e8a:	01 15       	cp	r16, r1
    2e8c:	11 05       	cpc	r17, r1
    2e8e:	09 f4       	brne	.+2      	; 0x2e92 <strtod+0xb8>
    2e90:	f4 c0       	rjmp	.+488    	; 0x307a <strtod+0x2a0>
    2e92:	b2 e0       	ldi	r27, 0x02	; 2
    2e94:	eb 0e       	add	r14, r27
    2e96:	f1 1c       	adc	r15, r1
    2e98:	f8 01       	movw	r30, r16
    2e9a:	f1 82       	std	Z+1, r15	; 0x01
    2e9c:	e0 82       	st	Z, r14
    2e9e:	ed c0       	rjmp	.+474    	; 0x307a <strtod+0x2a0>
    2ea0:	f7 01       	movw	r30, r14
    2ea2:	60 e0       	ldi	r22, 0x00	; 0
    2ea4:	70 e0       	ldi	r23, 0x00	; 0
    2ea6:	cb 01       	movw	r24, r22
    2ea8:	c0 e0       	ldi	r28, 0x00	; 0
    2eaa:	d0 e0       	ldi	r29, 0x00	; 0
    2eac:	7f 01       	movw	r14, r30
    2eae:	a0 ed       	ldi	r26, 0xD0	; 208
    2eb0:	aa 2e       	mov	r10, r26
    2eb2:	ac 0c       	add	r10, r12
    2eb4:	29 e0       	ldi	r18, 0x09	; 9
    2eb6:	2a 15       	cp	r18, r10
    2eb8:	28 f1       	brcs	.+74     	; 0x2f04 <strtod+0x12a>
    2eba:	4d 2d       	mov	r20, r13
    2ebc:	42 60       	ori	r20, 0x02	; 2
    2ebe:	b4 2e       	mov	r11, r20
    2ec0:	2d 2d       	mov	r18, r13
    2ec2:	28 70       	andi	r18, 0x08	; 8
    2ec4:	d2 fe       	sbrs	r13, 2
    2ec6:	04 c0       	rjmp	.+8      	; 0x2ed0 <strtod+0xf6>
    2ec8:	21 11       	cpse	r18, r1
    2eca:	24 c0       	rjmp	.+72     	; 0x2f14 <strtod+0x13a>
    2ecc:	21 96       	adiw	r28, 0x01	; 1
    2ece:	22 c0       	rjmp	.+68     	; 0x2f14 <strtod+0x13a>
    2ed0:	21 11       	cpse	r18, r1
    2ed2:	21 97       	sbiw	r28, 0x01	; 1
    2ed4:	a5 e0       	ldi	r26, 0x05	; 5
    2ed6:	b0 e0       	ldi	r27, 0x00	; 0
    2ed8:	9b 01       	movw	r18, r22
    2eda:	ac 01       	movw	r20, r24
    2edc:	f9 d0       	rcall	.+498    	; 0x30d0 <__muluhisi3>
    2ede:	66 0f       	add	r22, r22
    2ee0:	77 1f       	adc	r23, r23
    2ee2:	88 1f       	adc	r24, r24
    2ee4:	99 1f       	adc	r25, r25
    2ee6:	6a 0d       	add	r22, r10
    2ee8:	71 1d       	adc	r23, r1
    2eea:	81 1d       	adc	r24, r1
    2eec:	91 1d       	adc	r25, r1
    2eee:	68 39       	cpi	r22, 0x98	; 152
    2ef0:	a9 e9       	ldi	r26, 0x99	; 153
    2ef2:	7a 07       	cpc	r23, r26
    2ef4:	8a 07       	cpc	r24, r26
    2ef6:	a9 e1       	ldi	r26, 0x19	; 25
    2ef8:	9a 07       	cpc	r25, r26
    2efa:	60 f0       	brcs	.+24     	; 0x2f14 <strtod+0x13a>
    2efc:	bd 2d       	mov	r27, r13
    2efe:	b6 60       	ori	r27, 0x06	; 6
    2f00:	bb 2e       	mov	r11, r27
    2f02:	08 c0       	rjmp	.+16     	; 0x2f14 <strtod+0x13a>
    2f04:	2e ef       	ldi	r18, 0xFE	; 254
    2f06:	a2 12       	cpse	r10, r18
    2f08:	0a c0       	rjmp	.+20     	; 0x2f1e <strtod+0x144>
    2f0a:	d3 fc       	sbrc	r13, 3
    2f0c:	50 c0       	rjmp	.+160    	; 0x2fae <strtod+0x1d4>
    2f0e:	4d 2d       	mov	r20, r13
    2f10:	48 60       	ori	r20, 0x08	; 8
    2f12:	b4 2e       	mov	r11, r20
    2f14:	31 96       	adiw	r30, 0x01	; 1
    2f16:	d7 01       	movw	r26, r14
    2f18:	cc 90       	ld	r12, X
    2f1a:	db 2c       	mov	r13, r11
    2f1c:	c7 cf       	rjmp	.-114    	; 0x2eac <strtod+0xd2>
    2f1e:	2c 2d       	mov	r18, r12
    2f20:	2f 7d       	andi	r18, 0xDF	; 223
    2f22:	25 34       	cpi	r18, 0x45	; 69
    2f24:	09 f0       	breq	.+2      	; 0x2f28 <strtod+0x14e>
    2f26:	43 c0       	rjmp	.+134    	; 0x2fae <strtod+0x1d4>
    2f28:	a0 81       	ld	r26, Z
    2f2a:	ad 32       	cpi	r26, 0x2D	; 45
    2f2c:	41 f4       	brne	.+16     	; 0x2f3e <strtod+0x164>
    2f2e:	bd 2d       	mov	r27, r13
    2f30:	b0 61       	ori	r27, 0x10	; 16
    2f32:	db 2e       	mov	r13, r27
    2f34:	7f 01       	movw	r14, r30
    2f36:	22 e0       	ldi	r18, 0x02	; 2
    2f38:	e2 0e       	add	r14, r18
    2f3a:	f1 1c       	adc	r15, r1
    2f3c:	0c c0       	rjmp	.+24     	; 0x2f56 <strtod+0x17c>
    2f3e:	7f 01       	movw	r14, r30
    2f40:	ab 32       	cpi	r26, 0x2B	; 43
    2f42:	31 f0       	breq	.+12     	; 0x2f50 <strtod+0x176>
    2f44:	4f ef       	ldi	r20, 0xFF	; 255
    2f46:	e4 1a       	sub	r14, r20
    2f48:	f4 0a       	sbc	r15, r20
    2f4a:	21 e0       	ldi	r18, 0x01	; 1
    2f4c:	30 e0       	ldi	r19, 0x00	; 0
    2f4e:	06 c0       	rjmp	.+12     	; 0x2f5c <strtod+0x182>
    2f50:	a2 e0       	ldi	r26, 0x02	; 2
    2f52:	ea 0e       	add	r14, r26
    2f54:	f1 1c       	adc	r15, r1
    2f56:	a1 81       	ldd	r26, Z+1	; 0x01
    2f58:	22 e0       	ldi	r18, 0x02	; 2
    2f5a:	30 e0       	ldi	r19, 0x00	; 0
    2f5c:	a0 53       	subi	r26, 0x30	; 48
    2f5e:	aa 30       	cpi	r26, 0x0A	; 10
    2f60:	18 f0       	brcs	.+6      	; 0x2f68 <strtod+0x18e>
    2f62:	e2 1a       	sub	r14, r18
    2f64:	f3 0a       	sbc	r15, r19
    2f66:	23 c0       	rjmp	.+70     	; 0x2fae <strtod+0x1d4>
    2f68:	f7 01       	movw	r30, r14
    2f6a:	20 e0       	ldi	r18, 0x00	; 0
    2f6c:	30 e0       	ldi	r19, 0x00	; 0
    2f6e:	20 38       	cpi	r18, 0x80	; 128
    2f70:	bc e0       	ldi	r27, 0x0C	; 12
    2f72:	3b 07       	cpc	r19, r27
    2f74:	5c f4       	brge	.+22     	; 0x2f8c <strtod+0x1b2>
    2f76:	a9 01       	movw	r20, r18
    2f78:	44 0f       	add	r20, r20
    2f7a:	55 1f       	adc	r21, r21
    2f7c:	44 0f       	add	r20, r20
    2f7e:	55 1f       	adc	r21, r21
    2f80:	24 0f       	add	r18, r20
    2f82:	35 1f       	adc	r19, r21
    2f84:	22 0f       	add	r18, r18
    2f86:	33 1f       	adc	r19, r19
    2f88:	2a 0f       	add	r18, r26
    2f8a:	31 1d       	adc	r19, r1
    2f8c:	af 01       	movw	r20, r30
    2f8e:	4f 5f       	subi	r20, 0xFF	; 255
    2f90:	5f 4f       	sbci	r21, 0xFF	; 255
    2f92:	7a 01       	movw	r14, r20
    2f94:	a0 81       	ld	r26, Z
    2f96:	a0 53       	subi	r26, 0x30	; 48
    2f98:	aa 30       	cpi	r26, 0x0A	; 10
    2f9a:	10 f4       	brcc	.+4      	; 0x2fa0 <strtod+0x1c6>
    2f9c:	fa 01       	movw	r30, r20
    2f9e:	e7 cf       	rjmp	.-50     	; 0x2f6e <strtod+0x194>
    2fa0:	d4 fe       	sbrs	r13, 4
    2fa2:	03 c0       	rjmp	.+6      	; 0x2faa <strtod+0x1d0>
    2fa4:	31 95       	neg	r19
    2fa6:	21 95       	neg	r18
    2fa8:	31 09       	sbc	r19, r1
    2faa:	c2 0f       	add	r28, r18
    2fac:	d3 1f       	adc	r29, r19
    2fae:	d1 fe       	sbrs	r13, 1
    2fb0:	09 c0       	rjmp	.+18     	; 0x2fc4 <strtod+0x1ea>
    2fb2:	01 15       	cp	r16, r1
    2fb4:	11 05       	cpc	r17, r1
    2fb6:	31 f0       	breq	.+12     	; 0x2fc4 <strtod+0x1ea>
    2fb8:	e1 e0       	ldi	r30, 0x01	; 1
    2fba:	ee 1a       	sub	r14, r30
    2fbc:	f1 08       	sbc	r15, r1
    2fbe:	d8 01       	movw	r26, r16
    2fc0:	ed 92       	st	X+, r14
    2fc2:	fc 92       	st	X, r15
    2fc4:	22 db       	rcall	.-2492   	; 0x260a <__floatunsisf>
    2fc6:	2d 2d       	mov	r18, r13
    2fc8:	23 70       	andi	r18, 0x03	; 3
    2fca:	23 30       	cpi	r18, 0x03	; 3
    2fcc:	19 f0       	breq	.+6      	; 0x2fd4 <strtod+0x1fa>
    2fce:	4b 01       	movw	r8, r22
    2fd0:	5c 01       	movw	r10, r24
    2fd2:	06 c0       	rjmp	.+12     	; 0x2fe0 <strtod+0x206>
    2fd4:	4b 01       	movw	r8, r22
    2fd6:	5c 01       	movw	r10, r24
    2fd8:	b7 fa       	bst	r11, 7
    2fda:	b0 94       	com	r11
    2fdc:	b7 f8       	bld	r11, 7
    2fde:	b0 94       	com	r11
    2fe0:	20 e0       	ldi	r18, 0x00	; 0
    2fe2:	30 e0       	ldi	r19, 0x00	; 0
    2fe4:	a9 01       	movw	r20, r18
    2fe6:	c5 01       	movw	r24, r10
    2fe8:	b4 01       	movw	r22, r8
    2fea:	77 da       	rcall	.-2834   	; 0x24da <__cmpsf2>
    2fec:	88 23       	and	r24, r24
    2fee:	09 f4       	brne	.+2      	; 0x2ff2 <strtod+0x218>
    2ff0:	3c c0       	rjmp	.+120    	; 0x306a <strtod+0x290>
    2ff2:	d7 ff       	sbrs	r29, 7
    2ff4:	06 c0       	rjmp	.+12     	; 0x3002 <strtod+0x228>
    2ff6:	d1 95       	neg	r29
    2ff8:	c1 95       	neg	r28
    2ffa:	d1 09       	sbc	r29, r1
    2ffc:	04 e6       	ldi	r16, 0x64	; 100
    2ffe:	12 e0       	ldi	r17, 0x02	; 2
    3000:	02 c0       	rjmp	.+4      	; 0x3006 <strtod+0x22c>
    3002:	0c e7       	ldi	r16, 0x7C	; 124
    3004:	12 e0       	ldi	r17, 0x02	; 2
    3006:	68 01       	movw	r12, r16
    3008:	b8 e1       	ldi	r27, 0x18	; 24
    300a:	cb 1a       	sub	r12, r27
    300c:	d1 08       	sbc	r13, r1
    300e:	90 e2       	ldi	r25, 0x20	; 32
    3010:	e9 2e       	mov	r14, r25
    3012:	f1 2c       	mov	r15, r1
    3014:	ce 15       	cp	r28, r14
    3016:	df 05       	cpc	r29, r15
    3018:	6c f0       	brlt	.+26     	; 0x3034 <strtod+0x25a>
    301a:	f8 01       	movw	r30, r16
    301c:	25 91       	lpm	r18, Z+
    301e:	35 91       	lpm	r19, Z+
    3020:	45 91       	lpm	r20, Z+
    3022:	54 91       	lpm	r21, Z
    3024:	c5 01       	movw	r24, r10
    3026:	b4 01       	movw	r22, r8
    3028:	a6 db       	rcall	.-2228   	; 0x2776 <__mulsf3>
    302a:	4b 01       	movw	r8, r22
    302c:	5c 01       	movw	r10, r24
    302e:	ce 19       	sub	r28, r14
    3030:	df 09       	sbc	r29, r15
    3032:	f0 cf       	rjmp	.-32     	; 0x3014 <strtod+0x23a>
    3034:	04 50       	subi	r16, 0x04	; 4
    3036:	11 09       	sbc	r17, r1
    3038:	f5 94       	asr	r15
    303a:	e7 94       	ror	r14
    303c:	0c 15       	cp	r16, r12
    303e:	1d 05       	cpc	r17, r13
    3040:	49 f7       	brne	.-46     	; 0x3014 <strtod+0x23a>
    3042:	8a 2d       	mov	r24, r10
    3044:	88 0f       	add	r24, r24
    3046:	8b 2d       	mov	r24, r11
    3048:	88 1f       	adc	r24, r24
    304a:	8f 3f       	cpi	r24, 0xFF	; 255
    304c:	41 f0       	breq	.+16     	; 0x305e <strtod+0x284>
    304e:	20 e0       	ldi	r18, 0x00	; 0
    3050:	30 e0       	ldi	r19, 0x00	; 0
    3052:	a9 01       	movw	r20, r18
    3054:	c5 01       	movw	r24, r10
    3056:	b4 01       	movw	r22, r8
    3058:	40 da       	rcall	.-2944   	; 0x24da <__cmpsf2>
    305a:	81 11       	cpse	r24, r1
    305c:	06 c0       	rjmp	.+12     	; 0x306a <strtod+0x290>
    305e:	82 e2       	ldi	r24, 0x22	; 34
    3060:	90 e0       	ldi	r25, 0x00	; 0
    3062:	90 93 70 05 	sts	0x0570, r25
    3066:	80 93 6f 05 	sts	0x056F, r24
    306a:	c5 01       	movw	r24, r10
    306c:	b4 01       	movw	r22, r8
    306e:	09 c0       	rjmp	.+18     	; 0x3082 <strtod+0x2a8>
    3070:	60 e0       	ldi	r22, 0x00	; 0
    3072:	70 e0       	ldi	r23, 0x00	; 0
    3074:	80 e8       	ldi	r24, 0x80	; 128
    3076:	9f ef       	ldi	r25, 0xFF	; 255
    3078:	04 c0       	rjmp	.+8      	; 0x3082 <strtod+0x2a8>
    307a:	60 e0       	ldi	r22, 0x00	; 0
    307c:	70 e0       	ldi	r23, 0x00	; 0
    307e:	80 ec       	ldi	r24, 0xC0	; 192
    3080:	9f e7       	ldi	r25, 0x7F	; 127
    3082:	cd b7       	in	r28, 0x3d	; 61
    3084:	de b7       	in	r29, 0x3e	; 62
    3086:	ec e0       	ldi	r30, 0x0C	; 12
    3088:	13 ca       	rjmp	.-3034   	; 0x24b0 <__epilogue_restores__+0xc>

0000308a <isspace>:
    308a:	91 11       	cpse	r25, r1
    308c:	1e c0       	rjmp	.+60     	; 0x30ca <__ctype_isfalse>
    308e:	80 32       	cpi	r24, 0x20	; 32
    3090:	19 f0       	breq	.+6      	; 0x3098 <isspace+0xe>
    3092:	89 50       	subi	r24, 0x09	; 9
    3094:	85 50       	subi	r24, 0x05	; 5
    3096:	d0 f7       	brcc	.-12     	; 0x308c <isspace+0x2>
    3098:	08 95       	ret

0000309a <strncasecmp_P>:
    309a:	fb 01       	movw	r30, r22
    309c:	dc 01       	movw	r26, r24
    309e:	41 50       	subi	r20, 0x01	; 1
    30a0:	50 40       	sbci	r21, 0x00	; 0
    30a2:	88 f0       	brcs	.+34     	; 0x30c6 <strncasecmp_P+0x2c>
    30a4:	8d 91       	ld	r24, X+
    30a6:	81 34       	cpi	r24, 0x41	; 65
    30a8:	1c f0       	brlt	.+6      	; 0x30b0 <strncasecmp_P+0x16>
    30aa:	8b 35       	cpi	r24, 0x5B	; 91
    30ac:	0c f4       	brge	.+2      	; 0x30b0 <strncasecmp_P+0x16>
    30ae:	80 5e       	subi	r24, 0xE0	; 224
    30b0:	65 91       	lpm	r22, Z+
    30b2:	61 34       	cpi	r22, 0x41	; 65
    30b4:	1c f0       	brlt	.+6      	; 0x30bc <strncasecmp_P+0x22>
    30b6:	6b 35       	cpi	r22, 0x5B	; 91
    30b8:	0c f4       	brge	.+2      	; 0x30bc <strncasecmp_P+0x22>
    30ba:	60 5e       	subi	r22, 0xE0	; 224
    30bc:	86 1b       	sub	r24, r22
    30be:	61 11       	cpse	r22, r1
    30c0:	71 f3       	breq	.-36     	; 0x309e <strncasecmp_P+0x4>
    30c2:	99 0b       	sbc	r25, r25
    30c4:	08 95       	ret
    30c6:	88 1b       	sub	r24, r24
    30c8:	fc cf       	rjmp	.-8      	; 0x30c2 <strncasecmp_P+0x28>

000030ca <__ctype_isfalse>:
    30ca:	99 27       	eor	r25, r25
    30cc:	88 27       	eor	r24, r24

000030ce <__ctype_istrue>:
    30ce:	08 95       	ret

000030d0 <__muluhisi3>:
    30d0:	09 d0       	rcall	.+18     	; 0x30e4 <__umulhisi3>
    30d2:	a5 9f       	mul	r26, r21
    30d4:	90 0d       	add	r25, r0
    30d6:	b4 9f       	mul	r27, r20
    30d8:	90 0d       	add	r25, r0
    30da:	a4 9f       	mul	r26, r20
    30dc:	80 0d       	add	r24, r0
    30de:	91 1d       	adc	r25, r1
    30e0:	11 24       	eor	r1, r1
    30e2:	08 95       	ret

000030e4 <__umulhisi3>:
    30e4:	a2 9f       	mul	r26, r18
    30e6:	b0 01       	movw	r22, r0
    30e8:	b3 9f       	mul	r27, r19
    30ea:	c0 01       	movw	r24, r0
    30ec:	a3 9f       	mul	r26, r19
    30ee:	70 0d       	add	r23, r0
    30f0:	81 1d       	adc	r24, r1
    30f2:	11 24       	eor	r1, r1
    30f4:	91 1d       	adc	r25, r1
    30f6:	b2 9f       	mul	r27, r18
    30f8:	70 0d       	add	r23, r0
    30fa:	81 1d       	adc	r24, r1
    30fc:	11 24       	eor	r1, r1
    30fe:	91 1d       	adc	r25, r1
    3100:	08 95       	ret

00003102 <_exit>:
    3102:	f8 94       	cli

00003104 <__stop_program>:
    3104:	ff cf       	rjmp	.-2      	; 0x3104 <__stop_program>
